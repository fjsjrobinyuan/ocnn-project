-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity minkowski_net_14_layer_pipeline_layer_convolution_with_persistent_accelerator_Outline_READ_NEIGHBOR_FEATURES is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    config_input_channels_val : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem_write_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_write_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_write_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_write_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_write_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_write_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_write_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_write_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_write_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_write_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_write_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_write_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_write_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_write_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_write_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_write_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_write_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_write_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_write_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_write_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_write_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_write_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_write_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_write_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_write_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_write_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_write_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_write_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_write_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_write_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_write_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_write_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_write_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_write_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_write_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_write_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_write_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_write_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_write_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_gmem_write_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_write_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_write_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_write_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_write_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_write_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_write_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_cast_cast : IN STD_LOGIC_VECTOR (61 downto 0);
    neighbor_features_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    neighbor_features_ce0 : OUT STD_LOGIC;
    neighbor_features_we0 : OUT STD_LOGIC;
    neighbor_features_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of minkowski_net_14_layer_pipeline_layer_convolution_with_persistent_accelerator_Outline_READ_NEIGHBOR_FEATURES is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_write_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ic_1_reg_144 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_write_addr_read_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln273_fu_119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln273_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ic_fu_52 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln273_fu_103_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal neighbor_features_we0_local : STD_LOGIC;
    signal bitcast_ln276_fu_123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal neighbor_features_ce0_local : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ic_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ic_fu_52 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln273_fu_98_p2 = ap_const_lv1_0))) then 
                ic_fu_52 <= add_ln273_fu_103_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                gmem_write_addr_read_reg_157 <= m_axi_gmem_write_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ic_1_reg_144 <= ic_fu_52;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_write_0_RVALID, ap_CS_fsm_state3, ap_CS_fsm_state2, icmp_ln273_fu_98_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln273_fu_98_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_gmem_write_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln273_fu_103_p2 <= std_logic_vector(unsigned(ic_fu_52) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_gmem_write_0_RVALID)
    begin
        if ((m_axi_gmem_write_0_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln273_fu_98_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln273_fu_98_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln273_fu_98_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln273_fu_98_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln276_fu_123_p1 <= gmem_write_addr_read_reg_157;

    gmem_write_blk_n_R_assign_proc : process(m_axi_gmem_write_0_RVALID, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gmem_write_blk_n_R <= m_axi_gmem_write_0_RVALID;
        else 
            gmem_write_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln273_fu_98_p2 <= "1" when (ic_fu_52 = config_input_channels_val) else "0";
    m_axi_gmem_write_0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_write_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_write_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_write_0_ARID <= ap_const_lv1_0;
    m_axi_gmem_write_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_write_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_write_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_write_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_write_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_write_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_write_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_write_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem_write_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_write_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_write_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_write_0_AWID <= ap_const_lv1_0;
    m_axi_gmem_write_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_write_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_write_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_write_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_write_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_write_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_write_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_write_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem_write_0_BREADY <= ap_const_logic_0;

    m_axi_gmem_write_0_RREADY_assign_proc : process(m_axi_gmem_write_0_RVALID, ap_CS_fsm_state3)
    begin
        if (((m_axi_gmem_write_0_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_write_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_write_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_write_0_WDATA <= ap_const_lv32_0;
    m_axi_gmem_write_0_WID <= ap_const_lv1_0;
    m_axi_gmem_write_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_write_0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_write_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem_write_0_WVALID <= ap_const_logic_0;
    neighbor_features_address0 <= zext_ln273_fu_119_p1(10 - 1 downto 0);
    neighbor_features_ce0 <= neighbor_features_ce0_local;

    neighbor_features_ce0_local_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            neighbor_features_ce0_local <= ap_const_logic_1;
        else 
            neighbor_features_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_features_d0 <= bitcast_ln276_fu_123_p1;
    neighbor_features_we0 <= neighbor_features_we0_local;

    neighbor_features_we0_local_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            neighbor_features_we0_local <= ap_const_logic_1;
        else 
            neighbor_features_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln273_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ic_1_reg_144),64));
end behav;

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module minkowski_net_14_layer_pipeline_streaming_bitmap_constructor (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_voxel_stream_dout,
        input_voxel_stream_empty_n,
        input_voxel_stream_read,
        feature_data_stream_din,
        feature_data_stream_full_n,
        feature_data_stream_write,
        write_addr_stream_din,
        write_addr_stream_full_n,
        write_addr_stream_write,
        p_read,
        L2_bitmap,
        L2_bitmap_ap_vld,
        L2_bitmap_read,
        p_read1,
        p_read2,
        initial_processed_voxels_constprop_i,
        initial_processed_voxels_constprop_o,
        initial_processed_voxels_constprop_o_ap_vld,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_pp2_stage0 = 29'd32;
parameter    ap_ST_fsm_state8 = 29'd64;
parameter    ap_ST_fsm_pp3_stage0 = 29'd128;
parameter    ap_ST_fsm_pp3_stage1 = 29'd256;
parameter    ap_ST_fsm_pp3_stage2 = 29'd512;
parameter    ap_ST_fsm_pp3_stage3 = 29'd1024;
parameter    ap_ST_fsm_pp3_stage4 = 29'd2048;
parameter    ap_ST_fsm_pp3_stage5 = 29'd4096;
parameter    ap_ST_fsm_pp3_stage6 = 29'd8192;
parameter    ap_ST_fsm_pp3_stage7 = 29'd16384;
parameter    ap_ST_fsm_pp3_stage8 = 29'd32768;
parameter    ap_ST_fsm_pp3_stage9 = 29'd65536;
parameter    ap_ST_fsm_pp3_stage10 = 29'd131072;
parameter    ap_ST_fsm_pp3_stage11 = 29'd262144;
parameter    ap_ST_fsm_pp3_stage12 = 29'd524288;
parameter    ap_ST_fsm_pp3_stage13 = 29'd1048576;
parameter    ap_ST_fsm_pp3_stage14 = 29'd2097152;
parameter    ap_ST_fsm_pp3_stage15 = 29'd4194304;
parameter    ap_ST_fsm_state26 = 29'd8388608;
parameter    ap_ST_fsm_pp4_stage0 = 29'd16777216;
parameter    ap_ST_fsm_state29 = 29'd33554432;
parameter    ap_ST_fsm_state30 = 29'd67108864;
parameter    ap_ST_fsm_state31 = 29'd134217728;
parameter    ap_ST_fsm_state32 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1084:0] input_voxel_stream_dout;
input   input_voxel_stream_empty_n;
output   input_voxel_stream_read;
output  [1084:0] feature_data_stream_din;
input   feature_data_stream_full_n;
output   feature_data_stream_write;
output  [59:0] write_addr_stream_din;
input   write_addr_stream_full_n;
output   write_addr_stream_write;
input  [511:0] p_read;
output  [511:0] L2_bitmap;
output   L2_bitmap_ap_vld;
input  [511:0] L2_bitmap_read;
input  [511:0] p_read1;
input  [511:0] p_read2;
input  [31:0] initial_processed_voxels_constprop_i;
output  [31:0] initial_processed_voxels_constprop_o;
output   initial_processed_voxels_constprop_o_ap_vld;
output  [511:0] ap_return_0;
output  [511:0] ap_return_1;
output  [511:0] ap_return_2;
output  [159:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_voxel_stream_read;
reg feature_data_stream_write;
reg write_addr_stream_write;
reg L2_bitmap_ap_vld;
reg[31:0] initial_processed_voxels_constprop_o;
reg initial_processed_voxels_constprop_o_ap_vld;
reg[511:0] ap_return_0;
reg[511:0] ap_return_1;
reg[511:0] ap_return_2;
reg[159:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] initialized;
reg   [31:0] l0_write_pos;
reg   [31:0] l1_write_pos;
reg   [31:0] l2_write_pos;
reg   [9:0] voxel_count;
reg   [31:0] retained_block_count;
wire   [0:0] L1_temp_q0;
wire   [0:0] L2_temp_q0;
reg    input_voxel_stream_blk_n;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    retained_blocks_stream_full_n;
wire    ap_block_pp2_stage0;
wire   [0:0] tmp_fu_834_p3;
wire   [0:0] tmp_1_nbreadreq_fu_352_p3;
reg    feature_data_stream_blk_n;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0_grp1;
reg   [0:0] current_voxel_occupancy_reg_3041;
wire   [0:0] tmp_s_nbwritereq_fu_366_p3;
wire   [0:0] tmp_2_nbwritereq_fu_374_p3;
reg    ap_block_pp2_stage0_subdone_grp1_done_reg;
reg    ap_block_pp2_stage0_subdone_grp1;
reg    ap_block_pp2_stage0_subdone;
reg    write_addr_stream_blk_n;
reg   [0:0] l1_write_pos_flag_2_reg_665;
reg   [0:0] l3_has_data_reg_676;
wire   [0:0] initialized_load_load_fu_721_p1;
reg   [0:0] initialized_load_reg_2976;
reg   [0:0] tmp_reg_3027;
reg    ap_predicate_op102_read_state6;
reg    ap_block_state6_pp2_stage0_iter0;
reg    ap_predicate_op138_write_state7;
reg    ap_predicate_op139_write_state7;
reg    ap_block_state7_pp2_stage0_iter1_grp1;
wire   [0:0] grp_nbwritereq_fu_396_p3;
reg    ap_predicate_op167_write_state7;
reg    ap_block_state7_pp2_stage0_iter1_grp2;
reg    ap_block_pp2_stage0_subdone_grp2_done_reg;
reg    ap_block_pp2_stage0_subdone_grp2;
reg    ap_block_pp2_stage0_11001;
reg   [1084:0] input_voxel_stream_read_reg_3034;
wire   [0:0] current_voxel_occupancy_fu_842_p1;
reg   [59:0] current_voxel_morton_addr_reg_3045;
wire   [0:0] icmp_ln132_fu_1253_p2;
reg   [0:0] icmp_ln132_reg_3105;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] and_ln132_fu_1293_p2;
reg   [0:0] and_ln132_reg_3109;
wire   [0:0] empty_51_fu_1307_p1;
reg   [0:0] empty_51_reg_3130;
reg   [0:0] l2_has_data_reg_3156;
wire    ap_CS_fsm_pp3_stage1;
reg    ap_enable_reg_pp3_iter0;
reg    ap_enable_reg_pp3_iter0_reg;
wire    ap_block_pp3_stage1_11001;
reg   [0:0] value_1_reg_3167;
wire    ap_CS_fsm_pp3_stage2;
wire    ap_block_pp3_stage2_11001;
reg   [0:0] value_2_reg_3178;
wire    ap_CS_fsm_pp3_stage3;
wire    ap_block_pp3_stage3_11001;
reg   [0:0] value_3_reg_3189;
wire    ap_CS_fsm_pp3_stage4;
wire    ap_block_pp3_stage4_11001;
reg   [0:0] value_4_reg_3200;
wire    ap_CS_fsm_pp3_stage5;
wire    ap_block_pp3_stage5_11001;
reg   [0:0] value_5_reg_3211;
wire    ap_CS_fsm_pp3_stage6;
wire    ap_block_pp3_stage6_11001;
reg   [0:0] value_6_reg_3222;
wire    ap_CS_fsm_pp3_stage7;
wire    ap_block_pp3_stage7_11001;
reg   [0:0] value_7_reg_3233;
wire    ap_CS_fsm_pp3_stage8;
wire    ap_block_pp3_stage8_11001;
wire   [0:0] l2_has_data_1_fu_1498_p2;
reg   [0:0] l2_has_data_1_reg_3238;
reg   [0:0] l2_has_data_3_reg_3251;
wire    ap_CS_fsm_pp3_stage9;
wire    ap_block_pp3_stage9_11001;
reg   [0:0] value_9_reg_3262;
wire    ap_CS_fsm_pp3_stage10;
wire    ap_block_pp3_stage10_11001;
reg   [0:0] value_10_reg_3273;
wire    ap_CS_fsm_pp3_stage11;
wire    ap_block_pp3_stage11_11001;
reg   [0:0] value_11_reg_3284;
wire    ap_CS_fsm_pp3_stage12;
wire    ap_block_pp3_stage12_11001;
reg   [511:0] L1_bitmap_1_load_reg_3295;
wire    ap_CS_fsm_pp3_stage13;
wire    ap_block_pp3_stage13_11001;
reg   [31:0] bit_idx_assign_1_load_reg_3300;
wire   [8:0] trunc_ln150_fu_1594_p1;
reg   [8:0] trunc_ln150_reg_3309;
wire   [511:0] tmp_15_fu_1748_p4;
reg   [511:0] tmp_15_reg_3316;
wire   [9:0] bit_offset_4_fu_1795_p3;
reg   [9:0] bit_offset_4_reg_3321;
wire   [9:0] bit_offset_5_fu_1841_p3;
reg   [9:0] bit_offset_5_reg_3326;
reg   [0:0] value_12_reg_3331;
wire   [31:0] add_ln169_fu_2058_p2;
reg   [31:0] add_ln169_reg_3342;
wire    ap_CS_fsm_pp3_stage14;
wire    ap_block_pp3_stage14_11001;
wire   [31:0] bit_idx_assign_9_fu_2063_p3;
reg   [31:0] bit_idx_assign_9_reg_3347;
wire   [511:0] L1_bitmap_2_fu_2069_p3;
reg   [511:0] L1_bitmap_2_reg_3360;
reg   [0:0] value_13_reg_3366;
wire   [8:0] trunc_ln150_8_fu_2098_p1;
reg   [8:0] trunc_ln150_8_reg_3377;
wire   [9:0] bit_offset_9_fu_2122_p3;
reg   [9:0] bit_offset_9_reg_3388;
reg   [0:0] value_14_reg_3393;
wire    ap_CS_fsm_pp3_stage15;
wire    ap_block_pp3_stage15_11001;
wire   [0:0] or_ln156_9_fu_2154_p2;
reg   [0:0] or_ln156_9_reg_3403;
wire   [511:0] tmp_37_fu_2390_p4;
reg   [511:0] tmp_37_reg_3408;
wire   [8:0] sub_ln150_24_fu_2399_p2;
reg   [8:0] sub_ln150_24_reg_3413;
wire   [0:0] l1_write_pos_flag_4_fu_2622_p2;
reg    ap_enable_reg_pp3_iter1;
wire   [0:0] icmp_ln176_fu_2687_p2;
reg   [0:0] icmp_ln176_reg_3438;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_pp4_stage0_11001;
wire   [2:0] trunc_ln180_fu_2704_p1;
reg   [2:0] trunc_ln180_reg_3447;
wire   [0:0] l3_has_data_1_fu_2729_p2;
reg    ap_enable_reg_pp4_iter1;
wire   [511:0] tmp_60_fu_2740_p4;
reg   [511:0] tmp_60_reg_3457;
wire    ap_CS_fsm_state29;
wire   [31:0] add_ln193_fu_2865_p2;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state5;
reg    ap_predicate_tran6to8_state6;
reg    ap_condition_pp2_exit_iter0_state6;
wire    ap_CS_fsm_state8;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state9;
wire    ap_block_pp3_stage15_subdone;
reg    ap_enable_reg_pp4_iter0;
wire    ap_CS_fsm_state26;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state27;
reg   [31:0] ap_phi_mux_l0_write_pos_loc_0_phi_fu_623_p4;
reg   [31:0] l0_write_pos_loc_0_reg_620;
reg   [0:0] l1_write_pos_flag_0_reg_630;
reg   [31:0] l1_write_pos_loc_0_reg_643;
reg   [31:0] l2_write_pos_loc_0_reg_654;
wire   [0:0] ap_phi_mux_l2_write_pos_flag_1_phi_fu_692_p4;
reg   [0:0] l2_write_pos_flag_1_reg_688;
reg   [31:0] l2_write_pos_new_1_reg_700;
reg   [31:0] l2_write_pos_loc_1_reg_711;
wire   [63:0] zext_ln105_fu_775_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln105_fu_763_p2;
wire   [63:0] zext_ln109_fu_805_p1;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln109_fu_793_p2;
wire   [63:0] zext_ln46_fu_1032_p1;
wire   [63:0] zext_ln155_fu_1323_p1;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln155_1_fu_1361_p1;
wire    ap_block_pp3_stage1;
wire   [63:0] zext_ln155_2_fu_1376_p1;
wire    ap_block_pp3_stage2;
wire   [63:0] zext_ln155_3_fu_1391_p1;
wire    ap_block_pp3_stage3;
wire   [63:0] zext_ln155_4_fu_1406_p1;
wire    ap_block_pp3_stage4;
wire   [63:0] zext_ln155_5_fu_1421_p1;
wire    ap_block_pp3_stage5;
wire   [63:0] zext_ln155_6_fu_1436_p1;
wire    ap_block_pp3_stage6;
wire   [63:0] zext_ln155_7_fu_1451_p1;
wire    ap_block_pp3_stage7;
wire   [63:0] p_cast166_fu_1464_p1;
wire    ap_block_pp3_stage8;
wire   [63:0] zext_ln155_8_fu_1515_p1;
wire   [63:0] zext_ln155_9_fu_1530_p1;
wire    ap_block_pp3_stage9;
wire   [63:0] zext_ln155_10_fu_1545_p1;
wire    ap_block_pp3_stage10;
wire   [63:0] zext_ln155_11_fu_1560_p1;
wire    ap_block_pp3_stage11;
wire   [63:0] zext_ln155_12_fu_1575_p1;
wire    ap_block_pp3_stage12;
wire   [63:0] zext_ln155_13_fu_1859_p1;
wire    ap_block_pp3_stage13;
wire   [63:0] zext_ln155_14_fu_2085_p1;
wire    ap_block_pp3_stage14;
wire   [63:0] zext_ln155_15_fu_2140_p1;
wire    ap_block_pp3_stage15;
wire   [63:0] zext_ln162_fu_2447_p1;
wire   [63:0] zext_ln176_fu_2699_p1;
wire    ap_block_pp4_stage0;
wire   [31:0] add_ln39_fu_1115_p2;
wire    ap_block_pp2_stage0_11001_grp0;
reg    ap_block_pp2_stage0_subdone_grp0_done_reg;
wire    ap_block_pp2_stage0_subdone_grp0;
wire    ap_CS_fsm_state32;
reg    ap_predicate_op564_write_state32;
wire    early_trigger_stream_full_n;
wire   [0:0] tmp_27_nbwritereq_fu_417_p3;
reg    ap_predicate_op568_write_state32;
reg    ap_block_state32;
wire   [9:0] add_ln125_fu_872_p2;
wire   [31:0] add_ln58_fu_1199_p2;
reg    ap_block_pp2_stage0_11001_grp2;
wire    ap_block_pp2_stage0_grp2;
wire   [31:0] add_ln124_fu_860_p2;
reg   [6:0] i_fu_272;
wire   [6:0] add_ln105_fu_769_p2;
reg   [3:0] i_1_fu_276;
wire   [3:0] add_ln109_fu_799_p2;
wire    ap_CS_fsm_state3;
reg   [511:0] L0_bitmap_0_fu_280;
wire   [511:0] tmp_57_fu_1105_p4;
wire    ap_block_pp2_stage0_grp0;
reg   [31:0] bit_idx_assign_fu_284;
reg   [1:0] l2_y_fu_288;
wire   [1:0] select_ln134_fu_1328_p3;
reg   [511:0] L1_bitmap_1_fu_292;
wire   [511:0] L1_bitmap_3_fu_2643_p3;
reg   [31:0] bit_idx_assign_1_fu_296;
wire   [31:0] l1_write_pos_loc_4_fu_2636_p3;
reg   [31:0] l1_write_pos_new_2_fu_300;
wire   [31:0] l1_write_pos_new_4_fu_2628_p3;
reg   [1:0] l2_z_fu_304;
wire   [1:0] select_ln132_fu_1299_p3;
reg   [2:0] indvar_flatten_fu_308;
wire   [2:0] add_ln132_1_fu_1259_p2;
reg   [7:0] l2_group_fu_312;
wire   [7:0] l2_group_1_fu_2719_p4;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln189_fu_2761_p2;
reg   [3:0] i_2_fu_316;
wire   [3:0] add_ln176_fu_2693_p2;
reg   [3:0] i_3_fu_320;
wire   [3:0] i_9_fu_2767_p2;
reg   [511:0] empty_52_fu_324;
wire   [511:0] tmp_64_fu_2841_p4;
reg    ap_block_pp2_stage0_01001_grp1;
reg    ap_block_pp2_stage0_11001_grp1;
reg    ap_block_pp2_stage0_01001_grp2;
reg    L1_temp_we0_local;
reg   [0:0] L1_temp_d0_local;
reg    L1_temp_ce0_local;
reg   [5:0] L1_temp_address0_local;
reg    L2_temp_we0_local;
reg   [0:0] L2_temp_d0_local;
reg    L2_temp_ce0_local;
reg   [2:0] L2_temp_address0_local;
wire   [0:0] l2_has_data_2_fu_2433_p2;
wire   [0:0] tmp_49_fu_916_p3;
wire   [0:0] tmp_48_fu_908_p3;
wire   [0:0] tmp_47_fu_900_p3;
wire   [0:0] tmp_46_fu_892_p3;
wire   [0:0] tmp_45_fu_884_p3;
wire   [0:0] tmp_58_fu_972_p3;
wire   [0:0] tmp_55_fu_964_p3;
wire   [0:0] tmp_54_fu_956_p3;
wire   [0:0] tmp_53_fu_948_p3;
wire   [0:0] tmp_52_fu_940_p3;
wire   [0:0] tmp_51_fu_932_p3;
wire   [0:0] tmp_50_fu_924_p3;
wire   [5:0] trunc_ln_fu_980_p7;
wire   [5:0] shl_ln45_1_fu_1006_p6;
wire   [5:0] add_ln45_fu_1020_p2;
wire   [5:0] shl_ln_fu_996_p4;
wire   [5:0] l1_idx_fu_1026_p2;
wire   [1083:0] tmp_44_fu_1037_p4;
wire   [8:0] trunc_ln150_16_fu_1069_p1;
wire   [8:0] sub_ln150_30_fu_1077_p2;
wire   [9:0] zext_ln150_33_fu_1083_p1;
wire   [0:0] tmp_56_fu_1061_p3;
wire   [9:0] sub_ln150_31_fu_1087_p2;
wire   [9:0] zext_ln150_32_fu_1073_p1;
wire   [9:0] bit_offset_fu_1093_p3;
wire  signed [31:0] tmp_57_fu_1105_p2;
wire   [0:0] icmp_ln134_fu_1281_p2;
wire   [0:0] trunc_ln132_fu_1271_p1;
wire   [0:0] xor_ln132_fu_1287_p2;
wire   [1:0] add_ln132_fu_1275_p2;
wire   [5:0] tmp_6_fu_1311_p5;
wire   [5:0] or_ln_fu_1351_p5;
wire   [5:0] tmp_7_fu_1366_p5;
wire   [5:0] or_ln153_1_fu_1381_p5;
wire   [5:0] tmp_8_fu_1396_p5;
wire   [5:0] or_ln153_2_fu_1411_p5;
wire   [5:0] tmp_9_fu_1426_p5;
wire   [5:0] or_ln153_3_fu_1441_p5;
wire   [2:0] tmp_3_fu_1456_p4;
wire   [0:0] or_ln156_1_fu_1473_p2;
wire   [0:0] or_ln156_fu_1469_p2;
wire   [0:0] or_ln156_4_fu_1487_p2;
wire   [0:0] or_ln156_3_fu_1483_p2;
wire   [0:0] or_ln156_5_fu_1492_p2;
wire   [0:0] or_ln156_2_fu_1477_p2;
wire   [5:0] or_ln153_4_fu_1505_p5;
wire   [5:0] or_ln153_5_fu_1520_p5;
wire   [5:0] or_ln153_6_fu_1535_p5;
wire   [5:0] or_ln153_7_fu_1550_p5;
wire   [5:0] or_ln153_8_fu_1565_p5;
wire   [8:0] sub_ln150_fu_1602_p2;
wire   [9:0] zext_ln150_1_fu_1608_p1;
wire   [0:0] tmp_10_fu_1586_p3;
wire   [9:0] sub_ln150_1_fu_1612_p2;
wire   [9:0] zext_ln150_fu_1598_p1;
wire   [9:0] bit_offset_1_fu_1618_p3;
wire  signed [31:0] tmp_11_fu_1630_p2;
wire   [31:0] add_ln167_fu_1639_p2;
wire   [8:0] trunc_ln150_1_fu_1653_p1;
wire   [8:0] xor_ln150_fu_1661_p2;
wire   [9:0] zext_ln150_3_fu_1667_p1;
wire   [0:0] tmp_12_fu_1645_p3;
wire   [9:0] sub_ln150_2_fu_1671_p2;
wire   [9:0] zext_ln150_2_fu_1657_p1;
wire   [9:0] bit_offset_2_fu_1677_p3;
wire   [511:0] tmp_11_fu_1630_p4;
wire  signed [31:0] tmp_13_fu_1689_p2;
wire   [31:0] add_ln167_1_fu_1698_p2;
wire   [8:0] trunc_ln150_2_fu_1712_p1;
wire   [8:0] sub_ln150_3_fu_1720_p2;
wire   [9:0] zext_ln150_5_fu_1726_p1;
wire   [0:0] tmp_14_fu_1704_p3;
wire   [9:0] sub_ln150_4_fu_1730_p2;
wire   [9:0] zext_ln150_4_fu_1716_p1;
wire   [9:0] bit_offset_3_fu_1736_p3;
wire   [511:0] tmp_13_fu_1689_p4;
wire  signed [31:0] tmp_15_fu_1748_p2;
wire   [31:0] add_ln167_2_fu_1757_p2;
wire   [8:0] trunc_ln150_3_fu_1771_p1;
wire   [8:0] sub_ln150_5_fu_1779_p2;
wire   [9:0] zext_ln150_7_fu_1785_p1;
wire   [0:0] tmp_16_fu_1763_p3;
wire   [9:0] sub_ln150_6_fu_1789_p2;
wire   [9:0] zext_ln150_6_fu_1775_p1;
wire   [31:0] add_ln167_3_fu_1803_p2;
wire   [8:0] trunc_ln150_4_fu_1817_p1;
wire   [8:0] sub_ln150_7_fu_1825_p2;
wire   [9:0] zext_ln150_9_fu_1831_p1;
wire   [0:0] tmp_18_fu_1809_p3;
wire   [9:0] sub_ln150_8_fu_1835_p2;
wire   [9:0] zext_ln150_8_fu_1821_p1;
wire   [5:0] or_ln153_9_fu_1849_p5;
wire  signed [31:0] tmp_17_fu_1867_p2;
wire   [511:0] tmp_17_fu_1867_p4;
wire  signed [31:0] tmp_19_fu_1878_p2;
wire   [31:0] add_ln167_4_fu_1887_p2;
wire   [8:0] trunc_ln150_5_fu_1900_p1;
wire   [8:0] sub_ln150_9_fu_1908_p2;
wire   [9:0] zext_ln150_11_fu_1913_p1;
wire   [0:0] tmp_20_fu_1892_p3;
wire   [9:0] sub_ln150_10_fu_1917_p2;
wire   [9:0] zext_ln150_10_fu_1904_p1;
wire   [9:0] bit_offset_6_fu_1923_p3;
wire   [511:0] tmp_19_fu_1878_p4;
wire  signed [31:0] tmp_21_fu_1935_p2;
wire   [31:0] add_ln167_5_fu_1944_p2;
wire   [8:0] trunc_ln150_6_fu_1957_p1;
wire   [8:0] sub_ln150_11_fu_1965_p2;
wire   [9:0] zext_ln150_13_fu_1970_p1;
wire   [0:0] tmp_22_fu_1949_p3;
wire   [9:0] sub_ln150_12_fu_1974_p2;
wire   [9:0] zext_ln150_12_fu_1961_p1;
wire   [9:0] bit_offset_7_fu_1980_p3;
wire   [511:0] tmp_21_fu_1935_p4;
wire  signed [31:0] tmp_23_fu_1992_p2;
wire   [31:0] add_ln167_6_fu_2001_p2;
wire   [8:0] trunc_ln150_7_fu_2014_p1;
wire   [8:0] sub_ln150_13_fu_2022_p2;
wire   [9:0] zext_ln150_15_fu_2027_p1;
wire   [0:0] tmp_24_fu_2006_p3;
wire   [9:0] sub_ln150_14_fu_2031_p2;
wire   [9:0] zext_ln150_14_fu_2018_p1;
wire   [9:0] bit_offset_8_fu_2037_p3;
wire   [511:0] tmp_23_fu_1992_p4;
wire  signed [31:0] tmp_25_fu_2049_p2;
wire   [511:0] tmp_25_fu_2049_p4;
wire   [5:0] or_ln153_s_fu_2075_p5;
wire   [8:0] sub_ln150_15_fu_2106_p2;
wire   [9:0] zext_ln150_17_fu_2112_p1;
wire   [0:0] tmp_28_fu_2090_p3;
wire   [9:0] sub_ln150_16_fu_2116_p2;
wire   [9:0] zext_ln150_16_fu_2102_p1;
wire   [5:0] or_ln153_10_fu_2130_p5;
wire   [0:0] or_ln156_8_fu_2150_p2;
wire   [0:0] or_ln156_7_fu_2145_p2;
wire  signed [31:0] tmp_29_fu_2163_p2;
wire   [31:0] add_ln167_7_fu_2171_p2;
wire   [8:0] trunc_ln150_9_fu_2184_p1;
wire   [8:0] xor_ln150_1_fu_2192_p2;
wire   [9:0] zext_ln150_19_fu_2197_p1;
wire   [0:0] tmp_30_fu_2176_p3;
wire   [9:0] sub_ln150_17_fu_2201_p2;
wire   [9:0] zext_ln150_18_fu_2188_p1;
wire   [9:0] bit_offset_10_fu_2207_p3;
wire   [511:0] tmp_29_fu_2163_p4;
wire  signed [31:0] tmp_31_fu_2219_p2;
wire   [31:0] add_ln167_8_fu_2228_p2;
wire   [8:0] trunc_ln150_10_fu_2241_p1;
wire   [8:0] sub_ln150_18_fu_2249_p2;
wire   [9:0] zext_ln150_21_fu_2254_p1;
wire   [0:0] tmp_32_fu_2233_p3;
wire   [9:0] sub_ln150_19_fu_2258_p2;
wire   [9:0] zext_ln150_20_fu_2245_p1;
wire   [9:0] bit_offset_11_fu_2264_p3;
wire   [511:0] tmp_31_fu_2219_p4;
wire  signed [31:0] tmp_33_fu_2276_p2;
wire   [31:0] add_ln167_9_fu_2285_p2;
wire   [8:0] trunc_ln150_11_fu_2298_p1;
wire   [8:0] sub_ln150_20_fu_2306_p2;
wire   [9:0] zext_ln150_23_fu_2311_p1;
wire   [0:0] tmp_34_fu_2290_p3;
wire   [9:0] sub_ln150_21_fu_2315_p2;
wire   [9:0] zext_ln150_22_fu_2302_p1;
wire   [9:0] bit_offset_12_fu_2321_p3;
wire   [511:0] tmp_33_fu_2276_p4;
wire  signed [31:0] tmp_35_fu_2333_p2;
wire   [31:0] add_ln167_10_fu_2342_p2;
wire   [8:0] trunc_ln150_12_fu_2355_p1;
wire   [8:0] sub_ln150_22_fu_2363_p2;
wire   [9:0] zext_ln150_25_fu_2368_p1;
wire   [0:0] tmp_36_fu_2347_p3;
wire   [9:0] sub_ln150_23_fu_2372_p2;
wire   [9:0] zext_ln150_24_fu_2359_p1;
wire   [9:0] bit_offset_13_fu_2378_p3;
wire   [511:0] tmp_35_fu_2333_p4;
wire  signed [31:0] tmp_37_fu_2390_p2;
wire   [0:0] or_ln156_11_fu_2422_p2;
wire   [0:0] or_ln156_10_fu_2418_p2;
wire   [0:0] or_ln156_12_fu_2427_p2;
wire   [2:0] or_ln1_fu_2439_p4;
wire   [31:0] add_ln167_11_fu_2452_p2;
wire   [8:0] trunc_ln150_13_fu_2465_p1;
wire   [9:0] zext_ln150_27_fu_2473_p1;
wire   [0:0] tmp_38_fu_2457_p3;
wire   [9:0] sub_ln150_25_fu_2476_p2;
wire   [9:0] zext_ln150_26_fu_2469_p1;
wire   [9:0] bit_offset_14_fu_2482_p3;
wire  signed [31:0] tmp_39_fu_2494_p2;
wire   [31:0] add_ln167_12_fu_2502_p2;
wire   [8:0] trunc_ln150_14_fu_2515_p1;
wire   [8:0] sub_ln150_26_fu_2523_p2;
wire   [9:0] zext_ln150_29_fu_2528_p1;
wire   [0:0] tmp_40_fu_2507_p3;
wire   [9:0] sub_ln150_27_fu_2532_p2;
wire   [9:0] zext_ln150_28_fu_2519_p1;
wire   [9:0] bit_offset_15_fu_2538_p3;
wire   [511:0] tmp_39_fu_2494_p4;
wire  signed [31:0] tmp_41_fu_2550_p2;
wire   [31:0] add_ln167_13_fu_2559_p2;
wire   [8:0] trunc_ln150_15_fu_2572_p1;
wire   [8:0] sub_ln150_28_fu_2580_p2;
wire   [9:0] zext_ln150_31_fu_2585_p1;
wire   [0:0] tmp_42_fu_2564_p3;
wire   [9:0] sub_ln150_29_fu_2589_p2;
wire   [9:0] zext_ln150_30_fu_2576_p1;
wire   [9:0] bit_offset_16_fu_2595_p3;
wire   [511:0] tmp_41_fu_2550_p4;
wire  signed [31:0] tmp_43_fu_2607_p2;
wire   [0:0] l1_write_pos_flag_3_fu_2407_p2;
wire   [31:0] add_ln169_1_fu_2617_p2;
wire   [31:0] l1_write_pos_new_3_fu_2412_p3;
wire   [511:0] tmp_43_fu_2607_p4;
wire   [31:0] l2_group_1_fu_2719_p2;
wire   [31:0] zext_ln189_fu_2779_p1;
wire   [31:0] add_ln191_fu_2783_p2;
wire   [8:0] trunc_ln150_17_fu_2805_p1;
wire   [8:0] sub_ln150_32_fu_2813_p2;
wire   [9:0] zext_ln150_35_fu_2819_p1;
wire   [0:0] tmp_63_fu_2797_p3;
wire   [9:0] sub_ln150_33_fu_2823_p2;
wire   [9:0] zext_ln150_34_fu_2809_p1;
wire   [9:0] bit_offset_17_fu_2829_p3;
wire  signed [31:0] tmp_64_fu_2841_p2;
wire   [0:0] value_17_fu_2789_p3;
wire   [31:0] add_ln199_1_fu_2883_p2;
wire   [31:0] add_ln199_fu_2877_p2;
wire   [31:0] add_ln199_2_fu_2889_p2;
wire   [159:0] or_ln199_1_fu_2895_p6;
reg   [511:0] ap_return_0_preg;
reg   [511:0] ap_return_1_preg;
reg   [511:0] ap_return_2_preg;
reg   [159:0] ap_return_3_preg;
reg   [28:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
wire    ap_block_pp3_stage1_subdone;
wire    ap_block_pp3_stage2_subdone;
wire    ap_block_pp3_stage3_subdone;
wire    ap_block_pp3_stage4_subdone;
wire    ap_block_pp3_stage5_subdone;
wire    ap_block_pp3_stage6_subdone;
wire    ap_block_pp3_stage7_subdone;
wire    ap_block_pp3_stage8_subdone;
wire    ap_block_pp3_stage9_subdone;
wire    ap_block_pp3_stage10_subdone;
wire    ap_block_pp3_stage11_subdone;
wire    ap_block_pp3_stage12_subdone;
wire    ap_block_pp3_stage13_subdone;
wire    ap_block_pp3_stage14_subdone;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire   [511:0] tmp_57_fu_1105_p0;
wire   [511:0] tmp_11_fu_1630_p0;
wire   [511:0] tmp_13_fu_1689_p0;
wire   [511:0] tmp_15_fu_1748_p0;
wire   [511:0] tmp_17_fu_1867_p0;
wire   [511:0] tmp_19_fu_1878_p0;
wire   [511:0] tmp_21_fu_1935_p0;
wire   [511:0] tmp_23_fu_1992_p0;
wire   [511:0] tmp_25_fu_2049_p0;
wire   [511:0] tmp_29_fu_2163_p0;
wire   [511:0] tmp_31_fu_2219_p0;
wire   [511:0] tmp_33_fu_2276_p0;
wire   [511:0] tmp_35_fu_2333_p0;
wire   [511:0] tmp_37_fu_2390_p0;
wire   [511:0] tmp_39_fu_2494_p0;
wire   [511:0] tmp_41_fu_2550_p0;
wire   [511:0] tmp_43_fu_2607_p0;
wire   [7:0] l2_group_1_fu_2719_p0;
wire   [0:0] value_17_fu_2789_p0;
wire   [511:0] tmp_64_fu_2841_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 initialized = 1'd0;
#0 l0_write_pos = 32'd0;
#0 l1_write_pos = 32'd0;
#0 l2_write_pos = 32'd0;
#0 voxel_count = 10'd0;
#0 retained_block_count = 32'd0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_block_pp2_stage0_subdone_grp1_done_reg = 1'b0;
#0 ap_block_pp2_stage0_subdone_grp2_done_reg = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0_reg = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_block_pp2_stage0_subdone_grp0_done_reg = 1'b0;
#0 i_fu_272 = 7'd0;
#0 i_1_fu_276 = 4'd0;
#0 L0_bitmap_0_fu_280 = 512'd0;
#0 bit_idx_assign_fu_284 = 32'd0;
#0 l2_y_fu_288 = 2'd0;
#0 L1_bitmap_1_fu_292 = 512'd0;
#0 bit_idx_assign_1_fu_296 = 32'd0;
#0 l1_write_pos_new_2_fu_300 = 32'd0;
#0 l2_z_fu_304 = 2'd0;
#0 indvar_flatten_fu_308 = 3'd0;
#0 l2_group_fu_312 = 8'd0;
#0 i_2_fu_316 = 4'd0;
#0 i_3_fu_320 = 4'd0;
#0 empty_52_fu_324 = 512'd0;
#0 ap_return_0_preg = 512'd0;
#0 ap_return_1_preg = 512'd0;
#0 ap_return_2_preg = 512'd0;
#0 ap_return_3_preg = 160'd0;
end

minkowski_net_14_layer_pipeline_streaming_bitmap_constructor_L1_temp_RAM_1P_BRAM_1R1W #(
    .DataWidth( 1 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
L1_temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(L1_temp_address0_local),
    .ce0(L1_temp_ce0_local),
    .we0(L1_temp_we0_local),
    .d0(L1_temp_d0_local),
    .q0(L1_temp_q0)
);

minkowski_net_14_layer_pipeline_streaming_bitmap_constructor_L2_temp_RAM_1P_BRAM_1R1W #(
    .DataWidth( 1 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
L2_temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(L2_temp_address0_local),
    .ce0(L2_temp_ce0_local),
    .we0(L2_temp_we0_local),
    .d0(L2_temp_d0_local),
    .q0(L2_temp_q0)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1s_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1s_512_1_1_U1(
    .din(L0_bitmap_0_fu_280),
    .sel(tmp_57_fu_1105_p2),
    .value(1'd1),
    .dout(tmp_57_fu_1105_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U2(
    .din(L1_bitmap_1_fu_292),
    .sel(tmp_11_fu_1630_p2),
    .value(l2_has_data_reg_3156),
    .dout(tmp_11_fu_1630_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U3(
    .din(tmp_11_fu_1630_p4),
    .sel(tmp_13_fu_1689_p2),
    .value(value_1_reg_3167),
    .dout(tmp_13_fu_1689_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U4(
    .din(tmp_13_fu_1689_p4),
    .sel(tmp_15_fu_1748_p2),
    .value(value_2_reg_3178),
    .dout(tmp_15_fu_1748_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U5(
    .din(tmp_15_reg_3316),
    .sel(tmp_17_fu_1867_p2),
    .value(value_3_reg_3189),
    .dout(tmp_17_fu_1867_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U6(
    .din(tmp_17_fu_1867_p4),
    .sel(tmp_19_fu_1878_p2),
    .value(value_4_reg_3200),
    .dout(tmp_19_fu_1878_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U7(
    .din(tmp_19_fu_1878_p4),
    .sel(tmp_21_fu_1935_p2),
    .value(value_5_reg_3211),
    .dout(tmp_21_fu_1935_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U8(
    .din(tmp_21_fu_1935_p4),
    .sel(tmp_23_fu_1992_p2),
    .value(value_6_reg_3222),
    .dout(tmp_23_fu_1992_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U9(
    .din(tmp_23_fu_1992_p4),
    .sel(tmp_25_fu_2049_p2),
    .value(value_7_reg_3233),
    .dout(tmp_25_fu_2049_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U10(
    .din(L1_bitmap_2_reg_3360),
    .sel(tmp_29_fu_2163_p2),
    .value(l2_has_data_3_reg_3251),
    .dout(tmp_29_fu_2163_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U11(
    .din(tmp_29_fu_2163_p4),
    .sel(tmp_31_fu_2219_p2),
    .value(value_9_reg_3262),
    .dout(tmp_31_fu_2219_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U12(
    .din(tmp_31_fu_2219_p4),
    .sel(tmp_33_fu_2276_p2),
    .value(value_10_reg_3273),
    .dout(tmp_33_fu_2276_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U13(
    .din(tmp_33_fu_2276_p4),
    .sel(tmp_35_fu_2333_p2),
    .value(value_11_reg_3284),
    .dout(tmp_35_fu_2333_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U14(
    .din(tmp_35_fu_2333_p4),
    .sel(tmp_37_fu_2390_p2),
    .value(value_12_reg_3331),
    .dout(tmp_37_fu_2390_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U15(
    .din(tmp_37_reg_3408),
    .sel(tmp_39_fu_2494_p2),
    .value(value_13_reg_3366),
    .dout(tmp_39_fu_2494_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U16(
    .din(tmp_39_fu_2494_p4),
    .sel(tmp_41_fu_2550_p2),
    .value(value_14_reg_3393),
    .dout(tmp_41_fu_2550_p4)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U17(
    .din(tmp_41_fu_2550_p4),
    .sel(tmp_43_fu_2607_p2),
    .value(L1_temp_q0),
    .dout(tmp_43_fu_2607_p4)
);

minkowski_net_14_layer_pipeline_bitset_8ns_8ns_32ns_1ns_8_1_1 #(
    .DATAWIDTH( 8 ),
    .ADDRWIDTH( 32 ))
bitset_8ns_8ns_32ns_1ns_8_1_1_U18(
    .din(l2_group_fu_312),
    .sel(l2_group_1_fu_2719_p2),
    .value(L2_temp_q0),
    .dout(l2_group_1_fu_2719_p4)
);

minkowski_net_14_layer_pipeline_bitselect_1ns_8ns_32ns_1_1_1 #(
    .DATAWIDTH( 8 ),
    .ADDRWIDTH( 32 ))
bitselect_1ns_8ns_32ns_1_1_1_U19(
    .din(l2_group_fu_312),
    .sel(zext_ln189_fu_2779_p1),
    .dout(value_17_fu_2789_p3)
);

minkowski_net_14_layer_pipeline_bitset_512ns_512ns_32s_1ns_512_1_1 #(
    .DATAWIDTH( 512 ),
    .ADDRWIDTH( 32 ))
bitset_512ns_512ns_32s_1ns_512_1_1_U20(
    .din(empty_52_fu_324),
    .sel(tmp_64_fu_2841_p2),
    .value(value_17_fu_2789_p3),
    .dout(tmp_64_fu_2841_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp2_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_block_pp2_stage0_subdone_grp0_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp2_stage0_subdone_grp0)) begin
            ap_block_pp2_stage0_subdone_grp0_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp2_stage0_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_block_pp2_stage0_subdone_grp1_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp2_stage0_subdone_grp1)) begin
            ap_block_pp2_stage0_subdone_grp1_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp2_stage0_subdone_grp2_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_block_pp2_stage0_subdone_grp2_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp2_stage0_subdone_grp2)) begin
            ap_block_pp2_stage0_subdone_grp2_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state6) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp3_iter0_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp3_stage15) & (1'b0 == ap_block_pp3_stage15_subdone)))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state27) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state27) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state27);
        end else if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 512'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32))) begin
            ap_return_0_preg <= tmp_60_reg_3457;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 512'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32))) begin
            ap_return_1_preg <= L1_bitmap_1_fu_292;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 512'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32))) begin
            ap_return_2_preg <= L0_bitmap_0_fu_280;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_3_preg[0] <= 1'b0;
        ap_return_3_preg[32] <= 1'b0;
        ap_return_3_preg[33] <= 1'b0;
        ap_return_3_preg[34] <= 1'b0;
        ap_return_3_preg[35] <= 1'b0;
        ap_return_3_preg[36] <= 1'b0;
        ap_return_3_preg[37] <= 1'b0;
        ap_return_3_preg[38] <= 1'b0;
        ap_return_3_preg[39] <= 1'b0;
        ap_return_3_preg[40] <= 1'b0;
        ap_return_3_preg[41] <= 1'b0;
        ap_return_3_preg[42] <= 1'b0;
        ap_return_3_preg[43] <= 1'b0;
        ap_return_3_preg[44] <= 1'b0;
        ap_return_3_preg[45] <= 1'b0;
        ap_return_3_preg[46] <= 1'b0;
        ap_return_3_preg[47] <= 1'b0;
        ap_return_3_preg[48] <= 1'b0;
        ap_return_3_preg[49] <= 1'b0;
        ap_return_3_preg[50] <= 1'b0;
        ap_return_3_preg[51] <= 1'b0;
        ap_return_3_preg[52] <= 1'b0;
        ap_return_3_preg[53] <= 1'b0;
        ap_return_3_preg[54] <= 1'b0;
        ap_return_3_preg[55] <= 1'b0;
        ap_return_3_preg[56] <= 1'b0;
        ap_return_3_preg[57] <= 1'b0;
        ap_return_3_preg[58] <= 1'b0;
        ap_return_3_preg[59] <= 1'b0;
        ap_return_3_preg[60] <= 1'b0;
        ap_return_3_preg[61] <= 1'b0;
        ap_return_3_preg[62] <= 1'b0;
        ap_return_3_preg[63] <= 1'b0;
        ap_return_3_preg[64] <= 1'b0;
        ap_return_3_preg[65] <= 1'b0;
        ap_return_3_preg[66] <= 1'b0;
        ap_return_3_preg[67] <= 1'b0;
        ap_return_3_preg[68] <= 1'b0;
        ap_return_3_preg[69] <= 1'b0;
        ap_return_3_preg[70] <= 1'b0;
        ap_return_3_preg[71] <= 1'b0;
        ap_return_3_preg[72] <= 1'b0;
        ap_return_3_preg[73] <= 1'b0;
        ap_return_3_preg[74] <= 1'b0;
        ap_return_3_preg[75] <= 1'b0;
        ap_return_3_preg[76] <= 1'b0;
        ap_return_3_preg[77] <= 1'b0;
        ap_return_3_preg[78] <= 1'b0;
        ap_return_3_preg[79] <= 1'b0;
        ap_return_3_preg[80] <= 1'b0;
        ap_return_3_preg[81] <= 1'b0;
        ap_return_3_preg[82] <= 1'b0;
        ap_return_3_preg[83] <= 1'b0;
        ap_return_3_preg[84] <= 1'b0;
        ap_return_3_preg[85] <= 1'b0;
        ap_return_3_preg[86] <= 1'b0;
        ap_return_3_preg[87] <= 1'b0;
        ap_return_3_preg[88] <= 1'b0;
        ap_return_3_preg[89] <= 1'b0;
        ap_return_3_preg[90] <= 1'b0;
        ap_return_3_preg[91] <= 1'b0;
        ap_return_3_preg[92] <= 1'b0;
        ap_return_3_preg[93] <= 1'b0;
        ap_return_3_preg[94] <= 1'b0;
        ap_return_3_preg[95] <= 1'b0;
        ap_return_3_preg[96] <= 1'b0;
        ap_return_3_preg[97] <= 1'b0;
        ap_return_3_preg[98] <= 1'b0;
        ap_return_3_preg[99] <= 1'b0;
        ap_return_3_preg[100] <= 1'b0;
        ap_return_3_preg[101] <= 1'b0;
        ap_return_3_preg[102] <= 1'b0;
        ap_return_3_preg[103] <= 1'b0;
        ap_return_3_preg[104] <= 1'b0;
        ap_return_3_preg[105] <= 1'b0;
        ap_return_3_preg[106] <= 1'b0;
        ap_return_3_preg[107] <= 1'b0;
        ap_return_3_preg[108] <= 1'b0;
        ap_return_3_preg[109] <= 1'b0;
        ap_return_3_preg[110] <= 1'b0;
        ap_return_3_preg[111] <= 1'b0;
        ap_return_3_preg[112] <= 1'b0;
        ap_return_3_preg[113] <= 1'b0;
        ap_return_3_preg[114] <= 1'b0;
        ap_return_3_preg[115] <= 1'b0;
        ap_return_3_preg[116] <= 1'b0;
        ap_return_3_preg[117] <= 1'b0;
        ap_return_3_preg[118] <= 1'b0;
        ap_return_3_preg[119] <= 1'b0;
        ap_return_3_preg[120] <= 1'b0;
        ap_return_3_preg[121] <= 1'b0;
        ap_return_3_preg[122] <= 1'b0;
        ap_return_3_preg[123] <= 1'b0;
        ap_return_3_preg[124] <= 1'b0;
        ap_return_3_preg[125] <= 1'b0;
        ap_return_3_preg[126] <= 1'b0;
        ap_return_3_preg[127] <= 1'b0;
        ap_return_3_preg[128] <= 1'b0;
        ap_return_3_preg[129] <= 1'b0;
        ap_return_3_preg[130] <= 1'b0;
        ap_return_3_preg[131] <= 1'b0;
        ap_return_3_preg[132] <= 1'b0;
        ap_return_3_preg[133] <= 1'b0;
        ap_return_3_preg[134] <= 1'b0;
        ap_return_3_preg[135] <= 1'b0;
        ap_return_3_preg[136] <= 1'b0;
        ap_return_3_preg[137] <= 1'b0;
        ap_return_3_preg[138] <= 1'b0;
        ap_return_3_preg[139] <= 1'b0;
        ap_return_3_preg[140] <= 1'b0;
        ap_return_3_preg[141] <= 1'b0;
        ap_return_3_preg[142] <= 1'b0;
        ap_return_3_preg[143] <= 1'b0;
        ap_return_3_preg[144] <= 1'b0;
        ap_return_3_preg[145] <= 1'b0;
        ap_return_3_preg[146] <= 1'b0;
        ap_return_3_preg[147] <= 1'b0;
        ap_return_3_preg[148] <= 1'b0;
        ap_return_3_preg[149] <= 1'b0;
        ap_return_3_preg[150] <= 1'b0;
        ap_return_3_preg[151] <= 1'b0;
        ap_return_3_preg[152] <= 1'b0;
        ap_return_3_preg[153] <= 1'b0;
        ap_return_3_preg[154] <= 1'b0;
        ap_return_3_preg[155] <= 1'b0;
        ap_return_3_preg[156] <= 1'b0;
        ap_return_3_preg[157] <= 1'b0;
        ap_return_3_preg[158] <= 1'b0;
        ap_return_3_preg[159] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32))) begin
                        ap_return_3_preg[0] <= or_ln199_1_fu_2895_p6[0];
            ap_return_3_preg[159 : 32] <= or_ln199_1_fu_2895_p6[159 : 32];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        L0_bitmap_0_fu_280 <= p_read2;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (current_voxel_occupancy_reg_3041 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp2_stage0_11001_grp0))) begin
        L0_bitmap_0_fu_280 <= tmp_57_fu_1105_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        L1_bitmap_1_fu_292 <= p_read1;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln132_reg_3105 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        L1_bitmap_1_fu_292 <= L1_bitmap_3_fu_2643_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        bit_idx_assign_1_fu_296 <= l1_write_pos_loc_0_reg_643;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln132_reg_3105 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        bit_idx_assign_1_fu_296 <= l1_write_pos_loc_4_fu_2636_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bit_idx_assign_fu_284 <= ap_phi_mux_l0_write_pos_loc_0_phi_fu_623_p4;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (current_voxel_occupancy_reg_3041 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp2_stage0_11001_grp0))) begin
        bit_idx_assign_fu_284 <= add_ln39_fu_1115_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (l3_has_data_reg_676 == 1'd1))) begin
        empty_52_fu_324 <= L2_bitmap_read;
    end else if (((icmp_ln189_fu_2761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        empty_52_fu_324 <= tmp_64_fu_2841_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_fu_276 <= 4'd0;
    end else if (((icmp_ln109_fu_793_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_fu_276 <= add_ln109_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_2_fu_316 <= 4'd0;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln176_fu_2687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_2_fu_316 <= add_ln176_fu_2693_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (l3_has_data_reg_676 == 1'd1))) begin
        i_3_fu_320 <= 4'd0;
    end else if (((icmp_ln189_fu_2761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        i_3_fu_320 <= i_9_fu_2767_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (initialized_load_load_fu_721_p1 == 1'd0))) begin
        i_fu_272 <= 7'd0;
    end else if (((icmp_ln105_fu_763_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_272 <= add_ln105_fu_769_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten_fu_308 <= 3'd0;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln132_fu_1253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        indvar_flatten_fu_308 <= add_ln132_1_fu_1259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (initialized_load_load_fu_721_p1 == 1'd0))) begin
        l0_write_pos <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (current_voxel_occupancy_reg_3041 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp2_stage0_11001_grp0))) begin
        l0_write_pos <= add_ln39_fu_1115_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (initialized_load_reg_2976 == 1'd0))) begin
        l0_write_pos_loc_0_reg_620 <= 32'd0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (initialized_load_load_fu_721_p1 == 1'd1))) begin
        l0_write_pos_loc_0_reg_620 <= l0_write_pos;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (initialized_load_reg_2976 == 1'd0))) begin
        l1_write_pos_flag_0_reg_630 <= 1'd1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (initialized_load_load_fu_721_p1 == 1'd1))) begin
        l1_write_pos_flag_0_reg_630 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln132_reg_3105 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        l1_write_pos_flag_2_reg_665 <= l1_write_pos_flag_4_fu_2622_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        l1_write_pos_flag_2_reg_665 <= l1_write_pos_flag_0_reg_630;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (initialized_load_reg_2976 == 1'd0))) begin
        l1_write_pos_loc_0_reg_643 <= 32'd0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (initialized_load_load_fu_721_p1 == 1'd1))) begin
        l1_write_pos_loc_0_reg_643 <= l1_write_pos;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        l1_write_pos_new_2_fu_300 <= 32'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln132_reg_3105 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        l1_write_pos_new_2_fu_300 <= l1_write_pos_new_4_fu_2628_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        l2_group_fu_312 <= 8'd0;
    end else if (((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln176_reg_3438 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        l2_group_fu_312 <= l2_group_1_fu_2719_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (l3_has_data_reg_676 == 1'd0))) begin
        l2_write_pos_flag_1_reg_688 <= l1_write_pos_flag_0_reg_630;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        l2_write_pos_flag_1_reg_688 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (initialized_load_reg_2976 == 1'd0))) begin
        l2_write_pos_loc_0_reg_654 <= 32'd0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (initialized_load_load_fu_721_p1 == 1'd1))) begin
        l2_write_pos_loc_0_reg_654 <= l2_write_pos;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (l3_has_data_reg_676 == 1'd0))) begin
        l2_write_pos_loc_1_reg_711 <= l2_write_pos_loc_0_reg_654;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        l2_write_pos_loc_1_reg_711 <= add_ln193_fu_2865_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (l3_has_data_reg_676 == 1'd0))) begin
        l2_write_pos_new_1_reg_700 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        l2_write_pos_new_1_reg_700 <= add_ln193_fu_2865_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        l2_y_fu_288 <= 2'd0;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln132_fu_1253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        l2_y_fu_288 <= select_ln134_fu_1328_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        l2_z_fu_304 <= 2'd0;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln132_fu_1253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        l2_z_fu_304 <= select_ln132_fu_1299_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        l3_has_data_reg_676 <= 1'd0;
    end else if (((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln176_reg_3438 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        l3_has_data_reg_676 <= l3_has_data_1_fu_2729_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (initialized_load_load_fu_721_p1 == 1'd0))) begin
        retained_block_count <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (current_voxel_occupancy_reg_3041 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001_grp2) & (1'b0 == ap_block_pp2_stage0_subdone_grp2_done_reg))) begin
        retained_block_count <= add_ln58_fu_1199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (initialized_load_load_fu_721_p1 == 1'd0))) begin
        voxel_count <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_1_nbreadreq_fu_352_p3 == 1'd1) & (tmp_fu_834_p3 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        voxel_count <= add_ln125_fu_872_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage13) & (1'b0 == ap_block_pp3_stage13_11001))) begin
        L1_bitmap_1_load_reg_3295 <= L1_bitmap_1_fu_292;
        bit_idx_assign_1_load_reg_3300 <= bit_idx_assign_1_fu_296;
        bit_offset_4_reg_3321 <= bit_offset_4_fu_1795_p3;
        bit_offset_5_reg_3326 <= bit_offset_5_fu_1841_p3;
        tmp_15_reg_3316 <= tmp_15_fu_1748_p4;
        trunc_ln150_reg_3309 <= trunc_ln150_fu_1594_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage14) & (1'b0 == ap_block_pp3_stage14_11001))) begin
        L1_bitmap_2_reg_3360 <= L1_bitmap_2_fu_2069_p3;
        add_ln169_reg_3342 <= add_ln169_fu_2058_p2;
        bit_idx_assign_9_reg_3347 <= bit_idx_assign_9_fu_2063_p3;
        bit_offset_9_reg_3388 <= bit_offset_9_fu_2122_p3;
        trunc_ln150_8_reg_3377 <= trunc_ln150_8_fu_2098_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        and_ln132_reg_3109 <= and_ln132_fu_1293_p2;
        empty_51_reg_3130 <= empty_51_fu_1307_p1;
        icmp_ln132_reg_3105 <= icmp_ln132_fu_1253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        current_voxel_morton_addr_reg_3045 <= {{input_voxel_stream_dout[1084:1025]}};
        current_voxel_occupancy_reg_3041 <= current_voxel_occupancy_fu_842_p1;
        input_voxel_stream_read_reg_3034 <= input_voxel_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln176_reg_3438 <= icmp_ln176_fu_2687_p2;
        trunc_ln180_reg_3447 <= trunc_ln180_fu_2704_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (initialized_load_reg_2976 == 1'd0))) begin
        initialized <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        initialized_load_reg_2976 <= initialized;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (l1_write_pos_flag_2_reg_665 == 1'd1))) begin
        l1_write_pos <= l1_write_pos_new_2_fu_300;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage8) & (1'b0 == ap_block_pp3_stage8_11001))) begin
        l2_has_data_1_reg_3238 <= l2_has_data_1_fu_1498_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage9) & (1'b0 == ap_block_pp3_stage9_11001))) begin
        l2_has_data_3_reg_3251 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        l2_has_data_reg_3156 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_l2_write_pos_flag_1_phi_fu_692_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32))) begin
        l2_write_pos <= l2_write_pos_new_1_reg_700;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage15) & (1'b0 == ap_block_pp3_stage15_11001))) begin
        or_ln156_9_reg_3403 <= or_ln156_9_fu_2154_p2;
        sub_ln150_24_reg_3413 <= sub_ln150_24_fu_2399_p2;
        tmp_37_reg_3408 <= tmp_37_fu_2390_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_60_reg_3457 <= tmp_60_fu_2740_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        tmp_reg_3027 <= voxel_count[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage11) & (1'b0 == ap_block_pp3_stage11_11001))) begin
        value_10_reg_3273 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage12) & (1'b0 == ap_block_pp3_stage12_11001))) begin
        value_11_reg_3284 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage13) & (1'b0 == ap_block_pp3_stage13_11001))) begin
        value_12_reg_3331 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage14) & (1'b0 == ap_block_pp3_stage14_11001))) begin
        value_13_reg_3366 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage15) & (1'b0 == ap_block_pp3_stage15_11001))) begin
        value_14_reg_3393 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001))) begin
        value_1_reg_3167 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_11001))) begin
        value_2_reg_3178 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage4) & (1'b0 == ap_block_pp3_stage4_11001))) begin
        value_3_reg_3189 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage5) & (1'b0 == ap_block_pp3_stage5_11001))) begin
        value_4_reg_3200 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage6) & (1'b0 == ap_block_pp3_stage6_11001))) begin
        value_5_reg_3211 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage7) & (1'b0 == ap_block_pp3_stage7_11001))) begin
        value_6_reg_3222 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage8) & (1'b0 == ap_block_pp3_stage8_11001))) begin
        value_7_reg_3233 <= L1_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage10) & (1'b0 == ap_block_pp3_stage10_11001))) begin
        value_9_reg_3262 <= L1_temp_q0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage15) & (1'b0 == ap_block_pp3_stage15))) begin
        L1_temp_address0_local = zext_ln155_15_fu_2140_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage14) & (1'b0 == ap_block_pp3_stage14))) begin
        L1_temp_address0_local = zext_ln155_14_fu_2085_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage13) & (1'b0 == ap_block_pp3_stage13))) begin
        L1_temp_address0_local = zext_ln155_13_fu_1859_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage12) & (1'b0 == ap_block_pp3_stage12))) begin
        L1_temp_address0_local = zext_ln155_12_fu_1575_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage11) & (1'b0 == ap_block_pp3_stage11))) begin
        L1_temp_address0_local = zext_ln155_11_fu_1560_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage10) & (1'b0 == ap_block_pp3_stage10))) begin
        L1_temp_address0_local = zext_ln155_10_fu_1545_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage9) & (1'b0 == ap_block_pp3_stage9))) begin
        L1_temp_address0_local = zext_ln155_9_fu_1530_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage8) & (1'b0 == ap_block_pp3_stage8))) begin
        L1_temp_address0_local = zext_ln155_8_fu_1515_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage7) & (1'b0 == ap_block_pp3_stage7))) begin
        L1_temp_address0_local = zext_ln155_7_fu_1451_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage6) & (1'b0 == ap_block_pp3_stage6))) begin
        L1_temp_address0_local = zext_ln155_6_fu_1436_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage5) & (1'b0 == ap_block_pp3_stage5))) begin
        L1_temp_address0_local = zext_ln155_5_fu_1421_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage4) & (1'b0 == ap_block_pp3_stage4))) begin
        L1_temp_address0_local = zext_ln155_4_fu_1406_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3))) begin
        L1_temp_address0_local = zext_ln155_3_fu_1391_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        L1_temp_address0_local = zext_ln155_2_fu_1376_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1))) begin
        L1_temp_address0_local = zext_ln155_1_fu_1361_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        L1_temp_address0_local = zext_ln155_fu_1323_p1;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        L1_temp_address0_local = zext_ln46_fu_1032_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        L1_temp_address0_local = zext_ln105_fu_775_p1;
    end else begin
        L1_temp_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage15) & (1'b0 == ap_block_pp3_stage15_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage14) & (1'b0 == ap_block_pp3_stage14_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage13) & (1'b0 == ap_block_pp3_stage13_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage12) & (1'b0 == ap_block_pp3_stage12_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage11) & (1'b0 == ap_block_pp3_stage11_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage10) & (1'b0 == ap_block_pp3_stage10_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage9) & (1'b0 == ap_block_pp3_stage9_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage8) & (1'b0 == 
    ap_block_pp3_stage8_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage7) & (1'b0 == ap_block_pp3_stage7_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage6) & (1'b0 == ap_block_pp3_stage6_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage5) & (1'b0 == ap_block_pp3_stage5_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage4) & (1'b0 == ap_block_pp3_stage4_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        L1_temp_ce0_local = 1'b1;
    end else begin
        L1_temp_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        L1_temp_d0_local = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        L1_temp_d0_local = 1'd0;
    end else begin
        L1_temp_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((((current_voxel_occupancy_fu_842_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_1_nbreadreq_fu_352_p3 == 1'd1) & (tmp_fu_834_p3 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((icmp_ln105_fu_763_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        L1_temp_we0_local = 1'b1;
    end else begin
        L1_temp_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        L2_bitmap_ap_vld = 1'b1;
    end else begin
        L2_bitmap_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        L2_temp_address0_local = zext_ln176_fu_2699_p1;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        L2_temp_address0_local = zext_ln162_fu_2447_p1;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage8) & (1'b0 == ap_block_pp3_stage8))) begin
        L2_temp_address0_local = p_cast166_fu_1464_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        L2_temp_address0_local = zext_ln109_fu_805_p1;
    end else begin
        L2_temp_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage8) & (1'b0 == ap_block_pp3_stage8_11001)))) begin
        L2_temp_ce0_local = 1'b1;
    end else begin
        L2_temp_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        L2_temp_d0_local = l2_has_data_2_fu_2433_p2;
    end else if (((ap_enable_reg_pp3_iter0_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage8) & (1'b0 == ap_block_pp3_stage8))) begin
        L2_temp_d0_local = l2_has_data_1_fu_1498_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        L2_temp_d0_local = 1'd0;
    end else begin
        L2_temp_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln109_fu_793_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln132_reg_3105 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter0_reg == 1'b1) & (icmp_ln132_reg_3105 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage8) & (1'b0 == ap_block_pp3_stage8_11001)))) begin
        L2_temp_we0_local = 1'b1;
    end else begin
        L2_temp_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state32)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((ap_predicate_tran6to8_state6 == 1'b1)) begin
        ap_condition_pp2_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln132_fu_1253_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln176_fu_2687_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state27 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state27 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (initialized_load_reg_2976 == 1'd0))) begin
        ap_phi_mux_l0_write_pos_loc_0_phi_fu_623_p4 = 32'd0;
    end else begin
        ap_phi_mux_l0_write_pos_loc_0_phi_fu_623_p4 = l0_write_pos_loc_0_reg_620;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32))) begin
        ap_return_0 = tmp_60_reg_3457;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32))) begin
        ap_return_1 = L1_bitmap_1_fu_292;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32))) begin
        ap_return_2 = L0_bitmap_0_fu_280;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32))) begin
        ap_return_3 = or_ln199_1_fu_2895_p6;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_2_nbwritereq_fu_374_p3 == 1'd1) & (tmp_s_nbwritereq_fu_366_p3 == 1'd1) & (current_voxel_occupancy_reg_3041 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp2_stage0_grp1))) begin
        feature_data_stream_blk_n = feature_data_stream_full_n;
    end else begin
        feature_data_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_predicate_op138_write_state7 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001_grp1) & (1'b0 == ap_block_pp2_stage0_subdone_grp1_done_reg))) begin
        feature_data_stream_write = 1'b1;
    end else begin
        feature_data_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_1_nbreadreq_fu_352_p3 == 1'd1) & (tmp_fu_834_p3 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        initial_processed_voxels_constprop_o = add_ln124_fu_860_p2;
    end else begin
        initial_processed_voxels_constprop_o = initial_processed_voxels_constprop_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_1_nbreadreq_fu_352_p3 == 1'd1) & (tmp_fu_834_p3 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        initial_processed_voxels_constprop_o_ap_vld = 1'b1;
    end else begin
        initial_processed_voxels_constprop_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_1_nbreadreq_fu_352_p3 == 1'd1) & (tmp_fu_834_p3 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        input_voxel_stream_blk_n = input_voxel_stream_empty_n;
    end else begin
        input_voxel_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_predicate_op102_read_state6 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        input_voxel_stream_read = 1'b1;
    end else begin
        input_voxel_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_2_nbwritereq_fu_374_p3 == 1'd1) & (tmp_s_nbwritereq_fu_366_p3 == 1'd1) & (current_voxel_occupancy_reg_3041 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp2_stage0_grp1))) begin
        write_addr_stream_blk_n = write_addr_stream_full_n;
    end else begin
        write_addr_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_predicate_op139_write_state7 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001_grp1) & (1'b0 == ap_block_pp2_stage0_subdone_grp1_done_reg))) begin
        write_addr_stream_write = 1'b1;
    end else begin
        write_addr_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (initialized_load_load_fu_721_p1 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (initialized_load_load_fu_721_p1 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln105_fu_763_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln109_fu_793_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_predicate_tran6to8_state6 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_predicate_tran6to8_state6 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln132_fu_1253_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone)) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln132_fu_1253_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((1'b0 == ap_block_pp3_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_pp3_stage3 : begin
            if ((1'b0 == ap_block_pp3_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end
        end
        ap_ST_fsm_pp3_stage4 : begin
            if ((1'b0 == ap_block_pp3_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage4;
            end
        end
        ap_ST_fsm_pp3_stage5 : begin
            if ((1'b0 == ap_block_pp3_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage5;
            end
        end
        ap_ST_fsm_pp3_stage6 : begin
            if ((1'b0 == ap_block_pp3_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage6;
            end
        end
        ap_ST_fsm_pp3_stage7 : begin
            if ((1'b0 == ap_block_pp3_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage7;
            end
        end
        ap_ST_fsm_pp3_stage8 : begin
            if ((1'b0 == ap_block_pp3_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage8;
            end
        end
        ap_ST_fsm_pp3_stage9 : begin
            if ((1'b0 == ap_block_pp3_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage9;
            end
        end
        ap_ST_fsm_pp3_stage10 : begin
            if ((1'b0 == ap_block_pp3_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage10;
            end
        end
        ap_ST_fsm_pp3_stage11 : begin
            if ((1'b0 == ap_block_pp3_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage11;
            end
        end
        ap_ST_fsm_pp3_stage12 : begin
            if ((1'b0 == ap_block_pp3_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage12;
            end
        end
        ap_ST_fsm_pp3_stage13 : begin
            if ((1'b0 == ap_block_pp3_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage13;
            end
        end
        ap_ST_fsm_pp3_stage14 : begin
            if ((1'b0 == ap_block_pp3_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage14;
            end
        end
        ap_ST_fsm_pp3_stage15 : begin
            if ((1'b0 == ap_block_pp3_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage15;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln176_fu_2687_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln176_fu_2687_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (l3_has_data_reg_676 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((icmp_ln189_fu_2761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == ap_block_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign L1_bitmap_2_fu_2069_p3 = ((l2_has_data_1_reg_3238[0:0] == 1'b1) ? tmp_25_fu_2049_p4 : L1_bitmap_1_load_reg_3295);

assign L1_bitmap_3_fu_2643_p3 = ((l2_has_data_2_fu_2433_p2[0:0] == 1'b1) ? tmp_43_fu_2607_p4 : L1_bitmap_2_reg_3360);

assign L2_bitmap = empty_52_fu_324;

assign add_ln105_fu_769_p2 = (i_fu_272 + 7'd1);

assign add_ln109_fu_799_p2 = (i_1_fu_276 + 4'd1);

assign add_ln124_fu_860_p2 = (initial_processed_voxels_constprop_i + 32'd1);

assign add_ln125_fu_872_p2 = (voxel_count + 10'd1);

assign add_ln132_1_fu_1259_p2 = (indvar_flatten_fu_308 + 3'd1);

assign add_ln132_fu_1275_p2 = (l2_z_fu_304 + 2'd1);

assign add_ln167_10_fu_2342_p2 = (bit_idx_assign_9_reg_3347 + 32'd4);

assign add_ln167_11_fu_2452_p2 = (bit_idx_assign_9_reg_3347 + 32'd5);

assign add_ln167_12_fu_2502_p2 = (bit_idx_assign_9_reg_3347 + 32'd6);

assign add_ln167_13_fu_2559_p2 = (bit_idx_assign_9_reg_3347 + 32'd7);

assign add_ln167_1_fu_1698_p2 = (bit_idx_assign_1_fu_296 + 32'd2);

assign add_ln167_2_fu_1757_p2 = (bit_idx_assign_1_fu_296 + 32'd3);

assign add_ln167_3_fu_1803_p2 = (bit_idx_assign_1_fu_296 + 32'd4);

assign add_ln167_4_fu_1887_p2 = (bit_idx_assign_1_load_reg_3300 + 32'd5);

assign add_ln167_5_fu_1944_p2 = (bit_idx_assign_1_load_reg_3300 + 32'd6);

assign add_ln167_6_fu_2001_p2 = (bit_idx_assign_1_load_reg_3300 + 32'd7);

assign add_ln167_7_fu_2171_p2 = (bit_idx_assign_9_reg_3347 + 32'd1);

assign add_ln167_8_fu_2228_p2 = (bit_idx_assign_9_reg_3347 + 32'd2);

assign add_ln167_9_fu_2285_p2 = (bit_idx_assign_9_reg_3347 + 32'd3);

assign add_ln167_fu_1639_p2 = (bit_idx_assign_1_fu_296 + 32'd1);

assign add_ln169_1_fu_2617_p2 = (bit_idx_assign_9_reg_3347 + 32'd8);

assign add_ln169_fu_2058_p2 = (bit_idx_assign_1_load_reg_3300 + 32'd8);

assign add_ln176_fu_2693_p2 = (i_2_fu_316 + 4'd1);

assign add_ln191_fu_2783_p2 = (zext_ln189_fu_2779_p1 + l2_write_pos_loc_0_reg_654);

assign add_ln193_fu_2865_p2 = (l2_write_pos_loc_0_reg_654 + 32'd8);

assign add_ln199_1_fu_2883_p2 = (bit_idx_assign_fu_284 + 32'd1);

assign add_ln199_2_fu_2889_p2 = (add_ln199_1_fu_2883_p2 + add_ln199_fu_2877_p2);

assign add_ln199_fu_2877_p2 = (l2_write_pos_loc_1_reg_711 + bit_idx_assign_1_fu_296);

assign add_ln39_fu_1115_p2 = (bit_idx_assign_fu_284 + 32'd1);

assign add_ln45_fu_1020_p2 = (trunc_ln_fu_980_p7 + shl_ln45_1_fu_1006_p6);

assign add_ln58_fu_1199_p2 = (retained_block_count + 32'd1);

assign and_ln132_fu_1293_p2 = (xor_ln132_fu_1287_p2 & trunc_ln132_fu_1271_p1);

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp3_stage10 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp3_stage11 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp3_stage12 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp3_stage13 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp3_stage14 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp3_stage15 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp3_stage2 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp3_stage3 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp3_stage4 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp3_stage5 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp3_stage6 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp3_stage7 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp3_stage8 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp3_stage9 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001_grp1 = ((1'b1 == ap_block_state7_pp2_stage0_iter1_grp1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone_grp1_done_reg));
end

always @ (*) begin
    ap_block_pp2_stage0_01001_grp2 = ((1'b1 == ap_block_state7_pp2_stage0_iter1_grp2) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone_grp2_done_reg));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((1'b1 == ap_block_state6_pp2_stage0_iter0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (((1'b1 == ap_block_state7_pp2_stage0_iter1_grp2) & (1'b0 == ap_block_pp2_stage0_subdone_grp2_done_reg)) | ((1'b1 == ap_block_state7_pp2_stage0_iter1_grp1) & (1'b0 == ap_block_pp2_stage0_subdone_grp1_done_reg)))));
end

assign ap_block_pp2_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001_grp1 = ((1'b1 == ap_block_state7_pp2_stage0_iter1_grp1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone_grp1_done_reg));
end

always @ (*) begin
    ap_block_pp2_stage0_11001_grp2 = ((1'b1 == ap_block_state7_pp2_stage0_iter1_grp2) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone_grp2_done_reg));
end

assign ap_block_pp2_stage0_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((1'b1 == ap_block_state6_pp2_stage0_iter0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (((1'b1 == ap_block_state7_pp2_stage0_iter1_grp2) & (1'b0 == ap_block_pp2_stage0_subdone_grp2_done_reg)) | ((1'b1 == ap_block_state7_pp2_stage0_iter1_grp1) & (1'b0 == ap_block_pp2_stage0_subdone_grp1_done_reg)))));
end

assign ap_block_pp2_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_subdone_grp1 = ((1'b1 == ap_block_state7_pp2_stage0_iter1_grp1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone_grp1_done_reg));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone_grp2 = ((1'b1 == ap_block_state7_pp2_stage0_iter1_grp2) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone_grp2_done_reg));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32 = (((ap_predicate_op568_write_state32 == 1'b1) & (early_trigger_stream_full_n == 1'b0)) | ((ap_predicate_op564_write_state32 == 1'b1) & (retained_blocks_stream_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state6_pp2_stage0_iter0 = ((input_voxel_stream_empty_n == 1'b0) & (ap_predicate_op102_read_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp2_stage0_iter1_grp1 = (((write_addr_stream_full_n == 1'b0) & (ap_predicate_op139_write_state7 == 1'b1)) | ((feature_data_stream_full_n == 1'b0) & (ap_predicate_op138_write_state7 == 1'b1)));
end

always @ (*) begin
    ap_block_state7_pp2_stage0_iter1_grp2 = ((ap_predicate_op167_write_state7 == 1'b1) & (retained_blocks_stream_full_n == 1'b0));
end

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_phi_mux_l2_write_pos_flag_1_phi_fu_692_p4 = l2_write_pos_flag_1_reg_688;

always @ (*) begin
    ap_predicate_op102_read_state6 = ((tmp_1_nbreadreq_fu_352_p3 == 1'd1) & (tmp_fu_834_p3 == 1'd0));
end

always @ (*) begin
    ap_predicate_op138_write_state7 = ((tmp_2_nbwritereq_fu_374_p3 == 1'd1) & (tmp_s_nbwritereq_fu_366_p3 == 1'd1) & (current_voxel_occupancy_reg_3041 == 1'd1));
end

always @ (*) begin
    ap_predicate_op139_write_state7 = ((tmp_2_nbwritereq_fu_374_p3 == 1'd1) & (tmp_s_nbwritereq_fu_366_p3 == 1'd1) & (current_voxel_occupancy_reg_3041 == 1'd1));
end

always @ (*) begin
    ap_predicate_op167_write_state7 = ((grp_nbwritereq_fu_396_p3 == 1'd1) & (current_voxel_occupancy_reg_3041 == 1'd1));
end

always @ (*) begin
    ap_predicate_op564_write_state32 = ((grp_nbwritereq_fu_396_p3 == 1'd1) & (tmp_reg_3027 == 1'd1));
end

always @ (*) begin
    ap_predicate_op568_write_state32 = ((tmp_27_nbwritereq_fu_417_p3 == 1'd1) & (tmp_reg_3027 == 1'd1));
end

always @ (*) begin
    ap_predicate_tran6to8_state6 = ((tmp_1_nbreadreq_fu_352_p3 == 1'd0) | (tmp_fu_834_p3 == 1'd1));
end

assign bit_idx_assign_9_fu_2063_p3 = ((l2_has_data_1_reg_3238[0:0] == 1'b1) ? add_ln169_fu_2058_p2 : bit_idx_assign_1_load_reg_3300);

assign bit_offset_10_fu_2207_p3 = ((tmp_30_fu_2176_p3[0:0] == 1'b1) ? sub_ln150_17_fu_2201_p2 : zext_ln150_18_fu_2188_p1);

assign bit_offset_11_fu_2264_p3 = ((tmp_32_fu_2233_p3[0:0] == 1'b1) ? sub_ln150_19_fu_2258_p2 : zext_ln150_20_fu_2245_p1);

assign bit_offset_12_fu_2321_p3 = ((tmp_34_fu_2290_p3[0:0] == 1'b1) ? sub_ln150_21_fu_2315_p2 : zext_ln150_22_fu_2302_p1);

assign bit_offset_13_fu_2378_p3 = ((tmp_36_fu_2347_p3[0:0] == 1'b1) ? sub_ln150_23_fu_2372_p2 : zext_ln150_24_fu_2359_p1);

assign bit_offset_14_fu_2482_p3 = ((tmp_38_fu_2457_p3[0:0] == 1'b1) ? sub_ln150_25_fu_2476_p2 : zext_ln150_26_fu_2469_p1);

assign bit_offset_15_fu_2538_p3 = ((tmp_40_fu_2507_p3[0:0] == 1'b1) ? sub_ln150_27_fu_2532_p2 : zext_ln150_28_fu_2519_p1);

assign bit_offset_16_fu_2595_p3 = ((tmp_42_fu_2564_p3[0:0] == 1'b1) ? sub_ln150_29_fu_2589_p2 : zext_ln150_30_fu_2576_p1);

assign bit_offset_17_fu_2829_p3 = ((tmp_63_fu_2797_p3[0:0] == 1'b1) ? sub_ln150_33_fu_2823_p2 : zext_ln150_34_fu_2809_p1);

assign bit_offset_1_fu_1618_p3 = ((tmp_10_fu_1586_p3[0:0] == 1'b1) ? sub_ln150_1_fu_1612_p2 : zext_ln150_fu_1598_p1);

assign bit_offset_2_fu_1677_p3 = ((tmp_12_fu_1645_p3[0:0] == 1'b1) ? sub_ln150_2_fu_1671_p2 : zext_ln150_2_fu_1657_p1);

assign bit_offset_3_fu_1736_p3 = ((tmp_14_fu_1704_p3[0:0] == 1'b1) ? sub_ln150_4_fu_1730_p2 : zext_ln150_4_fu_1716_p1);

assign bit_offset_4_fu_1795_p3 = ((tmp_16_fu_1763_p3[0:0] == 1'b1) ? sub_ln150_6_fu_1789_p2 : zext_ln150_6_fu_1775_p1);

assign bit_offset_5_fu_1841_p3 = ((tmp_18_fu_1809_p3[0:0] == 1'b1) ? sub_ln150_8_fu_1835_p2 : zext_ln150_8_fu_1821_p1);

assign bit_offset_6_fu_1923_p3 = ((tmp_20_fu_1892_p3[0:0] == 1'b1) ? sub_ln150_10_fu_1917_p2 : zext_ln150_10_fu_1904_p1);

assign bit_offset_7_fu_1980_p3 = ((tmp_22_fu_1949_p3[0:0] == 1'b1) ? sub_ln150_12_fu_1974_p2 : zext_ln150_12_fu_1961_p1);

assign bit_offset_8_fu_2037_p3 = ((tmp_24_fu_2006_p3[0:0] == 1'b1) ? sub_ln150_14_fu_2031_p2 : zext_ln150_14_fu_2018_p1);

assign bit_offset_9_fu_2122_p3 = ((tmp_28_fu_2090_p3[0:0] == 1'b1) ? sub_ln150_16_fu_2116_p2 : zext_ln150_16_fu_2102_p1);

assign bit_offset_fu_1093_p3 = ((tmp_56_fu_1061_p3[0:0] == 1'b1) ? sub_ln150_31_fu_1087_p2 : zext_ln150_32_fu_1073_p1);

assign current_voxel_occupancy_fu_842_p1 = input_voxel_stream_dout[0:0];

assign early_trigger_stream_full_n = 1'b1;

assign empty_51_fu_1307_p1 = select_ln132_fu_1299_p3[0:0];

assign feature_data_stream_din = {{tmp_44_fu_1037_p4}, {1'd1}};

assign grp_nbwritereq_fu_396_p3 = 1'b1;

assign i_9_fu_2767_p2 = (i_3_fu_320 + 4'd1);

assign icmp_ln105_fu_763_p2 = ((i_fu_272 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_793_p2 = ((i_1_fu_276 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_1253_p2 = ((indvar_flatten_fu_308 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln134_fu_1281_p2 = ((l2_y_fu_288 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln176_fu_2687_p2 = ((i_2_fu_316 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln189_fu_2761_p2 = ((i_3_fu_320 == 4'd8) ? 1'b1 : 1'b0);

assign initialized_load_load_fu_721_p1 = initialized;

assign l1_idx_fu_1026_p2 = (add_ln45_fu_1020_p2 + shl_ln_fu_996_p4);

assign l1_write_pos_flag_3_fu_2407_p2 = (l2_has_data_1_reg_3238 | l1_write_pos_flag_2_reg_665);

assign l1_write_pos_flag_4_fu_2622_p2 = (l2_has_data_2_fu_2433_p2 | l1_write_pos_flag_3_fu_2407_p2);

assign l1_write_pos_loc_4_fu_2636_p3 = ((l2_has_data_2_fu_2433_p2[0:0] == 1'b1) ? add_ln169_1_fu_2617_p2 : bit_idx_assign_9_reg_3347);

assign l1_write_pos_new_3_fu_2412_p3 = ((l2_has_data_1_reg_3238[0:0] == 1'b1) ? add_ln169_reg_3342 : l1_write_pos_new_2_fu_300);

assign l1_write_pos_new_4_fu_2628_p3 = ((l2_has_data_2_fu_2433_p2[0:0] == 1'b1) ? add_ln169_1_fu_2617_p2 : l1_write_pos_new_3_fu_2412_p3);

assign l2_group_1_fu_2719_p2 = trunc_ln180_reg_3447;

assign l2_has_data_1_fu_1498_p2 = (or_ln156_5_fu_1492_p2 | or_ln156_2_fu_1477_p2);

assign l2_has_data_2_fu_2433_p2 = (or_ln156_9_reg_3403 | or_ln156_12_fu_2427_p2);

assign l3_has_data_1_fu_2729_p2 = (l3_has_data_reg_676 | L2_temp_q0);

assign or_ln153_10_fu_2130_p5 = {{{{empty_51_reg_3130}, {1'd1}}, {and_ln132_reg_3109}}, {3'd7}};

assign or_ln153_1_fu_1381_p5 = {{{{empty_51_reg_3130}, {1'd0}}, {and_ln132_reg_3109}}, {3'd5}};

assign or_ln153_2_fu_1411_p5 = {{{{empty_51_reg_3130}, {1'd1}}, {and_ln132_reg_3109}}, {3'd1}};

assign or_ln153_3_fu_1441_p5 = {{{{empty_51_reg_3130}, {1'd1}}, {and_ln132_reg_3109}}, {3'd5}};

assign or_ln153_4_fu_1505_p5 = {{{{empty_51_reg_3130}, {1'd0}}, {and_ln132_reg_3109}}, {3'd2}};

assign or_ln153_5_fu_1520_p5 = {{{{empty_51_reg_3130}, {1'd0}}, {and_ln132_reg_3109}}, {3'd3}};

assign or_ln153_6_fu_1535_p5 = {{{{empty_51_reg_3130}, {1'd0}}, {and_ln132_reg_3109}}, {3'd6}};

assign or_ln153_7_fu_1550_p5 = {{{{empty_51_reg_3130}, {1'd0}}, {and_ln132_reg_3109}}, {3'd7}};

assign or_ln153_8_fu_1565_p5 = {{{{empty_51_reg_3130}, {1'd1}}, {and_ln132_reg_3109}}, {3'd2}};

assign or_ln153_9_fu_1849_p5 = {{{{empty_51_reg_3130}, {1'd1}}, {and_ln132_reg_3109}}, {3'd3}};

assign or_ln153_s_fu_2075_p5 = {{{{empty_51_reg_3130}, {1'd1}}, {and_ln132_reg_3109}}, {3'd6}};

assign or_ln156_10_fu_2418_p2 = (value_9_reg_3262 | value_10_reg_3273);

assign or_ln156_11_fu_2422_p2 = (l2_has_data_3_reg_3251 | L1_temp_q0);

assign or_ln156_12_fu_2427_p2 = (or_ln156_11_fu_2422_p2 | or_ln156_10_fu_2418_p2);

assign or_ln156_1_fu_1473_p2 = (value_4_reg_3200 | value_3_reg_3189);

assign or_ln156_2_fu_1477_p2 = (or_ln156_fu_1469_p2 | or_ln156_1_fu_1473_p2);

assign or_ln156_3_fu_1483_p2 = (value_2_reg_3178 | value_1_reg_3167);

assign or_ln156_4_fu_1487_p2 = (l2_has_data_reg_3156 | L1_temp_q0);

assign or_ln156_5_fu_1492_p2 = (or_ln156_4_fu_1487_p2 | or_ln156_3_fu_1483_p2);

assign or_ln156_7_fu_2145_p2 = (value_13_reg_3366 | L1_temp_q0);

assign or_ln156_8_fu_2150_p2 = (value_12_reg_3331 | value_11_reg_3284);

assign or_ln156_9_fu_2154_p2 = (or_ln156_8_fu_2150_p2 | or_ln156_7_fu_2145_p2);

assign or_ln156_fu_1469_p2 = (value_6_reg_3222 | value_5_reg_3211);

assign or_ln199_1_fu_2895_p6 = {{{{{add_ln199_2_fu_2889_p2}, {bit_idx_assign_fu_284}}, {bit_idx_assign_1_fu_296}}, {l2_write_pos_loc_1_reg_711}}, {32'd1}};

assign or_ln1_fu_2439_p4 = {{{empty_51_reg_3130}, {and_ln132_reg_3109}}, {1'd1}};

assign or_ln_fu_1351_p5 = {{{{empty_51_reg_3130}, {1'd0}}, {and_ln132_reg_3109}}, {3'd1}};

assign p_cast166_fu_1464_p1 = tmp_3_fu_1456_p4;

assign retained_blocks_stream_full_n = 1'b1;

assign select_ln132_fu_1299_p3 = ((icmp_ln134_fu_1281_p2[0:0] == 1'b1) ? add_ln132_fu_1275_p2 : l2_z_fu_304);

assign select_ln134_fu_1328_p3 = ((and_ln132_fu_1293_p2[0:0] == 1'b1) ? 2'd2 : 2'd1);

assign shl_ln45_1_fu_1006_p6 = {{{{{tmp_53_fu_948_p3}, {tmp_52_fu_940_p3}}, {tmp_51_fu_932_p3}}, {tmp_50_fu_924_p3}}, {2'd0}};

assign shl_ln_fu_996_p4 = {{{tmp_55_fu_964_p3}, {tmp_54_fu_956_p3}}, {4'd0}};

assign sub_ln150_10_fu_1917_p2 = (10'd0 - zext_ln150_11_fu_1913_p1);

assign sub_ln150_11_fu_1965_p2 = ($signed(9'd506) - $signed(trunc_ln150_reg_3309));

assign sub_ln150_12_fu_1974_p2 = (10'd0 - zext_ln150_13_fu_1970_p1);

assign sub_ln150_13_fu_2022_p2 = ($signed(9'd505) - $signed(trunc_ln150_reg_3309));

assign sub_ln150_14_fu_2031_p2 = (10'd0 - zext_ln150_15_fu_2027_p1);

assign sub_ln150_15_fu_2106_p2 = (9'd0 - trunc_ln150_8_fu_2098_p1);

assign sub_ln150_16_fu_2116_p2 = (10'd0 - zext_ln150_17_fu_2112_p1);

assign sub_ln150_17_fu_2201_p2 = (10'd0 - zext_ln150_19_fu_2197_p1);

assign sub_ln150_18_fu_2249_p2 = ($signed(9'd510) - $signed(trunc_ln150_8_reg_3377));

assign sub_ln150_19_fu_2258_p2 = (10'd0 - zext_ln150_21_fu_2254_p1);

assign sub_ln150_1_fu_1612_p2 = (10'd0 - zext_ln150_1_fu_1608_p1);

assign sub_ln150_20_fu_2306_p2 = ($signed(9'd509) - $signed(trunc_ln150_8_reg_3377));

assign sub_ln150_21_fu_2315_p2 = (10'd0 - zext_ln150_23_fu_2311_p1);

assign sub_ln150_22_fu_2363_p2 = ($signed(9'd508) - $signed(trunc_ln150_8_reg_3377));

assign sub_ln150_23_fu_2372_p2 = (10'd0 - zext_ln150_25_fu_2368_p1);

assign sub_ln150_24_fu_2399_p2 = ($signed(9'd507) - $signed(trunc_ln150_8_reg_3377));

assign sub_ln150_25_fu_2476_p2 = (10'd0 - zext_ln150_27_fu_2473_p1);

assign sub_ln150_26_fu_2523_p2 = ($signed(9'd506) - $signed(trunc_ln150_8_reg_3377));

assign sub_ln150_27_fu_2532_p2 = (10'd0 - zext_ln150_29_fu_2528_p1);

assign sub_ln150_28_fu_2580_p2 = ($signed(9'd505) - $signed(trunc_ln150_8_reg_3377));

assign sub_ln150_29_fu_2589_p2 = (10'd0 - zext_ln150_31_fu_2585_p1);

assign sub_ln150_2_fu_1671_p2 = (10'd0 - zext_ln150_3_fu_1667_p1);

assign sub_ln150_30_fu_1077_p2 = (9'd0 - trunc_ln150_16_fu_1069_p1);

assign sub_ln150_31_fu_1087_p2 = (10'd0 - zext_ln150_33_fu_1083_p1);

assign sub_ln150_32_fu_2813_p2 = (9'd0 - trunc_ln150_17_fu_2805_p1);

assign sub_ln150_33_fu_2823_p2 = (10'd0 - zext_ln150_35_fu_2819_p1);

assign sub_ln150_3_fu_1720_p2 = ($signed(9'd510) - $signed(trunc_ln150_fu_1594_p1));

assign sub_ln150_4_fu_1730_p2 = (10'd0 - zext_ln150_5_fu_1726_p1);

assign sub_ln150_5_fu_1779_p2 = ($signed(9'd509) - $signed(trunc_ln150_fu_1594_p1));

assign sub_ln150_6_fu_1789_p2 = (10'd0 - zext_ln150_7_fu_1785_p1);

assign sub_ln150_7_fu_1825_p2 = ($signed(9'd508) - $signed(trunc_ln150_fu_1594_p1));

assign sub_ln150_8_fu_1835_p2 = (10'd0 - zext_ln150_9_fu_1831_p1);

assign sub_ln150_9_fu_1908_p2 = ($signed(9'd507) - $signed(trunc_ln150_reg_3309));

assign sub_ln150_fu_1602_p2 = (9'd0 - trunc_ln150_fu_1594_p1);

assign tmp_10_fu_1586_p3 = bit_idx_assign_1_fu_296[32'd31];

assign tmp_11_fu_1630_p2 = $signed(bit_offset_1_fu_1618_p3);

assign tmp_12_fu_1645_p3 = add_ln167_fu_1639_p2[32'd31];

assign tmp_13_fu_1689_p2 = $signed(bit_offset_2_fu_1677_p3);

assign tmp_14_fu_1704_p3 = add_ln167_1_fu_1698_p2[32'd31];

assign tmp_15_fu_1748_p2 = $signed(bit_offset_3_fu_1736_p3);

assign tmp_16_fu_1763_p3 = add_ln167_2_fu_1757_p2[32'd31];

assign tmp_17_fu_1867_p2 = $signed(bit_offset_4_reg_3321);

assign tmp_18_fu_1809_p3 = add_ln167_3_fu_1803_p2[32'd31];

assign tmp_19_fu_1878_p2 = $signed(bit_offset_5_reg_3326);

assign tmp_1_nbreadreq_fu_352_p3 = input_voxel_stream_empty_n;

assign tmp_20_fu_1892_p3 = add_ln167_4_fu_1887_p2[32'd31];

assign tmp_21_fu_1935_p2 = $signed(bit_offset_6_fu_1923_p3);

assign tmp_22_fu_1949_p3 = add_ln167_5_fu_1944_p2[32'd31];

assign tmp_23_fu_1992_p2 = $signed(bit_offset_7_fu_1980_p3);

assign tmp_24_fu_2006_p3 = add_ln167_6_fu_2001_p2[32'd31];

assign tmp_25_fu_2049_p2 = $signed(bit_offset_8_fu_2037_p3);

assign tmp_27_nbwritereq_fu_417_p3 = 1'b1;

assign tmp_28_fu_2090_p3 = bit_idx_assign_9_fu_2063_p3[32'd31];

assign tmp_29_fu_2163_p2 = $signed(bit_offset_9_reg_3388);

assign tmp_2_nbwritereq_fu_374_p3 = write_addr_stream_full_n;

assign tmp_30_fu_2176_p3 = add_ln167_7_fu_2171_p2[32'd31];

assign tmp_31_fu_2219_p2 = $signed(bit_offset_10_fu_2207_p3);

assign tmp_32_fu_2233_p3 = add_ln167_8_fu_2228_p2[32'd31];

assign tmp_33_fu_2276_p2 = $signed(bit_offset_11_fu_2264_p3);

assign tmp_34_fu_2290_p3 = add_ln167_9_fu_2285_p2[32'd31];

assign tmp_35_fu_2333_p2 = $signed(bit_offset_12_fu_2321_p3);

assign tmp_36_fu_2347_p3 = add_ln167_10_fu_2342_p2[32'd31];

assign tmp_37_fu_2390_p2 = $signed(bit_offset_13_fu_2378_p3);

assign tmp_38_fu_2457_p3 = add_ln167_11_fu_2452_p2[32'd31];

assign tmp_39_fu_2494_p2 = $signed(bit_offset_14_fu_2482_p3);

assign tmp_3_fu_1456_p4 = {{{empty_51_reg_3130}, {and_ln132_reg_3109}}, {1'd0}};

assign tmp_40_fu_2507_p3 = add_ln167_12_fu_2502_p2[32'd31];

assign tmp_41_fu_2550_p2 = $signed(bit_offset_15_fu_2538_p3);

assign tmp_42_fu_2564_p3 = add_ln167_13_fu_2559_p2[32'd31];

assign tmp_43_fu_2607_p2 = $signed(bit_offset_16_fu_2595_p3);

assign tmp_44_fu_1037_p4 = {{input_voxel_stream_read_reg_3034[1084:1]}};

assign tmp_45_fu_884_p3 = input_voxel_stream_dout[32'd1031];

assign tmp_46_fu_892_p3 = input_voxel_stream_dout[32'd1034];

assign tmp_47_fu_900_p3 = input_voxel_stream_dout[32'd1037];

assign tmp_48_fu_908_p3 = input_voxel_stream_dout[32'd1040];

assign tmp_49_fu_916_p3 = input_voxel_stream_dout[32'd1043];

assign tmp_50_fu_924_p3 = input_voxel_stream_dout[32'd1029];

assign tmp_51_fu_932_p3 = input_voxel_stream_dout[32'd1032];

assign tmp_52_fu_940_p3 = input_voxel_stream_dout[32'd1035];

assign tmp_53_fu_948_p3 = input_voxel_stream_dout[32'd1038];

assign tmp_54_fu_956_p3 = input_voxel_stream_dout[32'd1030];

assign tmp_55_fu_964_p3 = input_voxel_stream_dout[32'd1033];

assign tmp_56_fu_1061_p3 = bit_idx_assign_fu_284[32'd31];

assign tmp_57_fu_1105_p2 = $signed(bit_offset_fu_1093_p3);

assign tmp_58_fu_972_p3 = input_voxel_stream_dout[32'd1028];

assign tmp_60_fu_2740_p4 = {p_read[512-1:1], |(l3_has_data_reg_676)};

assign tmp_63_fu_2797_p3 = add_ln191_fu_2783_p2[32'd31];

assign tmp_64_fu_2841_p2 = $signed(bit_offset_17_fu_2829_p3);

assign tmp_6_fu_1311_p5 = {{{{empty_51_fu_1307_p1}, {1'd0}}, {and_ln132_fu_1293_p2}}, {3'd0}};

assign tmp_7_fu_1366_p5 = {{{{empty_51_reg_3130}, {1'd0}}, {and_ln132_reg_3109}}, {3'd4}};

assign tmp_8_fu_1396_p5 = {{{{empty_51_reg_3130}, {1'd1}}, {and_ln132_reg_3109}}, {3'd0}};

assign tmp_9_fu_1426_p5 = {{{{empty_51_reg_3130}, {1'd1}}, {and_ln132_reg_3109}}, {3'd4}};

assign tmp_fu_834_p3 = voxel_count[32'd9];

assign tmp_s_nbwritereq_fu_366_p3 = feature_data_stream_full_n;

assign trunc_ln132_fu_1271_p1 = l2_y_fu_288[0:0];

assign trunc_ln150_10_fu_2241_p1 = add_ln167_8_fu_2228_p2[8:0];

assign trunc_ln150_11_fu_2298_p1 = add_ln167_9_fu_2285_p2[8:0];

assign trunc_ln150_12_fu_2355_p1 = add_ln167_10_fu_2342_p2[8:0];

assign trunc_ln150_13_fu_2465_p1 = add_ln167_11_fu_2452_p2[8:0];

assign trunc_ln150_14_fu_2515_p1 = add_ln167_12_fu_2502_p2[8:0];

assign trunc_ln150_15_fu_2572_p1 = add_ln167_13_fu_2559_p2[8:0];

assign trunc_ln150_16_fu_1069_p1 = bit_idx_assign_fu_284[8:0];

assign trunc_ln150_17_fu_2805_p1 = add_ln191_fu_2783_p2[8:0];

assign trunc_ln150_1_fu_1653_p1 = add_ln167_fu_1639_p2[8:0];

assign trunc_ln150_2_fu_1712_p1 = add_ln167_1_fu_1698_p2[8:0];

assign trunc_ln150_3_fu_1771_p1 = add_ln167_2_fu_1757_p2[8:0];

assign trunc_ln150_4_fu_1817_p1 = add_ln167_3_fu_1803_p2[8:0];

assign trunc_ln150_5_fu_1900_p1 = add_ln167_4_fu_1887_p2[8:0];

assign trunc_ln150_6_fu_1957_p1 = add_ln167_5_fu_1944_p2[8:0];

assign trunc_ln150_7_fu_2014_p1 = add_ln167_6_fu_2001_p2[8:0];

assign trunc_ln150_8_fu_2098_p1 = bit_idx_assign_9_fu_2063_p3[8:0];

assign trunc_ln150_9_fu_2184_p1 = add_ln167_7_fu_2171_p2[8:0];

assign trunc_ln150_fu_1594_p1 = bit_idx_assign_1_fu_296[8:0];

assign trunc_ln180_fu_2704_p1 = i_2_fu_316[2:0];

assign trunc_ln_fu_980_p7 = {{{{{{tmp_49_fu_916_p3}, {tmp_48_fu_908_p3}}, {tmp_47_fu_900_p3}}, {tmp_46_fu_892_p3}}, {tmp_45_fu_884_p3}}, {tmp_58_fu_972_p3}};

assign write_addr_stream_din = current_voxel_morton_addr_reg_3045;

assign xor_ln132_fu_1287_p2 = (icmp_ln134_fu_1281_p2 ^ 1'd1);

assign xor_ln150_1_fu_2192_p2 = (trunc_ln150_8_reg_3377 ^ 9'd511);

assign xor_ln150_fu_1661_p2 = (trunc_ln150_fu_1594_p1 ^ 9'd511);

assign zext_ln105_fu_775_p1 = i_fu_272;

assign zext_ln109_fu_805_p1 = i_1_fu_276;

assign zext_ln150_10_fu_1904_p1 = trunc_ln150_5_fu_1900_p1;

assign zext_ln150_11_fu_1913_p1 = sub_ln150_9_fu_1908_p2;

assign zext_ln150_12_fu_1961_p1 = trunc_ln150_6_fu_1957_p1;

assign zext_ln150_13_fu_1970_p1 = sub_ln150_11_fu_1965_p2;

assign zext_ln150_14_fu_2018_p1 = trunc_ln150_7_fu_2014_p1;

assign zext_ln150_15_fu_2027_p1 = sub_ln150_13_fu_2022_p2;

assign zext_ln150_16_fu_2102_p1 = trunc_ln150_8_fu_2098_p1;

assign zext_ln150_17_fu_2112_p1 = sub_ln150_15_fu_2106_p2;

assign zext_ln150_18_fu_2188_p1 = trunc_ln150_9_fu_2184_p1;

assign zext_ln150_19_fu_2197_p1 = xor_ln150_1_fu_2192_p2;

assign zext_ln150_1_fu_1608_p1 = sub_ln150_fu_1602_p2;

assign zext_ln150_20_fu_2245_p1 = trunc_ln150_10_fu_2241_p1;

assign zext_ln150_21_fu_2254_p1 = sub_ln150_18_fu_2249_p2;

assign zext_ln150_22_fu_2302_p1 = trunc_ln150_11_fu_2298_p1;

assign zext_ln150_23_fu_2311_p1 = sub_ln150_20_fu_2306_p2;

assign zext_ln150_24_fu_2359_p1 = trunc_ln150_12_fu_2355_p1;

assign zext_ln150_25_fu_2368_p1 = sub_ln150_22_fu_2363_p2;

assign zext_ln150_26_fu_2469_p1 = trunc_ln150_13_fu_2465_p1;

assign zext_ln150_27_fu_2473_p1 = sub_ln150_24_reg_3413;

assign zext_ln150_28_fu_2519_p1 = trunc_ln150_14_fu_2515_p1;

assign zext_ln150_29_fu_2528_p1 = sub_ln150_26_fu_2523_p2;

assign zext_ln150_2_fu_1657_p1 = trunc_ln150_1_fu_1653_p1;

assign zext_ln150_30_fu_2576_p1 = trunc_ln150_15_fu_2572_p1;

assign zext_ln150_31_fu_2585_p1 = sub_ln150_28_fu_2580_p2;

assign zext_ln150_32_fu_1073_p1 = trunc_ln150_16_fu_1069_p1;

assign zext_ln150_33_fu_1083_p1 = sub_ln150_30_fu_1077_p2;

assign zext_ln150_34_fu_2809_p1 = trunc_ln150_17_fu_2805_p1;

assign zext_ln150_35_fu_2819_p1 = sub_ln150_32_fu_2813_p2;

assign zext_ln150_3_fu_1667_p1 = xor_ln150_fu_1661_p2;

assign zext_ln150_4_fu_1716_p1 = trunc_ln150_2_fu_1712_p1;

assign zext_ln150_5_fu_1726_p1 = sub_ln150_3_fu_1720_p2;

assign zext_ln150_6_fu_1775_p1 = trunc_ln150_3_fu_1771_p1;

assign zext_ln150_7_fu_1785_p1 = sub_ln150_5_fu_1779_p2;

assign zext_ln150_8_fu_1821_p1 = trunc_ln150_4_fu_1817_p1;

assign zext_ln150_9_fu_1831_p1 = sub_ln150_7_fu_1825_p2;

assign zext_ln150_fu_1598_p1 = trunc_ln150_fu_1594_p1;

assign zext_ln155_10_fu_1545_p1 = or_ln153_6_fu_1535_p5;

assign zext_ln155_11_fu_1560_p1 = or_ln153_7_fu_1550_p5;

assign zext_ln155_12_fu_1575_p1 = or_ln153_8_fu_1565_p5;

assign zext_ln155_13_fu_1859_p1 = or_ln153_9_fu_1849_p5;

assign zext_ln155_14_fu_2085_p1 = or_ln153_s_fu_2075_p5;

assign zext_ln155_15_fu_2140_p1 = or_ln153_10_fu_2130_p5;

assign zext_ln155_1_fu_1361_p1 = or_ln_fu_1351_p5;

assign zext_ln155_2_fu_1376_p1 = tmp_7_fu_1366_p5;

assign zext_ln155_3_fu_1391_p1 = or_ln153_1_fu_1381_p5;

assign zext_ln155_4_fu_1406_p1 = tmp_8_fu_1396_p5;

assign zext_ln155_5_fu_1421_p1 = or_ln153_2_fu_1411_p5;

assign zext_ln155_6_fu_1436_p1 = tmp_9_fu_1426_p5;

assign zext_ln155_7_fu_1451_p1 = or_ln153_3_fu_1441_p5;

assign zext_ln155_8_fu_1515_p1 = or_ln153_4_fu_1505_p5;

assign zext_ln155_9_fu_1530_p1 = or_ln153_5_fu_1520_p5;

assign zext_ln155_fu_1323_p1 = tmp_6_fu_1311_p5;

assign zext_ln162_fu_2447_p1 = or_ln1_fu_2439_p4;

assign zext_ln176_fu_2699_p1 = i_2_fu_316;

assign zext_ln189_fu_2779_p1 = i_3_fu_320;

assign zext_ln46_fu_1032_p1 = l1_idx_fu_1026_p2;

always @ (posedge ap_clk) begin
    ap_return_3_preg[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //minkowski_net_14_layer_pipeline_streaming_bitmap_constructor

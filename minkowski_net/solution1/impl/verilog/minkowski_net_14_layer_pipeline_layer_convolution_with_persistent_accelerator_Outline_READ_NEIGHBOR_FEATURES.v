// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module minkowski_net_14_layer_pipeline_layer_convolution_with_persistent_accelerator_Outline_READ_NEIGHBOR_FEATURES (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        config_input_channels_val,
        m_axi_gmem_write_0_AWVALID,
        m_axi_gmem_write_0_AWREADY,
        m_axi_gmem_write_0_AWADDR,
        m_axi_gmem_write_0_AWID,
        m_axi_gmem_write_0_AWLEN,
        m_axi_gmem_write_0_AWSIZE,
        m_axi_gmem_write_0_AWBURST,
        m_axi_gmem_write_0_AWLOCK,
        m_axi_gmem_write_0_AWCACHE,
        m_axi_gmem_write_0_AWPROT,
        m_axi_gmem_write_0_AWQOS,
        m_axi_gmem_write_0_AWREGION,
        m_axi_gmem_write_0_AWUSER,
        m_axi_gmem_write_0_WVALID,
        m_axi_gmem_write_0_WREADY,
        m_axi_gmem_write_0_WDATA,
        m_axi_gmem_write_0_WSTRB,
        m_axi_gmem_write_0_WLAST,
        m_axi_gmem_write_0_WID,
        m_axi_gmem_write_0_WUSER,
        m_axi_gmem_write_0_ARVALID,
        m_axi_gmem_write_0_ARREADY,
        m_axi_gmem_write_0_ARADDR,
        m_axi_gmem_write_0_ARID,
        m_axi_gmem_write_0_ARLEN,
        m_axi_gmem_write_0_ARSIZE,
        m_axi_gmem_write_0_ARBURST,
        m_axi_gmem_write_0_ARLOCK,
        m_axi_gmem_write_0_ARCACHE,
        m_axi_gmem_write_0_ARPROT,
        m_axi_gmem_write_0_ARQOS,
        m_axi_gmem_write_0_ARREGION,
        m_axi_gmem_write_0_ARUSER,
        m_axi_gmem_write_0_RVALID,
        m_axi_gmem_write_0_RREADY,
        m_axi_gmem_write_0_RDATA,
        m_axi_gmem_write_0_RLAST,
        m_axi_gmem_write_0_RID,
        m_axi_gmem_write_0_RFIFONUM,
        m_axi_gmem_write_0_RUSER,
        m_axi_gmem_write_0_RRESP,
        m_axi_gmem_write_0_BVALID,
        m_axi_gmem_write_0_BREADY,
        m_axi_gmem_write_0_BRESP,
        m_axi_gmem_write_0_BID,
        m_axi_gmem_write_0_BUSER,
        p_cast_cast,
        neighbor_features_address0,
        neighbor_features_ce0,
        neighbor_features_we0,
        neighbor_features_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [10:0] config_input_channels_val;
output   m_axi_gmem_write_0_AWVALID;
input   m_axi_gmem_write_0_AWREADY;
output  [63:0] m_axi_gmem_write_0_AWADDR;
output  [0:0] m_axi_gmem_write_0_AWID;
output  [31:0] m_axi_gmem_write_0_AWLEN;
output  [2:0] m_axi_gmem_write_0_AWSIZE;
output  [1:0] m_axi_gmem_write_0_AWBURST;
output  [1:0] m_axi_gmem_write_0_AWLOCK;
output  [3:0] m_axi_gmem_write_0_AWCACHE;
output  [2:0] m_axi_gmem_write_0_AWPROT;
output  [3:0] m_axi_gmem_write_0_AWQOS;
output  [3:0] m_axi_gmem_write_0_AWREGION;
output  [0:0] m_axi_gmem_write_0_AWUSER;
output   m_axi_gmem_write_0_WVALID;
input   m_axi_gmem_write_0_WREADY;
output  [31:0] m_axi_gmem_write_0_WDATA;
output  [3:0] m_axi_gmem_write_0_WSTRB;
output   m_axi_gmem_write_0_WLAST;
output  [0:0] m_axi_gmem_write_0_WID;
output  [0:0] m_axi_gmem_write_0_WUSER;
output   m_axi_gmem_write_0_ARVALID;
input   m_axi_gmem_write_0_ARREADY;
output  [63:0] m_axi_gmem_write_0_ARADDR;
output  [0:0] m_axi_gmem_write_0_ARID;
output  [31:0] m_axi_gmem_write_0_ARLEN;
output  [2:0] m_axi_gmem_write_0_ARSIZE;
output  [1:0] m_axi_gmem_write_0_ARBURST;
output  [1:0] m_axi_gmem_write_0_ARLOCK;
output  [3:0] m_axi_gmem_write_0_ARCACHE;
output  [2:0] m_axi_gmem_write_0_ARPROT;
output  [3:0] m_axi_gmem_write_0_ARQOS;
output  [3:0] m_axi_gmem_write_0_ARREGION;
output  [0:0] m_axi_gmem_write_0_ARUSER;
input   m_axi_gmem_write_0_RVALID;
output   m_axi_gmem_write_0_RREADY;
input  [31:0] m_axi_gmem_write_0_RDATA;
input   m_axi_gmem_write_0_RLAST;
input  [0:0] m_axi_gmem_write_0_RID;
input  [12:0] m_axi_gmem_write_0_RFIFONUM;
input  [0:0] m_axi_gmem_write_0_RUSER;
input  [1:0] m_axi_gmem_write_0_RRESP;
input   m_axi_gmem_write_0_BVALID;
output   m_axi_gmem_write_0_BREADY;
input  [1:0] m_axi_gmem_write_0_BRESP;
input  [0:0] m_axi_gmem_write_0_BID;
input  [0:0] m_axi_gmem_write_0_BUSER;
input  [61:0] p_cast_cast;
output  [9:0] neighbor_features_address0;
output   neighbor_features_ce0;
output   neighbor_features_we0;
output  [31:0] neighbor_features_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_write_0_RREADY;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_write_blk_n_R;
wire    ap_CS_fsm_state3;
reg   [10:0] ic_1_reg_144;
wire    ap_CS_fsm_state2;
reg   [31:0] gmem_write_addr_read_reg_157;
wire   [63:0] zext_ln273_fu_119_p1;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln273_fu_98_p2;
reg   [10:0] ic_fu_52;
wire   [10:0] add_ln273_fu_103_p2;
reg    neighbor_features_we0_local;
wire   [31:0] bitcast_ln276_fu_123_p1;
reg    neighbor_features_ce0_local;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ic_fu_52 = 11'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ic_fu_52 <= 11'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln273_fu_98_p2 == 1'd0))) begin
        ic_fu_52 <= add_ln273_fu_103_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_write_addr_read_reg_157 <= m_axi_gmem_write_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ic_1_reg_144 <= ic_fu_52;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_write_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln273_fu_98_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln273_fu_98_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_write_blk_n_R = m_axi_gmem_write_0_RVALID;
    end else begin
        gmem_write_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_gmem_write_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem_write_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_write_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        neighbor_features_ce0_local = 1'b1;
    end else begin
        neighbor_features_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        neighbor_features_we0_local = 1'b1;
    end else begin
        neighbor_features_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln273_fu_98_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem_write_0_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln273_fu_103_p2 = (ic_fu_52 + 11'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign bitcast_ln276_fu_123_p1 = gmem_write_addr_read_reg_157;

assign icmp_ln273_fu_98_p2 = ((ic_fu_52 == config_input_channels_val) ? 1'b1 : 1'b0);

assign m_axi_gmem_write_0_ARADDR = 64'd0;

assign m_axi_gmem_write_0_ARBURST = 2'd0;

assign m_axi_gmem_write_0_ARCACHE = 4'd0;

assign m_axi_gmem_write_0_ARID = 1'd0;

assign m_axi_gmem_write_0_ARLEN = 32'd0;

assign m_axi_gmem_write_0_ARLOCK = 2'd0;

assign m_axi_gmem_write_0_ARPROT = 3'd0;

assign m_axi_gmem_write_0_ARQOS = 4'd0;

assign m_axi_gmem_write_0_ARREGION = 4'd0;

assign m_axi_gmem_write_0_ARSIZE = 3'd0;

assign m_axi_gmem_write_0_ARUSER = 1'd0;

assign m_axi_gmem_write_0_ARVALID = 1'b0;

assign m_axi_gmem_write_0_AWADDR = 64'd0;

assign m_axi_gmem_write_0_AWBURST = 2'd0;

assign m_axi_gmem_write_0_AWCACHE = 4'd0;

assign m_axi_gmem_write_0_AWID = 1'd0;

assign m_axi_gmem_write_0_AWLEN = 32'd0;

assign m_axi_gmem_write_0_AWLOCK = 2'd0;

assign m_axi_gmem_write_0_AWPROT = 3'd0;

assign m_axi_gmem_write_0_AWQOS = 4'd0;

assign m_axi_gmem_write_0_AWREGION = 4'd0;

assign m_axi_gmem_write_0_AWSIZE = 3'd0;

assign m_axi_gmem_write_0_AWUSER = 1'd0;

assign m_axi_gmem_write_0_AWVALID = 1'b0;

assign m_axi_gmem_write_0_BREADY = 1'b0;

assign m_axi_gmem_write_0_WDATA = 32'd0;

assign m_axi_gmem_write_0_WID = 1'd0;

assign m_axi_gmem_write_0_WLAST = 1'b0;

assign m_axi_gmem_write_0_WSTRB = 4'd0;

assign m_axi_gmem_write_0_WUSER = 1'd0;

assign m_axi_gmem_write_0_WVALID = 1'b0;

assign neighbor_features_address0 = zext_ln273_fu_119_p1;

assign neighbor_features_ce0 = neighbor_features_ce0_local;

assign neighbor_features_d0 = bitcast_ln276_fu_123_p1;

assign neighbor_features_we0 = neighbor_features_we0_local;

assign zext_ln273_fu_119_p1 = ic_1_reg_144;

endmodule //minkowski_net_14_layer_pipeline_layer_convolution_with_persistent_accelerator_Outline_READ_NEIGHBOR_FEATURES

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module minkowski_net_14_layer_pipeline_layer_convolution_with_persistent_accelerator_Outline_INIT_OUTPUT_BIAS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        config_output_channels_val,
        layer_biases_12_Addr_A,
        layer_biases_12_EN_A,
        layer_biases_12_WEN_A,
        layer_biases_12_Din_A,
        layer_biases_12_Dout_A,
        output_features_address0,
        output_features_ce0,
        output_features_we0,
        output_features_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [10:0] config_output_channels_val;
output  [31:0] layer_biases_12_Addr_A;
output   layer_biases_12_EN_A;
output  [3:0] layer_biases_12_WEN_A;
output  [31:0] layer_biases_12_Din_A;
input  [31:0] layer_biases_12_Dout_A;
output  [9:0] output_features_address0;
output   output_features_ce0;
output   output_features_we0;
output  [31:0] output_features_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln245_fu_92_p1;
reg   [63:0] zext_ln245_reg_117;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln245_fu_81_p2;
wire    ap_CS_fsm_state3;
reg   [10:0] oc_fu_36;
wire   [10:0] add_ln245_fu_86_p2;
reg    layer_biases_12_EN_A_local;
wire   [31:0] layer_biases_12_Addr_A_local;
wire   [31:0] layer_biases_12_Addr_A_orig;
reg    output_features_we0_local;
reg    output_features_ce0_local;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 oc_fu_36 = 11'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        oc_fu_36 <= 11'd0;
    end else if (((icmp_ln245_fu_81_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        oc_fu_36 <= add_ln245_fu_86_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln245_reg_117[10 : 0] <= zext_ln245_fu_92_p1[10 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln245_fu_81_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln245_fu_81_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        layer_biases_12_EN_A_local = 1'b1;
    end else begin
        layer_biases_12_EN_A_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_features_ce0_local = 1'b1;
    end else begin
        output_features_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_features_we0_local = 1'b1;
    end else begin
        output_features_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln245_fu_81_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln245_fu_86_p2 = (oc_fu_36 + 11'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign icmp_ln245_fu_81_p2 = ((oc_fu_36 == config_output_channels_val) ? 1'b1 : 1'b0);

assign layer_biases_12_Addr_A = layer_biases_12_Addr_A_local;

assign layer_biases_12_Addr_A_local = layer_biases_12_Addr_A_orig << 32'd2;

assign layer_biases_12_Addr_A_orig = zext_ln245_fu_92_p1;

assign layer_biases_12_Din_A = 32'd0;

assign layer_biases_12_EN_A = layer_biases_12_EN_A_local;

assign layer_biases_12_WEN_A = 4'd0;

assign output_features_address0 = zext_ln245_reg_117;

assign output_features_ce0 = output_features_ce0_local;

assign output_features_d0 = layer_biases_12_Dout_A;

assign output_features_we0 = output_features_we0_local;

assign zext_ln245_fu_92_p1 = oc_fu_36;

always @ (posedge ap_clk) begin
    zext_ln245_reg_117[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //minkowski_net_14_layer_pipeline_layer_convolution_with_persistent_accelerator_Outline_INIT_OUTPUT_BIAS

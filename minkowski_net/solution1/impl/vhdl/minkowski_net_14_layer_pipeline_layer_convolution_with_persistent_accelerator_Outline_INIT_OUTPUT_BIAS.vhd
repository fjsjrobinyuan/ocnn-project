-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity minkowski_net_14_layer_pipeline_layer_convolution_with_persistent_accelerator_Outline_INIT_OUTPUT_BIAS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    config_output_channels_val : IN STD_LOGIC_VECTOR (10 downto 0);
    layer_biases_12_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer_biases_12_EN_A : OUT STD_LOGIC;
    layer_biases_12_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    layer_biases_12_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer_biases_12_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    output_features_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_features_ce0 : OUT STD_LOGIC;
    output_features_we0 : OUT STD_LOGIC;
    output_features_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of minkowski_net_14_layer_pipeline_layer_convolution_with_persistent_accelerator_Outline_INIT_OUTPUT_BIAS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln245_fu_92_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln245_reg_117 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln245_fu_81_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal oc_fu_36 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln245_fu_86_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer_biases_12_EN_A_local : STD_LOGIC;
    signal layer_biases_12_Addr_A_local : STD_LOGIC_VECTOR (31 downto 0);
    signal layer_biases_12_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal output_features_we0_local : STD_LOGIC;
    signal output_features_ce0_local : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    oc_fu_36_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                oc_fu_36 <= ap_const_lv11_0;
            elsif (((icmp_ln245_fu_81_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                oc_fu_36 <= add_ln245_fu_86_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    zext_ln245_reg_117(10 downto 0) <= zext_ln245_fu_92_p1(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln245_reg_117(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln245_fu_81_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln245_fu_81_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln245_fu_86_p2 <= std_logic_vector(unsigned(oc_fu_36) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln245_fu_81_p2)
    begin
        if ((((icmp_ln245_fu_81_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln245_fu_81_p2)
    begin
        if (((icmp_ln245_fu_81_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln245_fu_81_p2 <= "1" when (oc_fu_36 = config_output_channels_val) else "0";
    layer_biases_12_Addr_A <= layer_biases_12_Addr_A_local;
    layer_biases_12_Addr_A_local <= std_logic_vector(shift_left(unsigned(layer_biases_12_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    layer_biases_12_Addr_A_orig <= zext_ln245_fu_92_p1(32 - 1 downto 0);
    layer_biases_12_Din_A <= ap_const_lv32_0;
    layer_biases_12_EN_A <= layer_biases_12_EN_A_local;

    layer_biases_12_EN_A_local_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer_biases_12_EN_A_local <= ap_const_logic_1;
        else 
            layer_biases_12_EN_A_local <= ap_const_logic_0;
        end if; 
    end process;

    layer_biases_12_WEN_A <= ap_const_lv4_0;
    output_features_address0 <= zext_ln245_reg_117(10 - 1 downto 0);
    output_features_ce0 <= output_features_ce0_local;

    output_features_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_features_ce0_local <= ap_const_logic_1;
        else 
            output_features_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    output_features_d0 <= layer_biases_12_Dout_A;
    output_features_we0 <= output_features_we0_local;

    output_features_we0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_features_we0_local <= ap_const_logic_1;
        else 
            output_features_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln245_fu_92_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(oc_fu_36),64));
end behav;

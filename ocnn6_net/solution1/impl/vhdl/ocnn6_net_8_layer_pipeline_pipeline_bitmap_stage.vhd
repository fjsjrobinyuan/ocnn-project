-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ocnn6_net_8_layer_pipeline_pipeline_bitmap_stage is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_voxel_stream_dout : IN STD_LOGIC_VECTOR (1084 downto 0);
    input_voxel_stream_empty_n : IN STD_LOGIC;
    input_voxel_stream_read : OUT STD_LOGIC;
    feature_data_stream_din : OUT STD_LOGIC_VECTOR (1084 downto 0);
    feature_data_stream_full_n : IN STD_LOGIC;
    feature_data_stream_write : OUT STD_LOGIC;
    feature_data_stream_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    feature_data_stream_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    write_addr_stream_din : OUT STD_LOGIC_VECTOR (59 downto 0);
    write_addr_stream_full_n : IN STD_LOGIC;
    write_addr_stream_write : OUT STD_LOGIC;
    write_addr_stream_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    write_addr_stream_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    L3_bitmap_i : IN STD_LOGIC_VECTOR (511 downto 0);
    L3_bitmap_o : OUT STD_LOGIC_VECTOR (511 downto 0);
    L3_bitmap_o_ap_vld : OUT STD_LOGIC;
    L2_bitmap_i : IN STD_LOGIC_VECTOR (511 downto 0);
    L2_bitmap_o : OUT STD_LOGIC_VECTOR (511 downto 0);
    L2_bitmap_o_ap_vld : OUT STD_LOGIC;
    L1_bitmap_i : IN STD_LOGIC_VECTOR (511 downto 0);
    L1_bitmap_o : OUT STD_LOGIC_VECTOR (511 downto 0);
    L1_bitmap_o_ap_vld : OUT STD_LOGIC;
    L0_bitmap_i : IN STD_LOGIC_VECTOR (511 downto 0);
    L0_bitmap_o : OUT STD_LOGIC_VECTOR (511 downto 0);
    L0_bitmap_o_ap_vld : OUT STD_LOGIC;
    bitmap_info : OUT STD_LOGIC_VECTOR (159 downto 0);
    bitmap_info_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ocnn6_net_8_layer_pipeline_pipeline_bitmap_stage is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv160_lc_1 : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal L2_bitmap_read_reg_165 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal L3_bitmap_read_reg_170 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal L1_bitmap_read_reg_175 : STD_LOGIC_VECTOR (511 downto 0);
    signal L0_bitmap_read_reg_180 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_streaming_bitmap_constructor_fu_106_ap_start : STD_LOGIC;
    signal grp_streaming_bitmap_constructor_fu_106_ap_done : STD_LOGIC;
    signal grp_streaming_bitmap_constructor_fu_106_ap_idle : STD_LOGIC;
    signal grp_streaming_bitmap_constructor_fu_106_ap_ready : STD_LOGIC;
    signal grp_streaming_bitmap_constructor_fu_106_input_voxel_stream_read : STD_LOGIC;
    signal grp_streaming_bitmap_constructor_fu_106_feature_data_stream_din : STD_LOGIC_VECTOR (1084 downto 0);
    signal grp_streaming_bitmap_constructor_fu_106_feature_data_stream_write : STD_LOGIC;
    signal grp_streaming_bitmap_constructor_fu_106_write_addr_stream_din : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_streaming_bitmap_constructor_fu_106_write_addr_stream_write : STD_LOGIC;
    signal grp_streaming_bitmap_constructor_fu_106_L2_bitmap : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_streaming_bitmap_constructor_fu_106_L2_bitmap_ap_vld : STD_LOGIC;
    signal grp_streaming_bitmap_constructor_fu_106_ap_return_0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_streaming_bitmap_constructor_fu_106_ap_return_1 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_streaming_bitmap_constructor_fu_106_ap_return_2 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_streaming_bitmap_constructor_fu_106_ap_return_3 : STD_LOGIC_VECTOR (159 downto 0);
    signal grp_streaming_bitmap_constructor_fu_106_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal L2_bitmap_o_reg : STD_LOGIC_VECTOR (511 downto 0);
    signal L3_bitmap_o_preg : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal L1_bitmap_o_preg : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal L0_bitmap_o_preg : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal bitmap_info_preg : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ocnn6_net_8_layer_pipeline_streaming_bitmap_constructor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_voxel_stream_dout : IN STD_LOGIC_VECTOR (1084 downto 0);
        input_voxel_stream_empty_n : IN STD_LOGIC;
        input_voxel_stream_read : OUT STD_LOGIC;
        feature_data_stream_din : OUT STD_LOGIC_VECTOR (1084 downto 0);
        feature_data_stream_full_n : IN STD_LOGIC;
        feature_data_stream_write : OUT STD_LOGIC;
        feature_data_stream_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        feature_data_stream_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        write_addr_stream_din : OUT STD_LOGIC_VECTOR (59 downto 0);
        write_addr_stream_full_n : IN STD_LOGIC;
        write_addr_stream_write : OUT STD_LOGIC;
        write_addr_stream_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        write_addr_stream_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read : IN STD_LOGIC_VECTOR (511 downto 0);
        L2_bitmap : OUT STD_LOGIC_VECTOR (511 downto 0);
        L2_bitmap_ap_vld : OUT STD_LOGIC;
        L2_bitmap_read : IN STD_LOGIC_VECTOR (511 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (511 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (511 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (511 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (511 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (159 downto 0) );
    end component;



begin
    grp_streaming_bitmap_constructor_fu_106 : component ocnn6_net_8_layer_pipeline_streaming_bitmap_constructor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_streaming_bitmap_constructor_fu_106_ap_start,
        ap_done => grp_streaming_bitmap_constructor_fu_106_ap_done,
        ap_idle => grp_streaming_bitmap_constructor_fu_106_ap_idle,
        ap_ready => grp_streaming_bitmap_constructor_fu_106_ap_ready,
        input_voxel_stream_dout => input_voxel_stream_dout,
        input_voxel_stream_empty_n => input_voxel_stream_empty_n,
        input_voxel_stream_read => grp_streaming_bitmap_constructor_fu_106_input_voxel_stream_read,
        feature_data_stream_din => grp_streaming_bitmap_constructor_fu_106_feature_data_stream_din,
        feature_data_stream_full_n => feature_data_stream_full_n,
        feature_data_stream_write => grp_streaming_bitmap_constructor_fu_106_feature_data_stream_write,
        feature_data_stream_num_data_valid => ap_const_lv11_0,
        feature_data_stream_fifo_cap => ap_const_lv11_0,
        write_addr_stream_din => grp_streaming_bitmap_constructor_fu_106_write_addr_stream_din,
        write_addr_stream_full_n => write_addr_stream_full_n,
        write_addr_stream_write => grp_streaming_bitmap_constructor_fu_106_write_addr_stream_write,
        write_addr_stream_num_data_valid => ap_const_lv11_0,
        write_addr_stream_fifo_cap => ap_const_lv11_0,
        p_read => L3_bitmap_read_reg_170,
        L2_bitmap => grp_streaming_bitmap_constructor_fu_106_L2_bitmap,
        L2_bitmap_ap_vld => grp_streaming_bitmap_constructor_fu_106_L2_bitmap_ap_vld,
        L2_bitmap_read => L2_bitmap_read_reg_165,
        p_read1 => L1_bitmap_read_reg_175,
        p_read2 => L0_bitmap_read_reg_180,
        ap_return_0 => grp_streaming_bitmap_constructor_fu_106_ap_return_0,
        ap_return_1 => grp_streaming_bitmap_constructor_fu_106_ap_return_1,
        ap_return_2 => grp_streaming_bitmap_constructor_fu_106_ap_return_2,
        ap_return_3 => grp_streaming_bitmap_constructor_fu_106_ap_return_3);





    L0_bitmap_o_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                L0_bitmap_o_preg <= ap_const_lv512_lc_1;
            else
                if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    L0_bitmap_o_preg <= grp_streaming_bitmap_constructor_fu_106_ap_return_2;
                end if; 
            end if;
        end if;
    end process;


    L1_bitmap_o_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                L1_bitmap_o_preg <= ap_const_lv512_lc_1;
            else
                if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    L1_bitmap_o_preg <= grp_streaming_bitmap_constructor_fu_106_ap_return_1;
                end if; 
            end if;
        end if;
    end process;


    L3_bitmap_o_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                L3_bitmap_o_preg <= ap_const_lv512_lc_1;
            else
                if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    L3_bitmap_o_preg <= grp_streaming_bitmap_constructor_fu_106_ap_return_0;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    bitmap_info_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                bitmap_info_preg <= ap_const_lv160_lc_1;
            else
                if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    bitmap_info_preg <= grp_streaming_bitmap_constructor_fu_106_ap_return_3;
                end if; 
            end if;
        end if;
    end process;


    grp_streaming_bitmap_constructor_fu_106_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_streaming_bitmap_constructor_fu_106_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_streaming_bitmap_constructor_fu_106_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_streaming_bitmap_constructor_fu_106_ap_ready = ap_const_logic_1)) then 
                    grp_streaming_bitmap_constructor_fu_106_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                L0_bitmap_read_reg_180 <= L0_bitmap_i;
                L1_bitmap_read_reg_175 <= L1_bitmap_i;
                L3_bitmap_read_reg_170 <= L3_bitmap_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_streaming_bitmap_constructor_fu_106_L2_bitmap_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                L2_bitmap_o_reg <= grp_streaming_bitmap_constructor_fu_106_L2_bitmap;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                L2_bitmap_read_reg_165 <= L2_bitmap_i;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_streaming_bitmap_constructor_fu_106_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    L0_bitmap_o_assign_proc : process(grp_streaming_bitmap_constructor_fu_106_ap_done, grp_streaming_bitmap_constructor_fu_106_ap_return_2, ap_CS_fsm_state3, L0_bitmap_o_preg)
    begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            L0_bitmap_o <= grp_streaming_bitmap_constructor_fu_106_ap_return_2;
        else 
            L0_bitmap_o <= L0_bitmap_o_preg;
        end if; 
    end process;


    L0_bitmap_o_ap_vld_assign_proc : process(grp_streaming_bitmap_constructor_fu_106_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            L0_bitmap_o_ap_vld <= ap_const_logic_1;
        else 
            L0_bitmap_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    L1_bitmap_o_assign_proc : process(grp_streaming_bitmap_constructor_fu_106_ap_done, grp_streaming_bitmap_constructor_fu_106_ap_return_1, ap_CS_fsm_state3, L1_bitmap_o_preg)
    begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            L1_bitmap_o <= grp_streaming_bitmap_constructor_fu_106_ap_return_1;
        else 
            L1_bitmap_o <= L1_bitmap_o_preg;
        end if; 
    end process;


    L1_bitmap_o_ap_vld_assign_proc : process(grp_streaming_bitmap_constructor_fu_106_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            L1_bitmap_o_ap_vld <= ap_const_logic_1;
        else 
            L1_bitmap_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    L2_bitmap_o_assign_proc : process(grp_streaming_bitmap_constructor_fu_106_L2_bitmap, grp_streaming_bitmap_constructor_fu_106_L2_bitmap_ap_vld, ap_CS_fsm_state3, L2_bitmap_o_reg)
    begin
        if (((grp_streaming_bitmap_constructor_fu_106_L2_bitmap_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            L2_bitmap_o <= grp_streaming_bitmap_constructor_fu_106_L2_bitmap;
        else 
            L2_bitmap_o <= L2_bitmap_o_reg;
        end if; 
    end process;


    L2_bitmap_o_ap_vld_assign_proc : process(grp_streaming_bitmap_constructor_fu_106_L2_bitmap_ap_vld, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            L2_bitmap_o_ap_vld <= grp_streaming_bitmap_constructor_fu_106_L2_bitmap_ap_vld;
        else 
            L2_bitmap_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    L3_bitmap_o_assign_proc : process(grp_streaming_bitmap_constructor_fu_106_ap_done, grp_streaming_bitmap_constructor_fu_106_ap_return_0, ap_CS_fsm_state3, L3_bitmap_o_preg)
    begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            L3_bitmap_o <= grp_streaming_bitmap_constructor_fu_106_ap_return_0;
        else 
            L3_bitmap_o <= L3_bitmap_o_preg;
        end if; 
    end process;


    L3_bitmap_o_ap_vld_assign_proc : process(grp_streaming_bitmap_constructor_fu_106_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            L3_bitmap_o_ap_vld <= ap_const_logic_1;
        else 
            L3_bitmap_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_streaming_bitmap_constructor_fu_106_ap_done)
    begin
        if ((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_streaming_bitmap_constructor_fu_106_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_streaming_bitmap_constructor_fu_106_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bitmap_info_assign_proc : process(grp_streaming_bitmap_constructor_fu_106_ap_done, grp_streaming_bitmap_constructor_fu_106_ap_return_3, ap_CS_fsm_state3, bitmap_info_preg)
    begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bitmap_info <= grp_streaming_bitmap_constructor_fu_106_ap_return_3;
        else 
            bitmap_info <= bitmap_info_preg;
        end if; 
    end process;


    bitmap_info_ap_vld_assign_proc : process(grp_streaming_bitmap_constructor_fu_106_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bitmap_info_ap_vld <= ap_const_logic_1;
        else 
            bitmap_info_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    feature_data_stream_din <= grp_streaming_bitmap_constructor_fu_106_feature_data_stream_din;
    feature_data_stream_write <= grp_streaming_bitmap_constructor_fu_106_feature_data_stream_write;
    grp_streaming_bitmap_constructor_fu_106_ap_start <= grp_streaming_bitmap_constructor_fu_106_ap_start_reg;
    input_voxel_stream_read <= grp_streaming_bitmap_constructor_fu_106_input_voxel_stream_read;
    write_addr_stream_din <= grp_streaming_bitmap_constructor_fu_106_write_addr_stream_din;
    write_addr_stream_write <= grp_streaming_bitmap_constructor_fu_106_write_addr_stream_write;
end behav;

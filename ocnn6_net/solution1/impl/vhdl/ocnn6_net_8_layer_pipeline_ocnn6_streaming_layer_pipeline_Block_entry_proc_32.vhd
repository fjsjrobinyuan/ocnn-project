-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ocnn6_net_8_layer_pipeline_ocnn6_streaming_layer_pipeline_Block_entry_proc_32 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    p_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out_full_n : IN STD_LOGIC;
    p_out_write : OUT STD_LOGIC;
    p_out_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out1_full_n : IN STD_LOGIC;
    p_out1_write : OUT STD_LOGIC;
    p_out1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out2_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out2_full_n : IN STD_LOGIC;
    p_out2_write : OUT STD_LOGIC;
    p_out2_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out2_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out3_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out3_full_n : IN STD_LOGIC;
    p_out3_write : OUT STD_LOGIC;
    p_out3_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out3_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out4_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out4_full_n : IN STD_LOGIC;
    p_out4_write : OUT STD_LOGIC;
    p_out4_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out4_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out5_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out5_full_n : IN STD_LOGIC;
    p_out5_write : OUT STD_LOGIC;
    p_out5_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out5_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out6_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out6_full_n : IN STD_LOGIC;
    p_out6_write : OUT STD_LOGIC;
    p_out6_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out6_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out7_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out7_full_n : IN STD_LOGIC;
    p_out7_write : OUT STD_LOGIC;
    p_out7_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out7_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out8_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out8_full_n : IN STD_LOGIC;
    p_out8_write : OUT STD_LOGIC;
    p_out8_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out8_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out9_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out9_full_n : IN STD_LOGIC;
    p_out9_write : OUT STD_LOGIC;
    p_out9_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out9_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out10_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out10_full_n : IN STD_LOGIC;
    p_out10_write : OUT STD_LOGIC;
    p_out10_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out10_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out11_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out11_full_n : IN STD_LOGIC;
    p_out11_write : OUT STD_LOGIC;
    p_out11_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out11_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out12_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out12_full_n : IN STD_LOGIC;
    p_out12_write : OUT STD_LOGIC;
    p_out12_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out12_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out13_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out13_full_n : IN STD_LOGIC;
    p_out13_write : OUT STD_LOGIC;
    p_out13_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out13_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out14_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out14_full_n : IN STD_LOGIC;
    p_out14_write : OUT STD_LOGIC;
    p_out14_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out14_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out15_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out15_full_n : IN STD_LOGIC;
    p_out15_write : OUT STD_LOGIC;
    p_out15_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out15_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out16_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out16_full_n : IN STD_LOGIC;
    p_out16_write : OUT STD_LOGIC;
    p_out16_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out16_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out17_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out17_full_n : IN STD_LOGIC;
    p_out17_write : OUT STD_LOGIC;
    p_out17_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out17_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out18_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out18_full_n : IN STD_LOGIC;
    p_out18_write : OUT STD_LOGIC;
    p_out18_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out18_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out19_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out19_full_n : IN STD_LOGIC;
    p_out19_write : OUT STD_LOGIC;
    p_out19_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out19_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out20_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out20_full_n : IN STD_LOGIC;
    p_out20_write : OUT STD_LOGIC;
    p_out20_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out20_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out21_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out21_full_n : IN STD_LOGIC;
    p_out21_write : OUT STD_LOGIC;
    p_out21_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out21_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out22_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out22_full_n : IN STD_LOGIC;
    p_out22_write : OUT STD_LOGIC;
    p_out22_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out22_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out23_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out23_full_n : IN STD_LOGIC;
    p_out23_write : OUT STD_LOGIC;
    p_out23_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out23_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out24_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out24_full_n : IN STD_LOGIC;
    p_out24_write : OUT STD_LOGIC;
    p_out24_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out24_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out25_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out25_full_n : IN STD_LOGIC;
    p_out25_write : OUT STD_LOGIC;
    p_out25_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out25_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of ocnn6_net_8_layer_pipeline_ocnn6_streaming_layer_pipeline_Block_entry_proc_32 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_1000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000";
    constant ap_const_lv64_2000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000";
    constant ap_const_lv64_3000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000011000000000000";
    constant ap_const_lv64_4000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000";
    constant ap_const_lv64_5000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000101000000000000";
    constant ap_const_lv64_6000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000110000000000000";
    constant ap_const_lv64_7000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000111000000000000";
    constant ap_const_lv64_8000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000";
    constant ap_const_lv64_9000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001001000000000000";
    constant ap_const_lv64_A000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001010000000000000";
    constant ap_const_lv64_B000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001011000000000000";
    constant ap_const_lv64_C000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001100000000000000";
    constant ap_const_lv64_D000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001101000000000000";
    constant ap_const_lv64_E000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001110000000000000";
    constant ap_const_lv64_F000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001111000000000000";
    constant ap_const_lv64_10000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000";
    constant ap_const_lv64_11000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010001000000000000";
    constant ap_const_lv64_12000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010010000000000000";
    constant ap_const_lv64_13000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010011000000000000";
    constant ap_const_lv64_14000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010100000000000000";
    constant ap_const_lv64_15000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010101000000000000";
    constant ap_const_lv64_16000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010110000000000000";
    constant ap_const_lv64_17000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010111000000000000";
    constant ap_const_lv64_18000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000011000000000000000";
    constant ap_const_lv64_19000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000011001000000000000";
    constant ap_const_lv64_1A000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000011010000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_out_blk_n : STD_LOGIC;
    signal p_out1_blk_n : STD_LOGIC;
    signal p_out2_blk_n : STD_LOGIC;
    signal p_out3_blk_n : STD_LOGIC;
    signal p_out4_blk_n : STD_LOGIC;
    signal p_out5_blk_n : STD_LOGIC;
    signal p_out6_blk_n : STD_LOGIC;
    signal p_out7_blk_n : STD_LOGIC;
    signal p_out8_blk_n : STD_LOGIC;
    signal p_out9_blk_n : STD_LOGIC;
    signal p_out10_blk_n : STD_LOGIC;
    signal p_out11_blk_n : STD_LOGIC;
    signal p_out12_blk_n : STD_LOGIC;
    signal p_out13_blk_n : STD_LOGIC;
    signal p_out14_blk_n : STD_LOGIC;
    signal p_out15_blk_n : STD_LOGIC;
    signal p_out16_blk_n : STD_LOGIC;
    signal p_out17_blk_n : STD_LOGIC;
    signal p_out18_blk_n : STD_LOGIC;
    signal p_out19_blk_n : STD_LOGIC;
    signal p_out20_blk_n : STD_LOGIC;
    signal p_out21_blk_n : STD_LOGIC;
    signal p_out22_blk_n : STD_LOGIC;
    signal p_out23_blk_n : STD_LOGIC;
    signal p_out24_blk_n : STD_LOGIC;
    signal p_out25_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_out_full_n, p_out1_full_n, p_out2_full_n, p_out3_full_n, p_out4_full_n, p_out5_full_n, p_out6_full_n, p_out7_full_n, p_out8_full_n, p_out9_full_n, p_out10_full_n, p_out11_full_n, p_out12_full_n, p_out13_full_n, p_out14_full_n, p_out15_full_n, p_out16_full_n, p_out17_full_n, p_out18_full_n, p_out19_full_n, p_out20_full_n, p_out21_full_n, p_out22_full_n, p_out23_full_n, p_out24_full_n, p_out25_full_n)
    begin
                ap_block_state1 <= ((p_out12_full_n = ap_const_logic_0) or (p_out11_full_n = ap_const_logic_0) or (p_out10_full_n = ap_const_logic_0) or (p_out9_full_n = ap_const_logic_0) or (p_out8_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (p_out7_full_n = ap_const_logic_0) or (p_out6_full_n = ap_const_logic_0) or (p_out5_full_n = ap_const_logic_0) or (p_out4_full_n = ap_const_logic_0) or (p_out3_full_n = ap_const_logic_0) or (p_out2_full_n = ap_const_logic_0) or (p_out1_full_n = ap_const_logic_0) or (p_out_full_n = ap_const_logic_0) or (p_out25_full_n = ap_const_logic_0) or (p_out24_full_n = ap_const_logic_0) or (p_out23_full_n = ap_const_logic_0) or (p_out22_full_n = ap_const_logic_0) or (p_out21_full_n = ap_const_logic_0) or (p_out20_full_n = ap_const_logic_0) or (p_out19_full_n = ap_const_logic_0) or (p_out18_full_n = ap_const_logic_0) or (p_out17_full_n = ap_const_logic_0) or (p_out16_full_n = ap_const_logic_0) or (p_out15_full_n = ap_const_logic_0) or (p_out14_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) 
    or (p_out13_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    p_out10_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out10_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out10_blk_n <= p_out10_full_n;
        else 
            p_out10_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out10_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_B000));

    p_out10_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out10_write <= ap_const_logic_1;
        else 
            p_out10_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out11_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out11_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out11_blk_n <= p_out11_full_n;
        else 
            p_out11_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out11_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_C000));

    p_out11_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out11_write <= ap_const_logic_1;
        else 
            p_out11_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out12_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out12_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out12_blk_n <= p_out12_full_n;
        else 
            p_out12_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out12_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_D000));

    p_out12_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out12_write <= ap_const_logic_1;
        else 
            p_out12_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out13_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out13_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out13_blk_n <= p_out13_full_n;
        else 
            p_out13_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out13_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_E000));

    p_out13_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out13_write <= ap_const_logic_1;
        else 
            p_out13_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out14_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out14_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out14_blk_n <= p_out14_full_n;
        else 
            p_out14_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out14_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_F000));

    p_out14_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out14_write <= ap_const_logic_1;
        else 
            p_out14_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out15_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out15_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out15_blk_n <= p_out15_full_n;
        else 
            p_out15_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out15_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_10000));

    p_out15_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out15_write <= ap_const_logic_1;
        else 
            p_out15_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out16_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out16_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out16_blk_n <= p_out16_full_n;
        else 
            p_out16_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out16_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_11000));

    p_out16_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out16_write <= ap_const_logic_1;
        else 
            p_out16_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out17_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out17_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out17_blk_n <= p_out17_full_n;
        else 
            p_out17_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out17_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_12000));

    p_out17_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out17_write <= ap_const_logic_1;
        else 
            p_out17_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out18_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out18_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out18_blk_n <= p_out18_full_n;
        else 
            p_out18_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out18_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_13000));

    p_out18_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out18_write <= ap_const_logic_1;
        else 
            p_out18_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out19_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out19_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out19_blk_n <= p_out19_full_n;
        else 
            p_out19_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out19_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_14000));

    p_out19_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out19_write <= ap_const_logic_1;
        else 
            p_out19_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out1_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out1_blk_n <= p_out1_full_n;
        else 
            p_out1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out1_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_2000));

    p_out1_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out1_write <= ap_const_logic_1;
        else 
            p_out1_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out20_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out20_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out20_blk_n <= p_out20_full_n;
        else 
            p_out20_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out20_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_15000));

    p_out20_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out20_write <= ap_const_logic_1;
        else 
            p_out20_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out21_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out21_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out21_blk_n <= p_out21_full_n;
        else 
            p_out21_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out21_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_16000));

    p_out21_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out21_write <= ap_const_logic_1;
        else 
            p_out21_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out22_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out22_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out22_blk_n <= p_out22_full_n;
        else 
            p_out22_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out22_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_17000));

    p_out22_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out22_write <= ap_const_logic_1;
        else 
            p_out22_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out23_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out23_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out23_blk_n <= p_out23_full_n;
        else 
            p_out23_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out23_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_18000));

    p_out23_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out23_write <= ap_const_logic_1;
        else 
            p_out23_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out24_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out24_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out24_blk_n <= p_out24_full_n;
        else 
            p_out24_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out24_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_19000));

    p_out24_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out24_write <= ap_const_logic_1;
        else 
            p_out24_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out25_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out25_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out25_blk_n <= p_out25_full_n;
        else 
            p_out25_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out25_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_1A000));

    p_out25_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out25_write <= ap_const_logic_1;
        else 
            p_out25_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out2_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out2_blk_n <= p_out2_full_n;
        else 
            p_out2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out2_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_3000));

    p_out2_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out2_write <= ap_const_logic_1;
        else 
            p_out2_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out3_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out3_blk_n <= p_out3_full_n;
        else 
            p_out3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out3_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_4000));

    p_out3_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out3_write <= ap_const_logic_1;
        else 
            p_out3_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out4_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out4_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out4_blk_n <= p_out4_full_n;
        else 
            p_out4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out4_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_5000));

    p_out4_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out4_write <= ap_const_logic_1;
        else 
            p_out4_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out5_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out5_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out5_blk_n <= p_out5_full_n;
        else 
            p_out5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out5_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_6000));

    p_out5_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out5_write <= ap_const_logic_1;
        else 
            p_out5_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out6_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out6_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out6_blk_n <= p_out6_full_n;
        else 
            p_out6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out6_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_7000));

    p_out6_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out6_write <= ap_const_logic_1;
        else 
            p_out6_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out7_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out7_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out7_blk_n <= p_out7_full_n;
        else 
            p_out7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out7_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_8000));

    p_out7_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out7_write <= ap_const_logic_1;
        else 
            p_out7_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out8_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out8_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out8_blk_n <= p_out8_full_n;
        else 
            p_out8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out8_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_9000));

    p_out8_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out8_write <= ap_const_logic_1;
        else 
            p_out8_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out9_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out9_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out9_blk_n <= p_out9_full_n;
        else 
            p_out9_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out9_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_A000));

    p_out9_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out9_write <= ap_const_logic_1;
        else 
            p_out9_write <= ap_const_logic_0;
        end if; 
    end process;


    p_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out_blk_n <= p_out_full_n;
        else 
            p_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out_din <= std_logic_vector(unsigned(layer_weights) + unsigned(ap_const_lv64_1000));

    p_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_out_write <= ap_const_logic_1;
        else 
            p_out_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;

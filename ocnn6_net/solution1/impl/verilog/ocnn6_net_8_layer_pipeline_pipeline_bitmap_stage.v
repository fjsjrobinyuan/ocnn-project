// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ocnn6_net_8_layer_pipeline_pipeline_bitmap_stage (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_voxel_stream_dout,
        input_voxel_stream_empty_n,
        input_voxel_stream_read,
        feature_data_stream_din,
        feature_data_stream_full_n,
        feature_data_stream_write,
        feature_data_stream_num_data_valid,
        feature_data_stream_fifo_cap,
        write_addr_stream_din,
        write_addr_stream_full_n,
        write_addr_stream_write,
        write_addr_stream_num_data_valid,
        write_addr_stream_fifo_cap,
        L3_bitmap_i,
        L3_bitmap_o,
        L3_bitmap_o_ap_vld,
        L2_bitmap_i,
        L2_bitmap_o,
        L2_bitmap_o_ap_vld,
        L1_bitmap_i,
        L1_bitmap_o,
        L1_bitmap_o_ap_vld,
        L0_bitmap_i,
        L0_bitmap_o,
        L0_bitmap_o_ap_vld,
        bitmap_info,
        bitmap_info_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1084:0] input_voxel_stream_dout;
input   input_voxel_stream_empty_n;
output   input_voxel_stream_read;
output  [1084:0] feature_data_stream_din;
input   feature_data_stream_full_n;
output   feature_data_stream_write;
input  [10:0] feature_data_stream_num_data_valid;
input  [10:0] feature_data_stream_fifo_cap;
output  [59:0] write_addr_stream_din;
input   write_addr_stream_full_n;
output   write_addr_stream_write;
input  [10:0] write_addr_stream_num_data_valid;
input  [10:0] write_addr_stream_fifo_cap;
input  [511:0] L3_bitmap_i;
output  [511:0] L3_bitmap_o;
output   L3_bitmap_o_ap_vld;
input  [511:0] L2_bitmap_i;
output  [511:0] L2_bitmap_o;
output   L2_bitmap_o_ap_vld;
input  [511:0] L1_bitmap_i;
output  [511:0] L1_bitmap_o;
output   L1_bitmap_o_ap_vld;
input  [511:0] L0_bitmap_i;
output  [511:0] L0_bitmap_o;
output   L0_bitmap_o_ap_vld;
output  [159:0] bitmap_info;
output   bitmap_info_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[511:0] L3_bitmap_o;
reg L3_bitmap_o_ap_vld;
reg[511:0] L2_bitmap_o;
reg L2_bitmap_o_ap_vld;
reg[511:0] L1_bitmap_o;
reg L1_bitmap_o_ap_vld;
reg[511:0] L0_bitmap_o;
reg L0_bitmap_o_ap_vld;
reg[159:0] bitmap_info;
reg bitmap_info_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [511:0] L2_bitmap_read_reg_165;
reg    ap_block_state1;
reg   [511:0] L3_bitmap_read_reg_170;
wire    ap_CS_fsm_state2;
reg   [511:0] L1_bitmap_read_reg_175;
reg   [511:0] L0_bitmap_read_reg_180;
wire    grp_streaming_bitmap_constructor_fu_106_ap_start;
wire    grp_streaming_bitmap_constructor_fu_106_ap_done;
wire    grp_streaming_bitmap_constructor_fu_106_ap_idle;
wire    grp_streaming_bitmap_constructor_fu_106_ap_ready;
wire    grp_streaming_bitmap_constructor_fu_106_input_voxel_stream_read;
wire   [1084:0] grp_streaming_bitmap_constructor_fu_106_feature_data_stream_din;
wire    grp_streaming_bitmap_constructor_fu_106_feature_data_stream_write;
wire   [59:0] grp_streaming_bitmap_constructor_fu_106_write_addr_stream_din;
wire    grp_streaming_bitmap_constructor_fu_106_write_addr_stream_write;
wire   [511:0] grp_streaming_bitmap_constructor_fu_106_L2_bitmap;
wire    grp_streaming_bitmap_constructor_fu_106_L2_bitmap_ap_vld;
wire   [511:0] grp_streaming_bitmap_constructor_fu_106_ap_return_0;
wire   [511:0] grp_streaming_bitmap_constructor_fu_106_ap_return_1;
wire   [511:0] grp_streaming_bitmap_constructor_fu_106_ap_return_2;
wire   [159:0] grp_streaming_bitmap_constructor_fu_106_ap_return_3;
reg    grp_streaming_bitmap_constructor_fu_106_ap_start_reg;
wire    ap_CS_fsm_state3;
reg   [511:0] L2_bitmap_o_reg;
reg   [511:0] L3_bitmap_o_preg;
reg   [511:0] L1_bitmap_o_preg;
reg   [511:0] L0_bitmap_o_preg;
reg   [159:0] bitmap_info_preg;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_streaming_bitmap_constructor_fu_106_ap_start_reg = 1'b0;
#0 L3_bitmap_o_preg = 512'd0;
#0 L1_bitmap_o_preg = 512'd0;
#0 L0_bitmap_o_preg = 512'd0;
#0 bitmap_info_preg = 160'd0;
end

ocnn6_net_8_layer_pipeline_streaming_bitmap_constructor grp_streaming_bitmap_constructor_fu_106(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_streaming_bitmap_constructor_fu_106_ap_start),
    .ap_done(grp_streaming_bitmap_constructor_fu_106_ap_done),
    .ap_idle(grp_streaming_bitmap_constructor_fu_106_ap_idle),
    .ap_ready(grp_streaming_bitmap_constructor_fu_106_ap_ready),
    .input_voxel_stream_dout(input_voxel_stream_dout),
    .input_voxel_stream_empty_n(input_voxel_stream_empty_n),
    .input_voxel_stream_read(grp_streaming_bitmap_constructor_fu_106_input_voxel_stream_read),
    .feature_data_stream_din(grp_streaming_bitmap_constructor_fu_106_feature_data_stream_din),
    .feature_data_stream_full_n(feature_data_stream_full_n),
    .feature_data_stream_write(grp_streaming_bitmap_constructor_fu_106_feature_data_stream_write),
    .feature_data_stream_num_data_valid(11'd0),
    .feature_data_stream_fifo_cap(11'd0),
    .write_addr_stream_din(grp_streaming_bitmap_constructor_fu_106_write_addr_stream_din),
    .write_addr_stream_full_n(write_addr_stream_full_n),
    .write_addr_stream_write(grp_streaming_bitmap_constructor_fu_106_write_addr_stream_write),
    .write_addr_stream_num_data_valid(11'd0),
    .write_addr_stream_fifo_cap(11'd0),
    .p_read(L3_bitmap_read_reg_170),
    .L2_bitmap(grp_streaming_bitmap_constructor_fu_106_L2_bitmap),
    .L2_bitmap_ap_vld(grp_streaming_bitmap_constructor_fu_106_L2_bitmap_ap_vld),
    .L2_bitmap_read(L2_bitmap_read_reg_165),
    .p_read1(L1_bitmap_read_reg_175),
    .p_read2(L0_bitmap_read_reg_180),
    .ap_return_0(grp_streaming_bitmap_constructor_fu_106_ap_return_0),
    .ap_return_1(grp_streaming_bitmap_constructor_fu_106_ap_return_1),
    .ap_return_2(grp_streaming_bitmap_constructor_fu_106_ap_return_2),
    .ap_return_3(grp_streaming_bitmap_constructor_fu_106_ap_return_3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        L0_bitmap_o_preg <= 512'd0;
    end else begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            L0_bitmap_o_preg <= grp_streaming_bitmap_constructor_fu_106_ap_return_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        L1_bitmap_o_preg <= 512'd0;
    end else begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            L1_bitmap_o_preg <= grp_streaming_bitmap_constructor_fu_106_ap_return_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        L3_bitmap_o_preg <= 512'd0;
    end else begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            L3_bitmap_o_preg <= grp_streaming_bitmap_constructor_fu_106_ap_return_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        bitmap_info_preg <= 160'd0;
    end else begin
        if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            bitmap_info_preg <= grp_streaming_bitmap_constructor_fu_106_ap_return_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_streaming_bitmap_constructor_fu_106_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_streaming_bitmap_constructor_fu_106_ap_start_reg <= 1'b1;
        end else if ((grp_streaming_bitmap_constructor_fu_106_ap_ready == 1'b1)) begin
            grp_streaming_bitmap_constructor_fu_106_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        L0_bitmap_read_reg_180 <= L0_bitmap_i;
        L1_bitmap_read_reg_175 <= L1_bitmap_i;
        L3_bitmap_read_reg_170 <= L3_bitmap_i;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_streaming_bitmap_constructor_fu_106_L2_bitmap_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        L2_bitmap_o_reg <= grp_streaming_bitmap_constructor_fu_106_L2_bitmap;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        L2_bitmap_read_reg_165 <= L2_bitmap_i;
    end
end

always @ (*) begin
    if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        L0_bitmap_o = grp_streaming_bitmap_constructor_fu_106_ap_return_2;
    end else begin
        L0_bitmap_o = L0_bitmap_o_preg;
    end
end

always @ (*) begin
    if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        L0_bitmap_o_ap_vld = 1'b1;
    end else begin
        L0_bitmap_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        L1_bitmap_o = grp_streaming_bitmap_constructor_fu_106_ap_return_1;
    end else begin
        L1_bitmap_o = L1_bitmap_o_preg;
    end
end

always @ (*) begin
    if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        L1_bitmap_o_ap_vld = 1'b1;
    end else begin
        L1_bitmap_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_streaming_bitmap_constructor_fu_106_L2_bitmap_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        L2_bitmap_o = grp_streaming_bitmap_constructor_fu_106_L2_bitmap;
    end else begin
        L2_bitmap_o = L2_bitmap_o_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        L2_bitmap_o_ap_vld = grp_streaming_bitmap_constructor_fu_106_L2_bitmap_ap_vld;
    end else begin
        L2_bitmap_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        L3_bitmap_o = grp_streaming_bitmap_constructor_fu_106_ap_return_0;
    end else begin
        L3_bitmap_o = L3_bitmap_o_preg;
    end
end

always @ (*) begin
    if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        L3_bitmap_o_ap_vld = 1'b1;
    end else begin
        L3_bitmap_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        bitmap_info = grp_streaming_bitmap_constructor_fu_106_ap_return_3;
    end else begin
        bitmap_info = bitmap_info_preg;
    end
end

always @ (*) begin
    if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        bitmap_info_ap_vld = 1'b1;
    end else begin
        bitmap_info_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_streaming_bitmap_constructor_fu_106_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign feature_data_stream_din = grp_streaming_bitmap_constructor_fu_106_feature_data_stream_din;

assign feature_data_stream_write = grp_streaming_bitmap_constructor_fu_106_feature_data_stream_write;

assign grp_streaming_bitmap_constructor_fu_106_ap_start = grp_streaming_bitmap_constructor_fu_106_ap_start_reg;

assign input_voxel_stream_read = grp_streaming_bitmap_constructor_fu_106_input_voxel_stream_read;

assign write_addr_stream_din = grp_streaming_bitmap_constructor_fu_106_write_addr_stream_din;

assign write_addr_stream_write = grp_streaming_bitmap_constructor_fu_106_write_addr_stream_write;

endmodule //ocnn6_net_8_layer_pipeline_pipeline_bitmap_stage

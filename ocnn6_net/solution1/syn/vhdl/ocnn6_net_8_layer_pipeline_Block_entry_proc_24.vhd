-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ocnn6_net_8_layer_pipeline_Block_entry_proc_24 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    pruned_voxel_count_0_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    pruned_voxel_count_0_loc_empty_n : IN STD_LOGIC;
    pruned_voxel_count_0_loc_read : OUT STD_LOGIC;
    pruned_voxel_count_0_loc_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    pruned_voxel_count_0_loc_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    wide_trip_count_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    wide_trip_count_out_full_n : IN STD_LOGIC;
    wide_trip_count_out_write : OUT STD_LOGIC;
    wide_trip_count_out_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    wide_trip_count_out_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out_din : OUT STD_LOGIC_VECTOR (33 downto 0);
    p_out_full_n : IN STD_LOGIC;
    p_out_write : OUT STD_LOGIC;
    p_out_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    p_out_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    pruned_voxel_count_0_reload_loc_c1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    pruned_voxel_count_0_reload_loc_c1_full_n : IN STD_LOGIC;
    pruned_voxel_count_0_reload_loc_c1_write : OUT STD_LOGIC;
    pruned_voxel_count_0_reload_loc_c1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    pruned_voxel_count_0_reload_loc_c1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of ocnn6_net_8_layer_pipeline_Block_entry_proc_24 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pruned_voxel_count_0_loc_blk_n : STD_LOGIC;
    signal wide_trip_count_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_out_blk_n : STD_LOGIC;
    signal pruned_voxel_count_0_reload_loc_c1_blk_n : STD_LOGIC;
    signal pruned_voxel_count_0_loc_read_reg_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal p_shl_fu_62_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal pruned_voxel_count_0_loc_load_cast_fu_59_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                pruned_voxel_count_0_loc_read_reg_76 <= pruned_voxel_count_0_loc_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state1, ap_block_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2)
    begin
        if ((ap_const_boolean_1 = ap_block_state2)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, pruned_voxel_count_0_loc_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (pruned_voxel_count_0_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(wide_trip_count_out_full_n, p_out_full_n, pruned_voxel_count_0_reload_loc_c1_full_n)
    begin
                ap_block_state2 <= ((pruned_voxel_count_0_reload_loc_c1_full_n = ap_const_logic_0) or (p_out_full_n = ap_const_logic_0) or (wide_trip_count_out_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    p_out_blk_n_assign_proc : process(p_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_out_blk_n <= p_out_full_n;
        else 
            p_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_out_din <= std_logic_vector(unsigned(p_shl_fu_62_p3) - unsigned(pruned_voxel_count_0_loc_load_cast_fu_59_p1));

    p_out_write_assign_proc : process(ap_CS_fsm_state2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_out_write <= ap_const_logic_1;
        else 
            p_out_write <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_fu_62_p3 <= (pruned_voxel_count_0_loc_read_reg_76 & ap_const_lv2_0);

    pruned_voxel_count_0_loc_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, pruned_voxel_count_0_loc_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pruned_voxel_count_0_loc_blk_n <= pruned_voxel_count_0_loc_empty_n;
        else 
            pruned_voxel_count_0_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pruned_voxel_count_0_loc_load_cast_fu_59_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pruned_voxel_count_0_loc_read_reg_76),34));

    pruned_voxel_count_0_loc_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pruned_voxel_count_0_loc_read <= ap_const_logic_1;
        else 
            pruned_voxel_count_0_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    pruned_voxel_count_0_reload_loc_c1_blk_n_assign_proc : process(pruned_voxel_count_0_reload_loc_c1_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pruned_voxel_count_0_reload_loc_c1_blk_n <= pruned_voxel_count_0_reload_loc_c1_full_n;
        else 
            pruned_voxel_count_0_reload_loc_c1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pruned_voxel_count_0_reload_loc_c1_din <= pruned_voxel_count_0_loc_read_reg_76;

    pruned_voxel_count_0_reload_loc_c1_write_assign_proc : process(ap_CS_fsm_state2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            pruned_voxel_count_0_reload_loc_c1_write <= ap_const_logic_1;
        else 
            pruned_voxel_count_0_reload_loc_c1_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    wide_trip_count_out_blk_n_assign_proc : process(wide_trip_count_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wide_trip_count_out_blk_n <= wide_trip_count_out_full_n;
        else 
            wide_trip_count_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    wide_trip_count_out_din <= pruned_voxel_count_0_loc_read_reg_76;

    wide_trip_count_out_write_assign_proc : process(ap_CS_fsm_state2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wide_trip_count_out_write <= ap_const_logic_1;
        else 
            wide_trip_count_out_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;

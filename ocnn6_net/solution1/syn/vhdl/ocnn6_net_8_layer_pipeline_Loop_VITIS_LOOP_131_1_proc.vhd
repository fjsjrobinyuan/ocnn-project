-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ocnn6_net_8_layer_pipeline_Loop_VITIS_LOOP_131_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    pruned_feature_dram_read_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    pruned_feature_dram_read_empty_n : IN STD_LOGIC;
    pruned_feature_dram_read_read : OUT STD_LOGIC;
    pruned_feature_dram_read_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    pruned_feature_dram_read_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    feature_data_stream_dout : IN STD_LOGIC_VECTOR (1084 downto 0);
    feature_data_stream_empty_n : IN STD_LOGIC;
    feature_data_stream_read : OUT STD_LOGIC;
    feature_data_stream_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    feature_data_stream_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    write_addr_stream_dout : IN STD_LOGIC_VECTOR (59 downto 0);
    write_addr_stream_empty_n : IN STD_LOGIC;
    write_addr_stream_read : OUT STD_LOGIC;
    write_addr_stream_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    write_addr_stream_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem_read_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_read_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_read_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_read_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_read_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_read_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_read_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_read_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_read_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_read_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_read_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_read_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_read_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_read_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_read_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_read_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_read_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_read_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_read_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_read_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_read_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_read_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_read_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_read_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_read_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_read_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_read_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_read_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_gmem_read_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_read_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_read_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_read_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_read_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    pruned_voxel_count_0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    pruned_voxel_count_0_out_full_n : IN STD_LOGIC;
    pruned_voxel_count_0_out_write : OUT STD_LOGIC;
    pruned_voxel_count_0_out_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    pruned_voxel_count_0_out_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of ocnn6_net_8_layer_pipeline_Loop_VITIS_LOOP_131_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pruned_feature_dram_read_blk_n : STD_LOGIC;
    signal feature_data_stream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_grp1 : BOOLEAN;
    signal tmp_reg_282 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_subdone_grp1_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal write_addr_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1_grp2 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp2_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp2 : BOOLEAN;
    signal gmem_read_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage1_grp3 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp3_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp3 : BOOLEAN;
    signal gmem_read_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_grp4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_grp5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp5_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal gmem_read_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_grp7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp7_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp7 : BOOLEAN;
    signal pruned_voxel_count_0_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal pruned_feature_dram_read_read_reg_277 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_nbreadreq_fu_100_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_s_nbreadreq_fu_108_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_read_addr_reg_290 : STD_LOGIC_VECTOR (63 downto 0);
    signal voxel_features_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op39_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage1_iter0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp1 : BOOLEAN;
    signal voxel_features_1_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln133_3_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_tran2to12_state2 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_predicate_op45_write_state4 : BOOLEAN;
    signal ap_block_state4_io_grp4 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal sext_ln143_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_predicate_op44_writereq_state3 : BOOLEAN;
    signal ap_block_state3_io_grp3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp7 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_grp4 : BOOLEAN;
    signal ap_block_pp0_stage2_01001_grp4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp5 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp5 : BOOLEAN;
    signal ap_block_pp0_stage1_01001_grp1 : BOOLEAN;
    signal pruned_voxel_count_fu_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pruned_voxel_count_1_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op43_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage1_iter0_grp2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp2 : BOOLEAN;
    signal shl_ln131_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln131_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_193_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln131_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln131_fu_205_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_210_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp5_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp5_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp5_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5)) then 
                        ap_block_pp0_stage0_subdone_grp5_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp7_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp7_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp7_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp7)) then 
                        ap_block_pp0_stage0_subdone_grp7_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp1_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp1_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp1_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1)) then 
                        ap_block_pp0_stage1_subdone_grp1_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp2_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp2_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp2_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2)) then 
                        ap_block_pp0_stage1_subdone_grp2_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp3_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp3_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp3_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3)) then 
                        ap_block_pp0_stage1_subdone_grp3_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (pruned_voxel_count_0_out_full_n = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    pruned_voxel_count_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                pruned_voxel_count_fu_90 <= ap_const_lv32_0;
            elsif (((tmp_s_nbreadreq_fu_108_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                pruned_voxel_count_fu_90 <= pruned_voxel_count_1_fu_175_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_read_addr_reg_290 <= sext_ln143_fu_220_p1;
                tmp_reg_282 <= tmp_nbreadreq_fu_100_p3;
                tmp_s_reg_286 <= tmp_s_nbreadreq_fu_108_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                pruned_feature_dram_read_read_reg_277 <= pruned_feature_dram_read_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg))) then
                trunc_ln133_3_reg_308 <= feature_data_stream_dout(96 downto 65);
                voxel_features_1_reg_303 <= feature_data_stream_dout(64 downto 33);
                voxel_features_reg_298 <= feature_data_stream_dout(32 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, pruned_voxel_count_0_out_full_n, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_subdone, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3, ap_CS_fsm_state12, ap_block_state1, ap_predicate_tran2to12_state2, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_predicate_tran2to12_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_predicate_tran2to12_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (pruned_voxel_count_0_out_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln131_fu_205_p2 <= std_logic_vector(unsigned(pruned_feature_dram_read_read_reg_277) + unsigned(zext_ln131_fu_201_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(4);

    ap_ST_fsm_state12_blk_assign_proc : process(pruned_voxel_count_0_out_full_n)
    begin
        if ((pruned_voxel_count_0_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001_grp5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_gmem_read_0_WREADY, m_axi_gmem_read_0_BVALID, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone_grp5_done_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone_grp7_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem_read_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5_done_reg)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp7_done_reg) and (m_axi_gmem_read_0_BVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_grp5_assign_proc : process(m_axi_gmem_read_0_WREADY, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone_grp5_done_reg)
    begin
                ap_block_pp0_stage0_11001_grp5 <= ((m_axi_gmem_read_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5_done_reg));
    end process;


    ap_block_pp0_stage0_11001_grp7_assign_proc : process(m_axi_gmem_read_0_BVALID, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone_grp7_done_reg)
    begin
                ap_block_pp0_stage0_11001_grp7 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp7_done_reg) and (m_axi_gmem_read_0_BVALID = ap_const_logic_0));
    end process;

        ap_block_pp0_stage0_grp5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_gmem_read_0_WREADY, m_axi_gmem_read_0_BVALID, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone_grp5_done_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone_grp7_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem_read_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5_done_reg)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp7_done_reg) and (m_axi_gmem_read_0_BVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_grp5_assign_proc : process(m_axi_gmem_read_0_WREADY, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone_grp5_done_reg)
    begin
                ap_block_pp0_stage0_subdone_grp5 <= ((m_axi_gmem_read_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5_done_reg));
    end process;


    ap_block_pp0_stage0_subdone_grp7_assign_proc : process(m_axi_gmem_read_0_BVALID, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone_grp7_done_reg)
    begin
                ap_block_pp0_stage0_subdone_grp7 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp7_done_reg) and (m_axi_gmem_read_0_BVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_block_state3_pp0_stage1_iter0_grp1)
    begin
                ap_block_pp0_stage1_01001_grp1 <= ((ap_const_boolean_1 = ap_block_state3_pp0_stage1_iter0_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_grp1_assign_proc : process(m_axi_gmem_read_0_WREADY, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_enable_reg_pp0_iter1, ap_block_state3_pp0_stage1_iter0_grp1)
    begin
                ap_block_pp0_stage1_11001_grp1 <= (((ap_const_boolean_1 = ap_block_state3_pp0_stage1_iter0_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((m_axi_gmem_read_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg)));
    end process;


    ap_block_pp0_stage1_11001_grp2_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_block_state3_pp0_stage1_iter0_grp2)
    begin
                ap_block_pp0_stage1_11001_grp2 <= ((ap_const_boolean_1 = ap_block_state3_pp0_stage1_iter0_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_grp3_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_block_state3_io_grp3)
    begin
                ap_block_pp0_stage1_11001_grp3 <= ((ap_const_boolean_1 = ap_block_state3_io_grp3) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(m_axi_gmem_read_0_WREADY, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_enable_reg_pp0_iter1, ap_block_state3_pp0_stage1_iter0_grp1, ap_block_state3_io_grp3, ap_block_state3_pp0_stage1_iter0_grp2)
    begin
                ap_block_pp0_stage1_subdone <= (((m_axi_gmem_read_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (((ap_const_boolean_1 = ap_block_state3_pp0_stage1_iter0_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg)) or ((ap_const_boolean_1 = ap_block_state3_io_grp3) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg)) or ((ap_const_boolean_1 = ap_block_state3_pp0_stage1_iter0_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg)))));
    end process;


    ap_block_pp0_stage1_subdone_grp1_assign_proc : process(m_axi_gmem_read_0_WREADY, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_enable_reg_pp0_iter1, ap_block_state3_pp0_stage1_iter0_grp1)
    begin
                ap_block_pp0_stage1_subdone_grp1 <= (((ap_const_boolean_1 = ap_block_state3_pp0_stage1_iter0_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((m_axi_gmem_read_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg)));
    end process;


    ap_block_pp0_stage1_subdone_grp2_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_block_state3_pp0_stage1_iter0_grp2)
    begin
                ap_block_pp0_stage1_subdone_grp2 <= ((ap_const_boolean_1 = ap_block_state3_pp0_stage1_iter0_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_grp3_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_block_state3_io_grp3)
    begin
                ap_block_pp0_stage1_subdone_grp3 <= ((ap_const_boolean_1 = ap_block_state3_io_grp3) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2_01001_grp4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_grp4_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state4_io_grp4)
    begin
                ap_block_pp0_stage2_11001_grp4 <= ((ap_const_boolean_1 = ap_block_state4_io_grp4) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2_grp4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state4_io_grp4)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_const_boolean_1 = ap_block_state4_io_grp4) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, pruned_feature_dram_read_empty_n)
    begin
                ap_block_state1 <= ((pruned_feature_dram_read_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state3_io_grp3_assign_proc : process(m_axi_gmem_read_0_AWREADY, ap_predicate_op44_writereq_state3)
    begin
                ap_block_state3_io_grp3 <= ((m_axi_gmem_read_0_AWREADY = ap_const_logic_0) and (ap_predicate_op44_writereq_state3 = ap_const_boolean_1));
    end process;


    ap_block_state3_pp0_stage1_iter0_grp1_assign_proc : process(feature_data_stream_empty_n, ap_predicate_op39_read_state3)
    begin
                ap_block_state3_pp0_stage1_iter0_grp1 <= ((feature_data_stream_empty_n = ap_const_logic_0) and (ap_predicate_op39_read_state3 = ap_const_boolean_1));
    end process;


    ap_block_state3_pp0_stage1_iter0_grp2_assign_proc : process(write_addr_stream_empty_n, ap_predicate_op43_read_state3)
    begin
                ap_block_state3_pp0_stage1_iter0_grp2 <= ((write_addr_stream_empty_n = ap_const_logic_0) and (ap_predicate_op43_read_state3 = ap_const_boolean_1));
    end process;


    ap_block_state4_io_grp4_assign_proc : process(m_axi_gmem_read_0_WREADY, ap_predicate_op45_write_state4)
    begin
                ap_block_state4_io_grp4 <= ((m_axi_gmem_read_0_WREADY = ap_const_logic_0) and (ap_predicate_op45_write_state4 = ap_const_boolean_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(ap_predicate_tran2to12_state2)
    begin
        if ((ap_predicate_tran2to12_state2 = ap_const_boolean_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, pruned_voxel_count_0_out_full_n, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (pruned_voxel_count_0_out_full_n = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op39_read_state3_assign_proc : process(tmp_reg_282, tmp_s_reg_286)
    begin
                ap_predicate_op39_read_state3 <= ((tmp_s_reg_286 = ap_const_lv1_1) and (tmp_reg_282 = ap_const_lv1_1));
    end process;


    ap_predicate_op43_read_state3_assign_proc : process(tmp_reg_282, tmp_s_reg_286)
    begin
                ap_predicate_op43_read_state3 <= ((tmp_s_reg_286 = ap_const_lv1_1) and (tmp_reg_282 = ap_const_lv1_1));
    end process;


    ap_predicate_op44_writereq_state3_assign_proc : process(tmp_reg_282, tmp_s_reg_286)
    begin
                ap_predicate_op44_writereq_state3 <= ((tmp_s_reg_286 = ap_const_lv1_1) and (tmp_reg_282 = ap_const_lv1_1));
    end process;


    ap_predicate_op45_write_state4_assign_proc : process(tmp_reg_282, tmp_s_reg_286)
    begin
                ap_predicate_op45_write_state4 <= ((tmp_s_reg_286 = ap_const_lv1_1) and (tmp_reg_282 = ap_const_lv1_1));
    end process;


    ap_predicate_tran2to12_state2_assign_proc : process(tmp_nbreadreq_fu_100_p3, tmp_s_nbreadreq_fu_108_p3)
    begin
                ap_predicate_tran2to12_state2 <= ((tmp_s_nbreadreq_fu_108_p3 = ap_const_lv1_0) or (tmp_nbreadreq_fu_100_p3 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;

    feature_data_stream_blk_n_assign_proc : process(feature_data_stream_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_grp1, tmp_reg_282, tmp_s_reg_286, ap_block_pp0_stage1_subdone_grp1_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_s_reg_286 = ap_const_lv1_1) and (tmp_reg_282 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            feature_data_stream_blk_n <= feature_data_stream_empty_n;
        else 
            feature_data_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    feature_data_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_predicate_op39_read_state3, ap_block_pp0_stage1_11001_grp1)
    begin
        if (((ap_predicate_op39_read_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            feature_data_stream_read <= ap_const_logic_1;
        else 
            feature_data_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    gmem_read_blk_n_AW_assign_proc : process(m_axi_gmem_read_0_AWREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, tmp_reg_282, tmp_s_reg_286, ap_block_pp0_stage1_grp3, ap_block_pp0_stage1_subdone_grp3_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_s_reg_286 = ap_const_lv1_1) and (tmp_reg_282 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp3) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            gmem_read_blk_n_AW <= m_axi_gmem_read_0_AWREADY;
        else 
            gmem_read_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_read_blk_n_B_assign_proc : process(m_axi_gmem_read_0_BVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_grp7, ap_block_pp0_stage0_subdone_grp7_done_reg)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp7_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp7))) then 
            gmem_read_blk_n_B <= m_axi_gmem_read_0_BVALID;
        else 
            gmem_read_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_read_blk_n_W_assign_proc : process(m_axi_gmem_read_0_WREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_grp1, tmp_reg_282, tmp_s_reg_286, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_grp4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_grp5, ap_block_pp0_stage0_subdone_grp5_done_reg)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp5)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_s_reg_286 = ap_const_lv1_1) and (tmp_reg_282 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_grp4) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp1)))) then 
            gmem_read_blk_n_W <= m_axi_gmem_read_0_WREADY;
        else 
            gmem_read_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(pruned_voxel_count_0_out_full_n, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (pruned_voxel_count_0_out_full_n = ap_const_logic_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_read_0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_read_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_read_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_read_0_ARID <= ap_const_lv1_0;
    m_axi_gmem_read_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_read_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_read_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_read_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_read_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_read_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_read_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_read_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem_read_0_AWADDR <= gmem_read_addr_reg_290;
    m_axi_gmem_read_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_read_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_read_0_AWID <= ap_const_lv1_0;
    m_axi_gmem_read_0_AWLEN <= ap_const_lv64_3(32 - 1 downto 0);
    m_axi_gmem_read_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_read_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_read_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_read_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_read_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_read_0_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_read_0_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_predicate_op44_writereq_state3, ap_block_pp0_stage1_11001_grp3)
    begin
        if (((ap_predicate_op44_writereq_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp3) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            m_axi_gmem_read_0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_read_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_read_0_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone_grp7_done_reg, ap_block_pp0_stage0_11001_grp7)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp7) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp7_done_reg))) then 
            m_axi_gmem_read_0_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_read_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_read_0_RREADY <= ap_const_logic_0;

    m_axi_gmem_read_0_WDATA_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone_grp5_done_reg, voxel_features_reg_298, voxel_features_1_reg_303, trunc_ln133_3_reg_308, ap_predicate_op45_write_state4, ap_block_pp0_stage2_01001_grp4, ap_block_pp0_stage0_01001_grp5, ap_block_pp0_stage1_01001_grp1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg))) then 
            m_axi_gmem_read_0_WDATA <= trunc_ln133_3_reg_308;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001_grp5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5_done_reg))) then 
            m_axi_gmem_read_0_WDATA <= voxel_features_1_reg_303;
        elsif (((ap_predicate_op45_write_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001_grp4) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            m_axi_gmem_read_0_WDATA <= voxel_features_reg_298;
        else 
            m_axi_gmem_read_0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_read_0_WID <= ap_const_lv1_0;
    m_axi_gmem_read_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_read_0_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_read_0_WUSER <= ap_const_lv1_0;

    m_axi_gmem_read_0_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp1_done_reg, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone_grp5_done_reg, ap_block_pp0_stage1_11001_grp1, ap_predicate_op45_write_state4, ap_block_pp0_stage2_11001_grp4, ap_block_pp0_stage0_11001_grp5)
    begin
        if ((((ap_predicate_op45_write_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp4) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5_done_reg)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp1_done_reg)))) then 
            m_axi_gmem_read_0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_read_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    pruned_feature_dram_read_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, pruned_feature_dram_read_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pruned_feature_dram_read_blk_n <= pruned_feature_dram_read_empty_n;
        else 
            pruned_feature_dram_read_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pruned_feature_dram_read_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            pruned_feature_dram_read_read <= ap_const_logic_1;
        else 
            pruned_feature_dram_read_read <= ap_const_logic_0;
        end if; 
    end process;


    pruned_voxel_count_0_out_blk_n_assign_proc : process(pruned_voxel_count_0_out_full_n, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            pruned_voxel_count_0_out_blk_n <= pruned_voxel_count_0_out_full_n;
        else 
            pruned_voxel_count_0_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pruned_voxel_count_0_out_din <= pruned_voxel_count_fu_90;

    pruned_voxel_count_0_out_write_assign_proc : process(pruned_voxel_count_0_out_full_n, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (pruned_voxel_count_0_out_full_n = ap_const_logic_1))) then 
            pruned_voxel_count_0_out_write <= ap_const_logic_1;
        else 
            pruned_voxel_count_0_out_write <= ap_const_logic_0;
        end if; 
    end process;

    pruned_voxel_count_1_fu_175_p2 <= std_logic_vector(unsigned(pruned_voxel_count_fu_90) + unsigned(ap_const_lv32_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln143_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_210_p4),64));

    shl_ln131_fu_181_p2 <= std_logic_vector(shift_left(unsigned(pruned_voxel_count_fu_90),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln_fu_193_p3 <= (sub_ln131_fu_187_p2 & ap_const_lv2_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln131_fu_187_p2 <= std_logic_vector(unsigned(shl_ln131_fu_181_p2) - unsigned(pruned_voxel_count_fu_90));
    tmp_nbreadreq_fu_100_p3 <= (0=>(feature_data_stream_empty_n), others=>'-');
    tmp_s_nbreadreq_fu_108_p3 <= (0=>(write_addr_stream_empty_n), others=>'-');
    trunc_ln_fu_210_p4 <= add_ln131_fu_205_p2(63 downto 2);

    write_addr_stream_blk_n_assign_proc : process(write_addr_stream_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, tmp_reg_282, tmp_s_reg_286, ap_block_pp0_stage1_grp2, ap_block_pp0_stage1_subdone_grp2_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_s_reg_286 = ap_const_lv1_1) and (tmp_reg_282 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp2) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            write_addr_stream_blk_n <= write_addr_stream_empty_n;
        else 
            write_addr_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    write_addr_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_predicate_op43_read_state3, ap_block_pp0_stage1_11001_grp2)
    begin
        if (((ap_predicate_op43_read_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            write_addr_stream_read <= ap_const_logic_1;
        else 
            write_addr_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln131_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_193_p3),64));
end behav;

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ocnn6_net_8_layer_pipeline_ocnn6_final_layer_output_reconstruction_streaming (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer_pipeline_streams_8_dout,
        layer_pipeline_streams_8_empty_n,
        layer_pipeline_streams_8_read,
        layer_pipeline_streams_8_num_data_valid,
        layer_pipeline_streams_8_fifo_cap,
        m_axi_gmem_output_0_AWVALID,
        m_axi_gmem_output_0_AWREADY,
        m_axi_gmem_output_0_AWADDR,
        m_axi_gmem_output_0_AWID,
        m_axi_gmem_output_0_AWLEN,
        m_axi_gmem_output_0_AWSIZE,
        m_axi_gmem_output_0_AWBURST,
        m_axi_gmem_output_0_AWLOCK,
        m_axi_gmem_output_0_AWCACHE,
        m_axi_gmem_output_0_AWPROT,
        m_axi_gmem_output_0_AWQOS,
        m_axi_gmem_output_0_AWREGION,
        m_axi_gmem_output_0_AWUSER,
        m_axi_gmem_output_0_WVALID,
        m_axi_gmem_output_0_WREADY,
        m_axi_gmem_output_0_WDATA,
        m_axi_gmem_output_0_WSTRB,
        m_axi_gmem_output_0_WLAST,
        m_axi_gmem_output_0_WID,
        m_axi_gmem_output_0_WUSER,
        m_axi_gmem_output_0_ARVALID,
        m_axi_gmem_output_0_ARREADY,
        m_axi_gmem_output_0_ARADDR,
        m_axi_gmem_output_0_ARID,
        m_axi_gmem_output_0_ARLEN,
        m_axi_gmem_output_0_ARSIZE,
        m_axi_gmem_output_0_ARBURST,
        m_axi_gmem_output_0_ARLOCK,
        m_axi_gmem_output_0_ARCACHE,
        m_axi_gmem_output_0_ARPROT,
        m_axi_gmem_output_0_ARQOS,
        m_axi_gmem_output_0_ARREGION,
        m_axi_gmem_output_0_ARUSER,
        m_axi_gmem_output_0_RVALID,
        m_axi_gmem_output_0_RREADY,
        m_axi_gmem_output_0_RDATA,
        m_axi_gmem_output_0_RLAST,
        m_axi_gmem_output_0_RID,
        m_axi_gmem_output_0_RFIFONUM,
        m_axi_gmem_output_0_RUSER,
        m_axi_gmem_output_0_RRESP,
        m_axi_gmem_output_0_BVALID,
        m_axi_gmem_output_0_BREADY,
        m_axi_gmem_output_0_BRESP,
        m_axi_gmem_output_0_BID,
        m_axi_gmem_output_0_BUSER,
        full_cubic_output_dout,
        full_cubic_output_empty_n,
        full_cubic_output_read,
        full_cubic_output_num_data_valid,
        full_cubic_output_fifo_cap
);

parameter    ap_ST_fsm_state1 = 41'd1;
parameter    ap_ST_fsm_state2 = 41'd2;
parameter    ap_ST_fsm_pp0_stage0 = 41'd4;
parameter    ap_ST_fsm_state5 = 41'd8;
parameter    ap_ST_fsm_state6 = 41'd16;
parameter    ap_ST_fsm_state7 = 41'd32;
parameter    ap_ST_fsm_state8 = 41'd64;
parameter    ap_ST_fsm_state9 = 41'd128;
parameter    ap_ST_fsm_pp1_stage0 = 41'd256;
parameter    ap_ST_fsm_pp1_stage1 = 41'd512;
parameter    ap_ST_fsm_pp1_stage2 = 41'd1024;
parameter    ap_ST_fsm_pp1_stage3 = 41'd2048;
parameter    ap_ST_fsm_pp1_stage4 = 41'd4096;
parameter    ap_ST_fsm_pp1_stage5 = 41'd8192;
parameter    ap_ST_fsm_pp1_stage6 = 41'd16384;
parameter    ap_ST_fsm_pp1_stage7 = 41'd32768;
parameter    ap_ST_fsm_pp1_stage8 = 41'd65536;
parameter    ap_ST_fsm_pp1_stage9 = 41'd131072;
parameter    ap_ST_fsm_pp1_stage10 = 41'd262144;
parameter    ap_ST_fsm_pp1_stage11 = 41'd524288;
parameter    ap_ST_fsm_pp1_stage12 = 41'd1048576;
parameter    ap_ST_fsm_pp1_stage13 = 41'd2097152;
parameter    ap_ST_fsm_pp1_stage14 = 41'd4194304;
parameter    ap_ST_fsm_pp1_stage15 = 41'd8388608;
parameter    ap_ST_fsm_pp1_stage16 = 41'd16777216;
parameter    ap_ST_fsm_pp1_stage17 = 41'd33554432;
parameter    ap_ST_fsm_pp1_stage18 = 41'd67108864;
parameter    ap_ST_fsm_pp1_stage19 = 41'd134217728;
parameter    ap_ST_fsm_pp1_stage20 = 41'd268435456;
parameter    ap_ST_fsm_pp1_stage21 = 41'd536870912;
parameter    ap_ST_fsm_pp1_stage22 = 41'd1073741824;
parameter    ap_ST_fsm_pp1_stage23 = 41'd2147483648;
parameter    ap_ST_fsm_pp1_stage24 = 41'd4294967296;
parameter    ap_ST_fsm_pp1_stage25 = 41'd8589934592;
parameter    ap_ST_fsm_pp1_stage26 = 41'd17179869184;
parameter    ap_ST_fsm_pp1_stage27 = 41'd34359738368;
parameter    ap_ST_fsm_pp1_stage28 = 41'd68719476736;
parameter    ap_ST_fsm_pp1_stage29 = 41'd137438953472;
parameter    ap_ST_fsm_pp1_stage30 = 41'd274877906944;
parameter    ap_ST_fsm_pp1_stage31 = 41'd549755813888;
parameter    ap_ST_fsm_state51 = 41'd1099511627776;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1084:0] layer_pipeline_streams_8_dout;
input   layer_pipeline_streams_8_empty_n;
output   layer_pipeline_streams_8_read;
input  [10:0] layer_pipeline_streams_8_num_data_valid;
input  [10:0] layer_pipeline_streams_8_fifo_cap;
output   m_axi_gmem_output_0_AWVALID;
input   m_axi_gmem_output_0_AWREADY;
output  [63:0] m_axi_gmem_output_0_AWADDR;
output  [0:0] m_axi_gmem_output_0_AWID;
output  [31:0] m_axi_gmem_output_0_AWLEN;
output  [2:0] m_axi_gmem_output_0_AWSIZE;
output  [1:0] m_axi_gmem_output_0_AWBURST;
output  [1:0] m_axi_gmem_output_0_AWLOCK;
output  [3:0] m_axi_gmem_output_0_AWCACHE;
output  [2:0] m_axi_gmem_output_0_AWPROT;
output  [3:0] m_axi_gmem_output_0_AWQOS;
output  [3:0] m_axi_gmem_output_0_AWREGION;
output  [0:0] m_axi_gmem_output_0_AWUSER;
output   m_axi_gmem_output_0_WVALID;
input   m_axi_gmem_output_0_WREADY;
output  [31:0] m_axi_gmem_output_0_WDATA;
output  [3:0] m_axi_gmem_output_0_WSTRB;
output   m_axi_gmem_output_0_WLAST;
output  [0:0] m_axi_gmem_output_0_WID;
output  [0:0] m_axi_gmem_output_0_WUSER;
output   m_axi_gmem_output_0_ARVALID;
input   m_axi_gmem_output_0_ARREADY;
output  [63:0] m_axi_gmem_output_0_ARADDR;
output  [0:0] m_axi_gmem_output_0_ARID;
output  [31:0] m_axi_gmem_output_0_ARLEN;
output  [2:0] m_axi_gmem_output_0_ARSIZE;
output  [1:0] m_axi_gmem_output_0_ARBURST;
output  [1:0] m_axi_gmem_output_0_ARLOCK;
output  [3:0] m_axi_gmem_output_0_ARCACHE;
output  [2:0] m_axi_gmem_output_0_ARPROT;
output  [3:0] m_axi_gmem_output_0_ARQOS;
output  [3:0] m_axi_gmem_output_0_ARREGION;
output  [0:0] m_axi_gmem_output_0_ARUSER;
input   m_axi_gmem_output_0_RVALID;
output   m_axi_gmem_output_0_RREADY;
input  [31:0] m_axi_gmem_output_0_RDATA;
input   m_axi_gmem_output_0_RLAST;
input  [0:0] m_axi_gmem_output_0_RID;
input  [8:0] m_axi_gmem_output_0_RFIFONUM;
input  [0:0] m_axi_gmem_output_0_RUSER;
input  [1:0] m_axi_gmem_output_0_RRESP;
input   m_axi_gmem_output_0_BVALID;
output   m_axi_gmem_output_0_BREADY;
input  [1:0] m_axi_gmem_output_0_BRESP;
input  [0:0] m_axi_gmem_output_0_BID;
input  [0:0] m_axi_gmem_output_0_BUSER;
input  [63:0] full_cubic_output_dout;
input   full_cubic_output_empty_n;
output   full_cubic_output_read;
input  [10:0] full_cubic_output_num_data_valid;
input  [10:0] full_cubic_output_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer_pipeline_streams_8_read;
reg m_axi_gmem_output_0_AWVALID;
reg[63:0] m_axi_gmem_output_0_AWADDR;
reg[31:0] m_axi_gmem_output_0_AWLEN;
reg m_axi_gmem_output_0_WVALID;
reg[31:0] m_axi_gmem_output_0_WDATA;
reg m_axi_gmem_output_0_BREADY;
reg full_cubic_output_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [40:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    layer_pipeline_streams_8_blk_n;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
reg    ap_enable_reg_pp1_iter0_reg;
wire    ap_block_pp1_stage1_grp2;
reg   [0:0] icmp_ln609_reg_1034;
reg   [0:0] tmp_reg_1038;
reg    gmem_output_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    gmem_output_blk_n_W;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_grp1;
reg    gmem_output_blk_n_B;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3_grp3;
reg    ap_block_pp1_stage3_subdone_grp3_done_reg;
reg    ap_block_pp1_stage3_subdone_grp3;
reg    ap_block_pp1_stage3_subdone;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4_grp4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5_grp5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6_grp6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7_grp7;
wire    ap_CS_fsm_pp1_stage8;
wire    ap_block_pp1_stage8_grp8;
reg    ap_block_pp1_stage8_subdone_grp8_done_reg;
reg    ap_block_pp1_stage8_subdone_grp8;
reg    ap_block_pp1_stage8_subdone;
wire    ap_CS_fsm_pp1_stage9;
wire    ap_block_pp1_stage9_grp9;
wire    ap_CS_fsm_pp1_stage10;
wire    ap_block_pp1_stage10_grp10;
wire    ap_CS_fsm_pp1_stage11;
wire    ap_block_pp1_stage11_grp11;
wire    ap_CS_fsm_pp1_stage12;
wire    ap_block_pp1_stage12_grp12;
wire    ap_CS_fsm_pp1_stage13;
wire    ap_block_pp1_stage13_grp13;
wire    ap_CS_fsm_pp1_stage14;
wire    ap_block_pp1_stage14_grp14;
wire    ap_CS_fsm_pp1_stage15;
wire    ap_block_pp1_stage15_grp15;
wire    ap_CS_fsm_pp1_stage16;
wire    ap_block_pp1_stage16_grp16;
wire    ap_CS_fsm_pp1_stage17;
wire    ap_block_pp1_stage17_grp17;
wire    ap_CS_fsm_pp1_stage18;
wire    ap_block_pp1_stage18_grp18;
wire    ap_CS_fsm_pp1_stage19;
wire    ap_block_pp1_stage19_grp19;
wire    ap_CS_fsm_pp1_stage20;
wire    ap_block_pp1_stage20_grp20;
wire    ap_CS_fsm_pp1_stage21;
wire    ap_block_pp1_stage21_grp21;
wire    ap_CS_fsm_pp1_stage22;
wire    ap_block_pp1_stage22_grp22;
wire    ap_CS_fsm_pp1_stage23;
wire    ap_block_pp1_stage23_grp23;
wire    ap_CS_fsm_pp1_stage24;
wire    ap_block_pp1_stage24_grp24;
wire    ap_CS_fsm_pp1_stage25;
wire    ap_block_pp1_stage25_grp25;
wire    ap_CS_fsm_pp1_stage26;
wire    ap_block_pp1_stage26_grp26;
wire    ap_CS_fsm_pp1_stage27;
wire    ap_block_pp1_stage27_grp27;
wire    ap_CS_fsm_pp1_stage28;
wire    ap_block_pp1_stage28_grp28;
wire    ap_CS_fsm_pp1_stage29;
wire    ap_block_pp1_stage29_grp29;
wire    ap_CS_fsm_pp1_stage30;
wire    ap_block_pp1_stage30_grp30;
wire    ap_CS_fsm_pp1_stage31;
wire    ap_block_pp1_stage31_grp31;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0_grp32;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2_grp34;
wire    ap_block_pp1_stage3_grp35;
reg    ap_block_pp1_stage3_subdone_grp35_done_reg;
reg    ap_block_pp1_stage3_subdone_grp35;
wire    ap_block_pp1_stage8_grp36;
reg    ap_block_pp1_stage8_subdone_grp36_done_reg;
reg    ap_block_pp1_stage8_subdone_grp36;
reg    full_cubic_output_blk_n;
reg   [63:0] full_cubic_output_1_reg_1013;
reg    ap_block_state1;
reg   [63:0] gmem_output_addr_reg_1018;
wire   [0:0] icmp_ln609_fu_594_p2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] tmp_nbreadreq_fu_263_p3;
reg   [31:0] output_voxel_features_reg_1042;
reg    ap_predicate_op91_read_state11;
reg    ap_block_state11_pp1_stage1_iter0_grp2;
reg    ap_block_pp1_stage1_11001_grp2;
reg   [31:0] output_voxel_features_9_reg_1047;
reg   [31:0] trunc_ln615_3_reg_1052;
reg   [31:0] trunc_ln615_4_reg_1057;
reg   [31:0] trunc_ln615_5_reg_1062;
reg   [31:0] trunc_ln615_6_reg_1067;
reg   [31:0] trunc_ln615_7_reg_1072;
reg   [31:0] trunc_ln615_8_reg_1077;
reg   [31:0] trunc_ln615_9_reg_1082;
reg   [31:0] trunc_ln615_s_reg_1087;
reg   [31:0] trunc_ln615_1_reg_1092;
reg   [31:0] trunc_ln615_2_reg_1097;
reg   [31:0] trunc_ln615_10_reg_1102;
reg   [31:0] trunc_ln615_11_reg_1107;
reg   [31:0] trunc_ln615_12_reg_1112;
reg   [31:0] trunc_ln615_13_reg_1117;
reg   [31:0] trunc_ln615_14_reg_1122;
reg   [31:0] trunc_ln615_15_reg_1127;
reg   [31:0] trunc_ln615_16_reg_1132;
reg   [31:0] trunc_ln615_17_reg_1137;
reg   [31:0] trunc_ln615_18_reg_1142;
reg   [31:0] trunc_ln615_19_reg_1147;
reg   [31:0] trunc_ln615_20_reg_1152;
reg   [31:0] trunc_ln615_21_reg_1157;
reg   [31:0] trunc_ln615_22_reg_1162;
reg   [31:0] trunc_ln615_23_reg_1167;
reg   [31:0] trunc_ln615_24_reg_1172;
reg   [31:0] trunc_ln615_25_reg_1177;
reg   [31:0] trunc_ln615_26_reg_1182;
reg   [31:0] trunc_ln615_27_reg_1187;
reg   [31:0] trunc_ln615_28_reg_1192;
reg   [31:0] trunc_ln615_28_reg_1192_pp1_iter1_reg;
reg   [31:0] trunc_ln615_29_reg_1197;
reg   [31:0] trunc_ln615_29_reg_1197_pp1_iter1_reg;
reg   [17:0] tmp_644_reg_1202;
reg   [63:0] gmem_output_addr_1_reg_1208;
reg    ap_block_pp1_stage2_11001_grp34;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln600_fu_569_p2;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp1_stage0_subdone;
reg    ap_predicate_tran10to51_state10;
reg    ap_condition_pp1_exit_iter0_state10;
reg    ap_predicate_op164_write_state41;
reg    ap_block_state41_io_grp31;
reg    ap_block_pp1_stage31_subdone;
reg    ap_predicate_op141_write_state18;
reg    ap_block_state18_io_grp8;
wire  signed [63:0] sext_ln600_fu_551_p1;
wire  signed [63:0] sext_ln626_fu_996_p1;
reg    ap_block_pp0_stage0_11001_grp1;
wire    ap_block_pp0_stage0_01001_grp1;
reg    ap_predicate_op136_writereq_state13;
reg    ap_block_state13_io_grp3;
reg    ap_block_pp1_stage3_11001_grp3;
reg    ap_block_pp1_stage8_11001_grp36;
reg    ap_predicate_op137_write_state14;
reg    ap_block_state14_io_grp4;
reg    ap_block_pp1_stage4_11001_grp4;
wire    ap_block_pp1_stage4_01001_grp4;
reg    ap_predicate_op138_write_state15;
reg    ap_block_state15_io_grp5;
reg    ap_block_pp1_stage5_11001_grp5;
wire    ap_block_pp1_stage5_01001_grp5;
reg    ap_predicate_op139_write_state16;
reg    ap_block_state16_io_grp6;
reg    ap_block_pp1_stage6_11001_grp6;
wire    ap_block_pp1_stage6_01001_grp6;
reg    ap_predicate_op140_write_state17;
reg    ap_block_state17_io_grp7;
reg    ap_block_pp1_stage7_11001_grp7;
wire    ap_block_pp1_stage7_01001_grp7;
reg    ap_block_pp1_stage8_11001_grp8;
wire    ap_block_pp1_stage8_01001_grp8;
reg    ap_predicate_op142_write_state19;
reg    ap_block_state19_io_grp9;
reg    ap_block_pp1_stage9_11001_grp9;
wire    ap_block_pp1_stage9_01001_grp9;
reg    ap_predicate_op143_write_state20;
reg    ap_block_state20_io_grp10;
reg    ap_block_pp1_stage10_11001_grp10;
wire    ap_block_pp1_stage10_01001_grp10;
reg    ap_predicate_op144_write_state21;
reg    ap_block_state21_io_grp11;
reg    ap_block_pp1_stage11_11001_grp11;
wire    ap_block_pp1_stage11_01001_grp11;
reg    ap_predicate_op145_write_state22;
reg    ap_block_state22_io_grp12;
reg    ap_block_pp1_stage12_11001_grp12;
wire    ap_block_pp1_stage12_01001_grp12;
reg    ap_predicate_op146_write_state23;
reg    ap_block_state23_io_grp13;
reg    ap_block_pp1_stage13_11001_grp13;
wire    ap_block_pp1_stage13_01001_grp13;
reg    ap_predicate_op147_write_state24;
reg    ap_block_state24_io_grp14;
reg    ap_block_pp1_stage14_11001_grp14;
wire    ap_block_pp1_stage14_01001_grp14;
reg    ap_predicate_op148_write_state25;
reg    ap_block_state25_io_grp15;
reg    ap_block_pp1_stage15_11001_grp15;
wire    ap_block_pp1_stage15_01001_grp15;
reg    ap_predicate_op149_write_state26;
reg    ap_block_state26_io_grp16;
reg    ap_block_pp1_stage16_11001_grp16;
wire    ap_block_pp1_stage16_01001_grp16;
reg    ap_predicate_op150_write_state27;
reg    ap_block_state27_io_grp17;
reg    ap_block_pp1_stage17_11001_grp17;
wire    ap_block_pp1_stage17_01001_grp17;
reg    ap_predicate_op151_write_state28;
reg    ap_block_state28_io_grp18;
reg    ap_block_pp1_stage18_11001_grp18;
wire    ap_block_pp1_stage18_01001_grp18;
reg    ap_predicate_op152_write_state29;
reg    ap_block_state29_io_grp19;
reg    ap_block_pp1_stage19_11001_grp19;
wire    ap_block_pp1_stage19_01001_grp19;
reg    ap_predicate_op153_write_state30;
reg    ap_block_state30_io_grp20;
reg    ap_block_pp1_stage20_11001_grp20;
wire    ap_block_pp1_stage20_01001_grp20;
reg    ap_predicate_op154_write_state31;
reg    ap_block_state31_io_grp21;
reg    ap_block_pp1_stage21_11001_grp21;
wire    ap_block_pp1_stage21_01001_grp21;
reg    ap_predicate_op155_write_state32;
reg    ap_block_state32_io_grp22;
reg    ap_block_pp1_stage22_11001_grp22;
wire    ap_block_pp1_stage22_01001_grp22;
reg    ap_predicate_op156_write_state33;
reg    ap_block_state33_io_grp23;
reg    ap_block_pp1_stage23_11001_grp23;
wire    ap_block_pp1_stage23_01001_grp23;
reg    ap_predicate_op157_write_state34;
reg    ap_block_state34_io_grp24;
reg    ap_block_pp1_stage24_11001_grp24;
wire    ap_block_pp1_stage24_01001_grp24;
reg    ap_predicate_op158_write_state35;
reg    ap_block_state35_io_grp25;
reg    ap_block_pp1_stage25_11001_grp25;
wire    ap_block_pp1_stage25_01001_grp25;
reg    ap_predicate_op159_write_state36;
reg    ap_block_state36_io_grp26;
reg    ap_block_pp1_stage26_11001_grp26;
wire    ap_block_pp1_stage26_01001_grp26;
reg    ap_predicate_op160_write_state37;
reg    ap_block_state37_io_grp27;
reg    ap_block_pp1_stage27_11001_grp27;
wire    ap_block_pp1_stage27_01001_grp27;
reg    ap_predicate_op161_write_state38;
reg    ap_block_state38_io_grp28;
reg    ap_block_pp1_stage28_11001_grp28;
wire    ap_block_pp1_stage28_01001_grp28;
reg    ap_predicate_op162_write_state39;
reg    ap_block_state39_io_grp29;
reg    ap_block_pp1_stage29_11001_grp29;
wire    ap_block_pp1_stage29_01001_grp29;
reg    ap_predicate_op163_write_state40;
reg    ap_block_state40_io_grp30;
reg    ap_block_pp1_stage30_11001_grp30;
wire    ap_block_pp1_stage30_01001_grp30;
reg    ap_block_pp1_stage31_11001_grp31;
wire    ap_block_pp1_stage31_01001_grp31;
reg    ap_block_pp1_stage0_11001_grp32;
wire    ap_block_pp1_stage0_01001_grp32;
reg    ap_block_pp1_stage1_01001_grp2;
wire    ap_block_pp1_stage2_01001_grp34;
reg    ap_block_pp1_stage3_11001_grp35;
wire    ap_block_pp1_stage3_01001_grp35;
reg   [23:0] i_fu_232;
wire   [23:0] add_ln600_fu_575_p2;
reg    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [13:0] v_fu_236;
wire   [13:0] v_2_fu_600_p2;
wire    ap_CS_fsm_state5;
wire    ap_block_pp1_stage0;
wire   [61:0] trunc_ln_fu_541_p4;
wire   [22:0] tmp_645_fu_941_p3;
wire   [20:0] tmp_646_fu_952_p3;
wire   [23:0] p_shl_fu_948_p1;
wire   [23:0] p_shl6_fu_959_p1;
wire   [23:0] full_cubic_addr_fu_963_p2;
wire   [25:0] shl_ln_fu_969_p3;
wire   [63:0] zext_ln628_fu_977_p1;
wire   [63:0] add_ln628_fu_981_p2;
wire   [61:0] trunc_ln1_fu_986_p4;
wire    ap_CS_fsm_state51;
reg   [40:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state51_blk;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_block_pp1_stage6_subdone;
reg    ap_block_pp1_stage7_subdone;
reg    ap_block_pp1_stage9_subdone;
reg    ap_block_pp1_stage10_subdone;
reg    ap_block_pp1_stage11_subdone;
reg    ap_block_pp1_stage12_subdone;
reg    ap_block_pp1_stage13_subdone;
reg    ap_block_pp1_stage14_subdone;
reg    ap_block_pp1_stage15_subdone;
reg    ap_block_pp1_stage16_subdone;
reg    ap_block_pp1_stage17_subdone;
reg    ap_block_pp1_stage18_subdone;
reg    ap_block_pp1_stage19_subdone;
reg    ap_block_pp1_stage20_subdone;
reg    ap_block_pp1_stage21_subdone;
reg    ap_block_pp1_stage22_subdone;
reg    ap_block_pp1_stage23_subdone;
reg    ap_block_pp1_stage24_subdone;
reg    ap_block_pp1_stage25_subdone;
reg    ap_block_pp1_stage26_subdone;
reg    ap_block_pp1_stage27_subdone;
reg    ap_block_pp1_stage28_subdone;
reg    ap_block_pp1_stage29_subdone;
reg    ap_block_pp1_stage30_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 41'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_block_pp1_stage3_subdone_grp3_done_reg = 1'b0;
#0 ap_block_pp1_stage8_subdone_grp8_done_reg = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_block_pp1_stage3_subdone_grp35_done_reg = 1'b0;
#0 ap_block_pp1_stage8_subdone_grp36_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 i_fu_232 = 24'd0;
#0 v_fu_236 = 14'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp1_stage3_subdone_grp35_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage3)) begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_block_pp1_stage3_subdone_grp35_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp1_stage3_subdone_grp35)) begin
                ap_block_pp1_stage3_subdone_grp35_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp1_stage3_subdone_grp3_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage3)) begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_block_pp1_stage3_subdone_grp3_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp1_stage3_subdone_grp3)) begin
                ap_block_pp1_stage3_subdone_grp3_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp1_stage8_subdone_grp36_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage8)) begin
            if ((1'b0 == ap_block_pp1_stage8_subdone)) begin
                ap_block_pp1_stage8_subdone_grp36_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp1_stage8_subdone_grp36)) begin
                ap_block_pp1_stage8_subdone_grp36_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp1_stage8_subdone_grp8_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp1_stage8)) begin
            if ((1'b0 == ap_block_pp1_stage8_subdone)) begin
                ap_block_pp1_stage8_subdone_grp8_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp1_stage8_subdone_grp8)) begin
                ap_block_pp1_stage8_subdone_grp8_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state51)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((m_axi_gmem_output_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((m_axi_gmem_output_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state9) & (m_axi_gmem_output_0_BVALID == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state9) & (m_axi_gmem_output_0_BVALID == 1'b1))) begin
            ap_enable_reg_pp1_iter0_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp1_stage31) & (1'b0 == ap_block_pp1_stage31_subdone)) | ((1'b1 == ap_CS_fsm_pp1_stage8) & (1'b0 == ap_block_pp1_stage8_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state9) & (m_axi_gmem_output_0_BVALID == 1'b1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        i_fu_232 <= 24'd0;
    end else if (((icmp_ln600_fu_569_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_232 <= add_ln600_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v_fu_236 <= 14'd0;
    end else if (((tmp_nbreadreq_fu_263_p3 == 1'd1) & (icmp_ln609_fu_594_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        v_fu_236 <= v_2_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        full_cubic_output_1_reg_1013 <= full_cubic_output_dout;
        gmem_output_addr_reg_1018 <= sext_ln600_fu_551_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001_grp34))) begin
        gmem_output_addr_1_reg_1208 <= sext_ln626_fu_996_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln609_reg_1034 <= icmp_ln609_fu_594_p2;
        tmp_reg_1038 <= tmp_nbreadreq_fu_263_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001_grp2))) begin
        output_voxel_features_9_reg_1047 <= {{layer_pipeline_streams_8_dout[64:33]}};
        output_voxel_features_reg_1042 <= {{layer_pipeline_streams_8_dout[32:1]}};
        tmp_644_reg_1202 <= {{layer_pipeline_streams_8_dout[1042:1025]}};
        trunc_ln615_10_reg_1102 <= {{layer_pipeline_streams_8_dout[416:385]}};
        trunc_ln615_11_reg_1107 <= {{layer_pipeline_streams_8_dout[448:417]}};
        trunc_ln615_12_reg_1112 <= {{layer_pipeline_streams_8_dout[480:449]}};
        trunc_ln615_13_reg_1117 <= {{layer_pipeline_streams_8_dout[512:481]}};
        trunc_ln615_14_reg_1122 <= {{layer_pipeline_streams_8_dout[544:513]}};
        trunc_ln615_15_reg_1127 <= {{layer_pipeline_streams_8_dout[576:545]}};
        trunc_ln615_16_reg_1132 <= {{layer_pipeline_streams_8_dout[608:577]}};
        trunc_ln615_17_reg_1137 <= {{layer_pipeline_streams_8_dout[640:609]}};
        trunc_ln615_18_reg_1142 <= {{layer_pipeline_streams_8_dout[672:641]}};
        trunc_ln615_19_reg_1147 <= {{layer_pipeline_streams_8_dout[704:673]}};
        trunc_ln615_1_reg_1092 <= {{layer_pipeline_streams_8_dout[352:321]}};
        trunc_ln615_20_reg_1152 <= {{layer_pipeline_streams_8_dout[736:705]}};
        trunc_ln615_21_reg_1157 <= {{layer_pipeline_streams_8_dout[768:737]}};
        trunc_ln615_22_reg_1162 <= {{layer_pipeline_streams_8_dout[800:769]}};
        trunc_ln615_23_reg_1167 <= {{layer_pipeline_streams_8_dout[832:801]}};
        trunc_ln615_24_reg_1172 <= {{layer_pipeline_streams_8_dout[864:833]}};
        trunc_ln615_25_reg_1177 <= {{layer_pipeline_streams_8_dout[896:865]}};
        trunc_ln615_26_reg_1182 <= {{layer_pipeline_streams_8_dout[928:897]}};
        trunc_ln615_27_reg_1187 <= {{layer_pipeline_streams_8_dout[960:929]}};
        trunc_ln615_28_reg_1192 <= {{layer_pipeline_streams_8_dout[992:961]}};
        trunc_ln615_28_reg_1192_pp1_iter1_reg <= trunc_ln615_28_reg_1192;
        trunc_ln615_29_reg_1197 <= {{layer_pipeline_streams_8_dout[1024:993]}};
        trunc_ln615_29_reg_1197_pp1_iter1_reg <= trunc_ln615_29_reg_1197;
        trunc_ln615_2_reg_1097 <= {{layer_pipeline_streams_8_dout[384:353]}};
        trunc_ln615_3_reg_1052 <= {{layer_pipeline_streams_8_dout[96:65]}};
        trunc_ln615_4_reg_1057 <= {{layer_pipeline_streams_8_dout[128:97]}};
        trunc_ln615_5_reg_1062 <= {{layer_pipeline_streams_8_dout[160:129]}};
        trunc_ln615_6_reg_1067 <= {{layer_pipeline_streams_8_dout[192:161]}};
        trunc_ln615_7_reg_1072 <= {{layer_pipeline_streams_8_dout[224:193]}};
        trunc_ln615_8_reg_1077 <= {{layer_pipeline_streams_8_dout[256:225]}};
        trunc_ln615_9_reg_1082 <= {{layer_pipeline_streams_8_dout[288:257]}};
        trunc_ln615_s_reg_1087 <= {{layer_pipeline_streams_8_dout[320:289]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_output_0_AWREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_output_0_BVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln600_fu_569_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_predicate_tran10to51_state10 == 1'b1)) begin
        ap_condition_pp1_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        full_cubic_output_blk_n = full_cubic_output_empty_n;
    end else begin
        full_cubic_output_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        full_cubic_output_read = 1'b1;
    end else begin
        full_cubic_output_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage3_subdone_grp3_done_reg) & (1'b0 == ap_block_pp1_stage3_grp3) & (ap_enable_reg_pp1_iter0_reg == 1'b1)))) begin
        gmem_output_blk_n_AW = m_axi_gmem_output_0_AWREADY;
    end else begin
        gmem_output_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage8) & (1'b0 == ap_block_pp1_stage8_subdone_grp36_done_reg) & (1'b0 == ap_block_pp1_stage8_grp36)))) begin
        gmem_output_blk_n_B = m_axi_gmem_output_0_BVALID;
    end else begin
        gmem_output_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_grp34)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_grp32)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_subdone_grp35_done_reg) & (1'b0 == ap_block_pp1_stage3_grp35)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_grp2)) | ((1'b1 == ap_CS_fsm_pp1_stage31) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage31_grp31) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage30) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage30_grp30) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage29) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage29_grp29) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage28) 
    & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage28_grp28) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage27) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage27_grp27) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage26) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage26_grp26) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage25) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage25_grp25) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage24) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage24_grp24) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage23) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage23_grp23) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage22) 
    & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage22_grp22) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage21) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage21_grp21) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage20) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage20_grp20) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage19) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage19_grp19) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage18) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage18_grp18) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage17) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage17_grp17) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage16) 
    & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage16_grp16) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage15) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage15_grp15) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage14) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage14_grp14) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage13) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage13_grp13) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage12) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage12_grp12) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage11) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage11_grp11) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage10) 
    & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage10_grp10) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage9) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage9_grp9) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage8) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage8_subdone_grp8_done_reg) & (1'b0 == ap_block_pp1_stage8_grp8) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage7) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage7_grp7) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage6) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage6_grp6) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage5) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage5_grp5) & (ap_enable_reg_pp1_iter0_reg 
    == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage4) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage4_grp4) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1)))) begin
        gmem_output_blk_n_W = m_axi_gmem_output_0_WREADY;
    end else begin
        gmem_output_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0) & (1'b0 == ap_block_pp1_stage1_grp2) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        layer_pipeline_streams_8_blk_n = layer_pipeline_streams_8_empty_n;
    end else begin
        layer_pipeline_streams_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op91_read_state11 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001_grp2) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        layer_pipeline_streams_8_read = 1'b1;
    end else begin
        layer_pipeline_streams_8_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op136_writereq_state13 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001_grp3) & (1'b0 == ap_block_pp1_stage3_subdone_grp3_done_reg) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_AWADDR = gmem_output_addr_1_reg_1208;
    end else if (((m_axi_gmem_output_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_output_0_AWADDR = gmem_output_addr_reg_1018;
    end else begin
        m_axi_gmem_output_0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((ap_predicate_op136_writereq_state13 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001_grp3) & (1'b0 == ap_block_pp1_stage3_subdone_grp3_done_reg) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_AWLEN = 64'd32;
    end else if (((m_axi_gmem_output_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_output_0_AWLEN = 64'd10485760;
    end else begin
        m_axi_gmem_output_0_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op136_writereq_state13 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001_grp3) & (1'b0 == ap_block_pp1_stage3_subdone_grp3_done_reg) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((m_axi_gmem_output_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        m_axi_gmem_output_0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_output_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage8) & (1'b0 == ap_block_pp1_stage8_11001_grp36) & (1'b0 == ap_block_pp1_stage8_subdone_grp36_done_reg)) | ((1'b1 == ap_CS_fsm_state9) & (m_axi_gmem_output_0_BVALID == 1'b1)))) begin
        m_axi_gmem_output_0_BREADY = 1'b1;
    end else begin
        m_axi_gmem_output_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_subdone_grp35_done_reg) & (1'b0 == ap_block_pp1_stage3_01001_grp35))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_29_reg_1197_pp1_iter1_reg;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_01001_grp34))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_28_reg_1192_pp1_iter1_reg;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_01001_grp2))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_27_reg_1187;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_01001_grp32))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_26_reg_1182;
    end else if (((ap_predicate_op164_write_state41 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage31) & (1'b0 == ap_block_pp1_stage31_01001_grp31) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_25_reg_1177;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage30) & (1'b0 == ap_block_pp1_stage30_01001_grp30) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op163_write_state40 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_24_reg_1172;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage29) & (1'b0 == ap_block_pp1_stage29_01001_grp29) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op162_write_state39 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_23_reg_1167;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage28) & (1'b0 == ap_block_pp1_stage28_01001_grp28) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op161_write_state38 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_22_reg_1162;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage27) & (1'b0 == ap_block_pp1_stage27_01001_grp27) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op160_write_state37 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_21_reg_1157;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage26) & (1'b0 == ap_block_pp1_stage26_01001_grp26) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op159_write_state36 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_20_reg_1152;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage25) & (1'b0 == ap_block_pp1_stage25_01001_grp25) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op158_write_state35 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_19_reg_1147;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage24) & (1'b0 == ap_block_pp1_stage24_01001_grp24) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op157_write_state34 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_18_reg_1142;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage23) & (1'b0 == ap_block_pp1_stage23_01001_grp23) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op156_write_state33 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_17_reg_1137;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage22) & (1'b0 == ap_block_pp1_stage22_01001_grp22) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op155_write_state32 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_16_reg_1132;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage21) & (1'b0 == ap_block_pp1_stage21_01001_grp21) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op154_write_state31 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_15_reg_1127;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage20) & (1'b0 == ap_block_pp1_stage20_01001_grp20) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op153_write_state30 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_14_reg_1122;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage19) & (1'b0 == ap_block_pp1_stage19_01001_grp19) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op152_write_state29 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_13_reg_1117;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage18) & (1'b0 == ap_block_pp1_stage18_01001_grp18) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op151_write_state28 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_12_reg_1112;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage17) & (1'b0 == ap_block_pp1_stage17_01001_grp17) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op150_write_state27 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_11_reg_1107;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage16) & (1'b0 == ap_block_pp1_stage16_01001_grp16) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op149_write_state26 == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_10_reg_1102;
    end else if (((ap_predicate_op148_write_state25 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage15) & (1'b0 == ap_block_pp1_stage15_01001_grp15) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_2_reg_1097;
    end else if (((ap_predicate_op147_write_state24 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage14) & (1'b0 == ap_block_pp1_stage14_01001_grp14) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_1_reg_1092;
    end else if (((ap_predicate_op146_write_state23 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage13) & (1'b0 == ap_block_pp1_stage13_01001_grp13) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_s_reg_1087;
    end else if (((ap_predicate_op145_write_state22 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage12) & (1'b0 == ap_block_pp1_stage12_01001_grp12) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_9_reg_1082;
    end else if (((ap_predicate_op144_write_state21 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage11) & (1'b0 == ap_block_pp1_stage11_01001_grp11) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_8_reg_1077;
    end else if (((ap_predicate_op143_write_state20 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage10) & (1'b0 == ap_block_pp1_stage10_01001_grp10) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_7_reg_1072;
    end else if (((ap_predicate_op142_write_state19 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage9) & (1'b0 == ap_block_pp1_stage9_01001_grp9) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_6_reg_1067;
    end else if (((ap_predicate_op141_write_state18 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage8) & (1'b0 == ap_block_pp1_stage8_01001_grp8) & (1'b0 == ap_block_pp1_stage8_subdone_grp8_done_reg) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_5_reg_1062;
    end else if (((ap_predicate_op140_write_state17 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_01001_grp7) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_4_reg_1057;
    end else if (((ap_predicate_op139_write_state16 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_01001_grp6) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = trunc_ln615_3_reg_1052;
    end else if (((ap_predicate_op138_write_state15 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_01001_grp5) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = output_voxel_features_9_reg_1047;
    end else if (((ap_predicate_op137_write_state14 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_01001_grp4) & (ap_enable_reg_pp1_iter0_reg == 1'b1))) begin
        m_axi_gmem_output_0_WDATA = output_voxel_features_reg_1042;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001_grp1))) begin
        m_axi_gmem_output_0_WDATA = 32'd0;
    end else begin
        m_axi_gmem_output_0_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op147_write_state24 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage14) & (1'b0 == ap_block_pp1_stage14_11001_grp14) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_predicate_op146_write_state23 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage13) & (1'b0 == ap_block_pp1_stage13_11001_grp13) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_predicate_op145_write_state22 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage12) & (1'b0 == ap_block_pp1_stage12_11001_grp12) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_predicate_op144_write_state21 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage11) & (1'b0 == ap_block_pp1_stage11_11001_grp11) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_predicate_op143_write_state20 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage10) & (1'b0 == ap_block_pp1_stage10_11001_grp10) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_predicate_op142_write_state19 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage9) & (1'b0 == ap_block_pp1_stage9_11001_grp9) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_predicate_op140_write_state17 
    == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage7) & (1'b0 == ap_block_pp1_stage7_11001_grp7) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_predicate_op139_write_state16 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage6) & (1'b0 == ap_block_pp1_stage6_11001_grp6) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_predicate_op138_write_state15 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage5) & (1'b0 == ap_block_pp1_stage5_11001_grp5) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_predicate_op137_write_state14 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4) & (1'b0 == ap_block_pp1_stage4_11001_grp4) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_predicate_op141_write_state18 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage8) & (1'b0 == ap_block_pp1_stage8_11001_grp8) & (1'b0 == ap_block_pp1_stage8_subdone_grp8_done_reg) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_predicate_op164_write_state41 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage31) & (1'b0 == ap_block_pp1_stage31_11001_grp31) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_enable_reg_pp1_iter1 
    == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001_grp34)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001_grp32)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_subdone_grp35_done_reg) & (1'b0 == ap_block_pp1_stage3_11001_grp35)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001_grp2)) | ((1'b1 == ap_CS_fsm_pp1_stage30) & (1'b0 == ap_block_pp1_stage30_11001_grp30) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op163_write_state40 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage29) & (1'b0 == ap_block_pp1_stage29_11001_grp29) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op162_write_state39 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage28) & (1'b0 == ap_block_pp1_stage28_11001_grp28) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op161_write_state38 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage27) & (1'b0 
    == ap_block_pp1_stage27_11001_grp27) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op160_write_state37 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage26) & (1'b0 == ap_block_pp1_stage26_11001_grp26) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op159_write_state36 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage25) & (1'b0 == ap_block_pp1_stage25_11001_grp25) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op158_write_state35 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage24) & (1'b0 == ap_block_pp1_stage24_11001_grp24) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op157_write_state34 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage23) & (1'b0 == ap_block_pp1_stage23_11001_grp23) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op156_write_state33 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage22) & (1'b0 == ap_block_pp1_stage22_11001_grp22) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op155_write_state32 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage21) & (1'b0 == ap_block_pp1_stage21_11001_grp21) 
    & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op154_write_state31 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage20) & (1'b0 == ap_block_pp1_stage20_11001_grp20) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op153_write_state30 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage19) & (1'b0 == ap_block_pp1_stage19_11001_grp19) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op152_write_state29 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage18) & (1'b0 == ap_block_pp1_stage18_11001_grp18) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op151_write_state28 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage17) & (1'b0 == ap_block_pp1_stage17_11001_grp17) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op150_write_state27 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage16) & (1'b0 == ap_block_pp1_stage16_11001_grp16) & (ap_enable_reg_pp1_iter0_reg == 1'b1) & (ap_predicate_op149_write_state26 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1)) 
    | ((ap_predicate_op148_write_state25 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage15) & (1'b0 == ap_block_pp1_stage15_11001_grp15) & (ap_enable_reg_pp1_iter0_reg == 1'b1)))) begin
        m_axi_gmem_output_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem_output_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_gmem_output_0_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln600_fu_569_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln600_fu_569_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (m_axi_gmem_output_0_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_predicate_tran10to51_state10 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((ap_predicate_tran10to51_state10 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_pp1_stage8 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage8) & (1'b0 == ap_block_pp1_stage8_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0)) & (1'b0 == ap_block_pp1_stage8_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage8) & (1'b0 == ap_block_pp1_stage8_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end
        end
        ap_ST_fsm_pp1_stage9 : begin
            if ((1'b0 == ap_block_pp1_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end
        end
        ap_ST_fsm_pp1_stage10 : begin
            if ((1'b0 == ap_block_pp1_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end
        end
        ap_ST_fsm_pp1_stage11 : begin
            if ((1'b0 == ap_block_pp1_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end
        end
        ap_ST_fsm_pp1_stage12 : begin
            if ((1'b0 == ap_block_pp1_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            end
        end
        ap_ST_fsm_pp1_stage13 : begin
            if ((1'b0 == ap_block_pp1_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage13;
            end
        end
        ap_ST_fsm_pp1_stage14 : begin
            if ((1'b0 == ap_block_pp1_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage14;
            end
        end
        ap_ST_fsm_pp1_stage15 : begin
            if ((1'b0 == ap_block_pp1_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage15;
            end
        end
        ap_ST_fsm_pp1_stage16 : begin
            if ((1'b0 == ap_block_pp1_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage16;
            end
        end
        ap_ST_fsm_pp1_stage17 : begin
            if ((1'b0 == ap_block_pp1_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage17;
            end
        end
        ap_ST_fsm_pp1_stage18 : begin
            if ((1'b0 == ap_block_pp1_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage18;
            end
        end
        ap_ST_fsm_pp1_stage19 : begin
            if ((1'b0 == ap_block_pp1_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage19;
            end
        end
        ap_ST_fsm_pp1_stage20 : begin
            if ((1'b0 == ap_block_pp1_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage20;
            end
        end
        ap_ST_fsm_pp1_stage21 : begin
            if ((1'b0 == ap_block_pp1_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage21;
            end
        end
        ap_ST_fsm_pp1_stage22 : begin
            if ((1'b0 == ap_block_pp1_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage22;
            end
        end
        ap_ST_fsm_pp1_stage23 : begin
            if ((1'b0 == ap_block_pp1_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage23;
            end
        end
        ap_ST_fsm_pp1_stage24 : begin
            if ((1'b0 == ap_block_pp1_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage24;
            end
        end
        ap_ST_fsm_pp1_stage25 : begin
            if ((1'b0 == ap_block_pp1_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage25;
            end
        end
        ap_ST_fsm_pp1_stage26 : begin
            if ((1'b0 == ap_block_pp1_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage26;
            end
        end
        ap_ST_fsm_pp1_stage27 : begin
            if ((1'b0 == ap_block_pp1_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage27;
            end
        end
        ap_ST_fsm_pp1_stage28 : begin
            if ((1'b0 == ap_block_pp1_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage28;
            end
        end
        ap_ST_fsm_pp1_stage29 : begin
            if ((1'b0 == ap_block_pp1_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage29;
            end
        end
        ap_ST_fsm_pp1_stage30 : begin
            if ((1'b0 == ap_block_pp1_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage30;
            end
        end
        ap_ST_fsm_pp1_stage31 : begin
            if ((1'b0 == ap_block_pp1_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage31;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln600_fu_575_p2 = (i_fu_232 + 24'd1);

assign add_ln628_fu_981_p2 = (full_cubic_output_1_reg_1013 + zext_ln628_fu_977_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage10 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp1_stage11 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp1_stage12 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp1_stage13 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp1_stage14 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp1_stage15 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp1_stage16 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp1_stage17 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp1_stage18 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp1_stage19 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage20 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp1_stage21 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp1_stage22 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp1_stage23 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp1_stage24 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp1_stage25 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp1_stage26 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp1_stage27 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp1_stage28 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp1_stage29 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage30 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_pp1_stage31 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage8 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage9 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001_grp32 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001_grp32 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp1_stage0_grp32 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp1_stage10_01001_grp10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage10_11001_grp10 = ((1'b1 == ap_block_state20_io_grp10) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage10_grp10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage10_subdone = ((1'b1 == ap_block_state20_io_grp10) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage11_01001_grp11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage11_11001_grp11 = ((1'b1 == ap_block_state21_io_grp11) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage11_grp11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage11_subdone = ((1'b1 == ap_block_state21_io_grp11) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage12_01001_grp12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage12_11001_grp12 = ((1'b1 == ap_block_state22_io_grp12) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage12_grp12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage12_subdone = ((1'b1 == ap_block_state22_io_grp12) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage13_01001_grp13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage13_11001_grp13 = ((1'b1 == ap_block_state23_io_grp13) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage13_grp13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage13_subdone = ((1'b1 == ap_block_state23_io_grp13) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage14_01001_grp14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage14_11001_grp14 = ((1'b1 == ap_block_state24_io_grp14) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage14_grp14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage14_subdone = ((1'b1 == ap_block_state24_io_grp14) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage15_01001_grp15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage15_11001_grp15 = ((1'b1 == ap_block_state25_io_grp15) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage15_grp15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage15_subdone = ((1'b1 == ap_block_state25_io_grp15) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage16_01001_grp16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage16_11001_grp16 = ((1'b1 == ap_block_state26_io_grp16) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage16_grp16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage16_subdone = ((1'b1 == ap_block_state26_io_grp16) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage17_01001_grp17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage17_11001_grp17 = ((1'b1 == ap_block_state27_io_grp17) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage17_grp17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage17_subdone = ((1'b1 == ap_block_state27_io_grp17) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage18_01001_grp18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage18_11001_grp18 = ((1'b1 == ap_block_state28_io_grp18) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage18_grp18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage18_subdone = ((1'b1 == ap_block_state28_io_grp18) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage19_01001_grp19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage19_11001_grp19 = ((1'b1 == ap_block_state29_io_grp19) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage19_grp19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage19_subdone = ((1'b1 == ap_block_state29_io_grp19) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage1_01001_grp2 = ((1'b1 == ap_block_state11_pp1_stage1_iter0_grp2) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage1_11001_grp2 = (((1'b1 == ap_block_state11_pp1_stage1_iter0_grp2) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_pp1_stage1_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((1'b1 == ap_block_state11_pp1_stage1_iter0_grp2) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_pp1_stage20_01001_grp20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage20_11001_grp20 = ((1'b1 == ap_block_state30_io_grp20) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage20_grp20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage20_subdone = ((1'b1 == ap_block_state30_io_grp20) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage21_01001_grp21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage21_11001_grp21 = ((1'b1 == ap_block_state31_io_grp21) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage21_grp21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage21_subdone = ((1'b1 == ap_block_state31_io_grp21) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage22_01001_grp22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage22_11001_grp22 = ((1'b1 == ap_block_state32_io_grp22) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage22_grp22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage22_subdone = ((1'b1 == ap_block_state32_io_grp22) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage23_01001_grp23 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage23_11001_grp23 = ((1'b1 == ap_block_state33_io_grp23) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage23_grp23 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage23_subdone = ((1'b1 == ap_block_state33_io_grp23) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage24_01001_grp24 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage24_11001_grp24 = ((1'b1 == ap_block_state34_io_grp24) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage24_grp24 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage24_subdone = ((1'b1 == ap_block_state34_io_grp24) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage25_01001_grp25 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage25_11001_grp25 = ((1'b1 == ap_block_state35_io_grp25) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage25_grp25 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage25_subdone = ((1'b1 == ap_block_state35_io_grp25) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage26_01001_grp26 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage26_11001_grp26 = ((1'b1 == ap_block_state36_io_grp26) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage26_grp26 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage26_subdone = ((1'b1 == ap_block_state36_io_grp26) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage27_01001_grp27 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage27_11001_grp27 = ((1'b1 == ap_block_state37_io_grp27) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage27_grp27 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage27_subdone = ((1'b1 == ap_block_state37_io_grp27) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage28_01001_grp28 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage28_11001_grp28 = ((1'b1 == ap_block_state38_io_grp28) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage28_grp28 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage28_subdone = ((1'b1 == ap_block_state38_io_grp28) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage29_01001_grp29 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage29_11001_grp29 = ((1'b1 == ap_block_state39_io_grp29) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage29_grp29 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage29_subdone = ((1'b1 == ap_block_state39_io_grp29) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage2_01001_grp34 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_11001_grp34 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp1_stage2_grp34 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp1_stage30_01001_grp30 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage30_11001_grp30 = ((1'b1 == ap_block_state40_io_grp30) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage30_grp30 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage30_subdone = ((1'b1 == ap_block_state40_io_grp30) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage31_01001_grp31 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage31_11001_grp31 = ((1'b1 == ap_block_state41_io_grp31) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage31_grp31 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage31_subdone = ((1'b1 == ap_block_state41_io_grp31) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage3_01001_grp35 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_11001_grp3 = ((1'b1 == ap_block_state13_io_grp3) & (1'b0 == ap_block_pp1_stage3_subdone_grp3_done_reg) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage3_11001_grp35 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage3_subdone_grp35_done_reg));
end

assign ap_block_pp1_stage3_grp3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_grp35 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_subdone = (((1'b1 == ap_block_state13_io_grp3) & (1'b0 == ap_block_pp1_stage3_subdone_grp3_done_reg) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage3_subdone_grp35_done_reg)));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone_grp3 = ((1'b1 == ap_block_state13_io_grp3) & (1'b0 == ap_block_pp1_stage3_subdone_grp3_done_reg) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone_grp35 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage3_subdone_grp35_done_reg));
end

assign ap_block_pp1_stage4_01001_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_11001_grp4 = ((1'b1 == ap_block_state14_io_grp4) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage4_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((1'b1 == ap_block_state14_io_grp4) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage5_01001_grp5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_11001_grp5 = ((1'b1 == ap_block_state15_io_grp5) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage5_grp5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((1'b1 == ap_block_state15_io_grp5) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage6_01001_grp6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_11001_grp6 = ((1'b1 == ap_block_state16_io_grp6) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage6_grp6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((1'b1 == ap_block_state16_io_grp6) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage7_01001_grp7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_11001_grp7 = ((1'b1 == ap_block_state17_io_grp7) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage7_grp7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_subdone = ((1'b1 == ap_block_state17_io_grp7) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage8_01001_grp8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage8_11001_grp36 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage8_subdone_grp36_done_reg) & (m_axi_gmem_output_0_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage8_11001_grp8 = ((1'b1 == ap_block_state18_io_grp8) & (1'b0 == ap_block_pp1_stage8_subdone_grp8_done_reg) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage8_grp36 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage8_grp8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage8_subdone = (((1'b1 == ap_block_state18_io_grp8) & (1'b0 == ap_block_pp1_stage8_subdone_grp8_done_reg) & (ap_enable_reg_pp1_iter0_reg == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage8_subdone_grp36_done_reg) & (m_axi_gmem_output_0_BVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage8_subdone_grp36 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage8_subdone_grp36_done_reg) & (m_axi_gmem_output_0_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage8_subdone_grp8 = ((1'b1 == ap_block_state18_io_grp8) & (1'b0 == ap_block_pp1_stage8_subdone_grp8_done_reg) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage9_01001_grp9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage9_11001_grp9 = ((1'b1 == ap_block_state19_io_grp9) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

assign ap_block_pp1_stage9_grp9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage9_subdone = ((1'b1 == ap_block_state19_io_grp9) & (ap_enable_reg_pp1_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (full_cubic_output_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp1_stage1_iter0_grp2 = ((layer_pipeline_streams_8_empty_n == 1'b0) & (ap_predicate_op91_read_state11 == 1'b1));
end

always @ (*) begin
    ap_block_state13_io_grp3 = ((ap_predicate_op136_writereq_state13 == 1'b1) & (m_axi_gmem_output_0_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state14_io_grp4 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op137_write_state14 == 1'b1));
end

always @ (*) begin
    ap_block_state15_io_grp5 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op138_write_state15 == 1'b1));
end

always @ (*) begin
    ap_block_state16_io_grp6 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op139_write_state16 == 1'b1));
end

always @ (*) begin
    ap_block_state17_io_grp7 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op140_write_state17 == 1'b1));
end

always @ (*) begin
    ap_block_state18_io_grp8 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op141_write_state18 == 1'b1));
end

always @ (*) begin
    ap_block_state19_io_grp9 = ((ap_predicate_op142_write_state19 == 1'b1) & (m_axi_gmem_output_0_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state20_io_grp10 = ((ap_predicate_op143_write_state20 == 1'b1) & (m_axi_gmem_output_0_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state21_io_grp11 = ((ap_predicate_op144_write_state21 == 1'b1) & (m_axi_gmem_output_0_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state22_io_grp12 = ((ap_predicate_op145_write_state22 == 1'b1) & (m_axi_gmem_output_0_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state23_io_grp13 = ((ap_predicate_op146_write_state23 == 1'b1) & (m_axi_gmem_output_0_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state24_io_grp14 = ((ap_predicate_op147_write_state24 == 1'b1) & (m_axi_gmem_output_0_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state25_io_grp15 = ((ap_predicate_op148_write_state25 == 1'b1) & (m_axi_gmem_output_0_WREADY == 1'b0));
end

always @ (*) begin
    ap_block_state26_io_grp16 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op149_write_state26 == 1'b1));
end

always @ (*) begin
    ap_block_state27_io_grp17 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op150_write_state27 == 1'b1));
end

always @ (*) begin
    ap_block_state28_io_grp18 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op151_write_state28 == 1'b1));
end

always @ (*) begin
    ap_block_state29_io_grp19 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op152_write_state29 == 1'b1));
end

always @ (*) begin
    ap_block_state30_io_grp20 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op153_write_state30 == 1'b1));
end

always @ (*) begin
    ap_block_state31_io_grp21 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op154_write_state31 == 1'b1));
end

always @ (*) begin
    ap_block_state32_io_grp22 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op155_write_state32 == 1'b1));
end

always @ (*) begin
    ap_block_state33_io_grp23 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op156_write_state33 == 1'b1));
end

always @ (*) begin
    ap_block_state34_io_grp24 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op157_write_state34 == 1'b1));
end

always @ (*) begin
    ap_block_state35_io_grp25 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op158_write_state35 == 1'b1));
end

always @ (*) begin
    ap_block_state36_io_grp26 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op159_write_state36 == 1'b1));
end

always @ (*) begin
    ap_block_state37_io_grp27 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op160_write_state37 == 1'b1));
end

always @ (*) begin
    ap_block_state38_io_grp28 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op161_write_state38 == 1'b1));
end

always @ (*) begin
    ap_block_state39_io_grp29 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op162_write_state39 == 1'b1));
end

always @ (*) begin
    ap_block_state40_io_grp30 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op163_write_state40 == 1'b1));
end

always @ (*) begin
    ap_block_state41_io_grp31 = ((m_axi_gmem_output_0_WREADY == 1'b0) & (ap_predicate_op164_write_state41 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_predicate_op136_writereq_state13 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op137_write_state14 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op138_write_state15 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op139_write_state16 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op140_write_state17 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op141_write_state18 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op142_write_state19 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op143_write_state20 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op144_write_state21 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op145_write_state22 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op146_write_state23 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op147_write_state24 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op148_write_state25 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op149_write_state26 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op150_write_state27 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op151_write_state28 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op152_write_state29 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op153_write_state30 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op154_write_state31 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op155_write_state32 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op156_write_state33 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op157_write_state34 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op158_write_state35 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op159_write_state36 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op160_write_state37 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op161_write_state38 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op162_write_state39 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op163_write_state40 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op164_write_state41 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_op91_read_state11 = ((tmp_reg_1038 == 1'd1) & (icmp_ln609_reg_1034 == 1'd0));
end

always @ (*) begin
    ap_predicate_tran10to51_state10 = ((tmp_nbreadreq_fu_263_p3 == 1'd0) | (icmp_ln609_fu_594_p2 == 1'd1));
end

assign full_cubic_addr_fu_963_p2 = (p_shl_fu_948_p1 + p_shl6_fu_959_p1);

assign icmp_ln600_fu_569_p2 = ((i_fu_232 == 24'd10485760) ? 1'b1 : 1'b0);

assign icmp_ln609_fu_594_p2 = ((v_fu_236 == 14'd10000) ? 1'b1 : 1'b0);

assign m_axi_gmem_output_0_ARADDR = 64'd0;

assign m_axi_gmem_output_0_ARBURST = 2'd0;

assign m_axi_gmem_output_0_ARCACHE = 4'd0;

assign m_axi_gmem_output_0_ARID = 1'd0;

assign m_axi_gmem_output_0_ARLEN = 32'd0;

assign m_axi_gmem_output_0_ARLOCK = 2'd0;

assign m_axi_gmem_output_0_ARPROT = 3'd0;

assign m_axi_gmem_output_0_ARQOS = 4'd0;

assign m_axi_gmem_output_0_ARREGION = 4'd0;

assign m_axi_gmem_output_0_ARSIZE = 3'd0;

assign m_axi_gmem_output_0_ARUSER = 1'd0;

assign m_axi_gmem_output_0_ARVALID = 1'b0;

assign m_axi_gmem_output_0_AWBURST = 2'd0;

assign m_axi_gmem_output_0_AWCACHE = 4'd0;

assign m_axi_gmem_output_0_AWID = 1'd0;

assign m_axi_gmem_output_0_AWLOCK = 2'd0;

assign m_axi_gmem_output_0_AWPROT = 3'd0;

assign m_axi_gmem_output_0_AWQOS = 4'd0;

assign m_axi_gmem_output_0_AWREGION = 4'd0;

assign m_axi_gmem_output_0_AWSIZE = 3'd0;

assign m_axi_gmem_output_0_AWUSER = 1'd0;

assign m_axi_gmem_output_0_RREADY = 1'b0;

assign m_axi_gmem_output_0_WID = 1'd0;

assign m_axi_gmem_output_0_WLAST = 1'b0;

assign m_axi_gmem_output_0_WSTRB = 4'd15;

assign m_axi_gmem_output_0_WUSER = 1'd0;

assign p_shl6_fu_959_p1 = tmp_646_fu_952_p3;

assign p_shl_fu_948_p1 = tmp_645_fu_941_p3;

assign sext_ln600_fu_551_p1 = $signed(trunc_ln_fu_541_p4);

assign sext_ln626_fu_996_p1 = $signed(trunc_ln1_fu_986_p4);

assign shl_ln_fu_969_p3 = {{full_cubic_addr_fu_963_p2}, {2'd0}};

assign tmp_645_fu_941_p3 = {{tmp_644_reg_1202}, {5'd0}};

assign tmp_646_fu_952_p3 = {{tmp_644_reg_1202}, {3'd0}};

assign tmp_nbreadreq_fu_263_p3 = layer_pipeline_streams_8_empty_n;

assign trunc_ln1_fu_986_p4 = {{add_ln628_fu_981_p2[63:2]}};

assign trunc_ln_fu_541_p4 = {{full_cubic_output_dout[63:2]}};

assign v_2_fu_600_p2 = (v_fu_236 + 14'd1);

assign zext_ln628_fu_977_p1 = shl_ln_fu_969_p3;

endmodule //ocnn6_net_8_layer_pipeline_ocnn6_final_layer_output_reconstruction_streaming

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ocnn6_net_8_layer_pipeline_Loop_VITIS_LOOP_209_5_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        pruned_voxel_count_0_reload_loc_dout,
        pruned_voxel_count_0_reload_loc_empty_n,
        pruned_voxel_count_0_reload_loc_read,
        pruned_voxel_count_0_reload_loc_num_data_valid,
        pruned_voxel_count_0_reload_loc_fifo_cap,
        current_morton_list_din,
        current_morton_list_full_n,
        current_morton_list_write,
        current_morton_list_num_data_valid,
        current_morton_list_fifo_cap,
        pruned_voxel_count_0_reload_loc_c_din,
        pruned_voxel_count_0_reload_loc_c_full_n,
        pruned_voxel_count_0_reload_loc_c_write,
        pruned_voxel_count_0_reload_loc_c_num_data_valid,
        pruned_voxel_count_0_reload_loc_c_fifo_cap
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] pruned_voxel_count_0_reload_loc_dout;
input   pruned_voxel_count_0_reload_loc_empty_n;
output   pruned_voxel_count_0_reload_loc_read;
input  [10:0] pruned_voxel_count_0_reload_loc_num_data_valid;
input  [10:0] pruned_voxel_count_0_reload_loc_fifo_cap;
output  [8:0] current_morton_list_din;
input   current_morton_list_full_n;
output   current_morton_list_write;
input  [10:0] current_morton_list_num_data_valid;
input  [10:0] current_morton_list_fifo_cap;
output  [31:0] pruned_voxel_count_0_reload_loc_c_din;
input   pruned_voxel_count_0_reload_loc_c_full_n;
output   pruned_voxel_count_0_reload_loc_c_write;
input  [10:0] pruned_voxel_count_0_reload_loc_c_num_data_valid;
input  [10:0] pruned_voxel_count_0_reload_loc_c_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pruned_voxel_count_0_reload_loc_read;
reg current_morton_list_write;
reg pruned_voxel_count_0_reload_loc_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    pruned_voxel_count_0_reload_loc_blk_n;
reg    current_morton_list_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_grp1;
reg    pruned_voxel_count_0_reload_loc_c_blk_n;
wire   [9:0] select_ln209_fu_103_p3;
reg   [9:0] select_ln209_reg_146;
reg    ap_block_state1;
wire   [8:0] trunc_ln210_fu_130_p1;
reg   [8:0] trunc_ln210_reg_154;
reg    ap_block_pp0_stage0_11001;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln209_fu_119_p2;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [9:0] v_fu_58;
wire   [9:0] v_3_fu_124_p2;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [22:0] tmp_fu_87_p4;
wire   [0:0] icmp_fu_97_p2;
wire   [9:0] trunc_ln209_fu_83_p1;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 v_fu_58 = 10'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        v_fu_58 <= 10'd0;
    end else if (((icmp_ln209_fu_119_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v_fu_58 <= v_3_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        select_ln209_reg_146 <= select_ln209_fu_103_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln210_reg_154 <= trunc_ln210_fu_130_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln209_fu_119_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_morton_list_blk_n = current_morton_list_full_n;
    end else begin
        current_morton_list_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_morton_list_write = 1'b1;
    end else begin
        current_morton_list_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pruned_voxel_count_0_reload_loc_blk_n = pruned_voxel_count_0_reload_loc_empty_n;
    end else begin
        pruned_voxel_count_0_reload_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pruned_voxel_count_0_reload_loc_c_blk_n = pruned_voxel_count_0_reload_loc_c_full_n;
    end else begin
        pruned_voxel_count_0_reload_loc_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        pruned_voxel_count_0_reload_loc_c_write = 1'b1;
    end else begin
        pruned_voxel_count_0_reload_loc_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        pruned_voxel_count_0_reload_loc_read = 1'b1;
    end else begin
        pruned_voxel_count_0_reload_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln209_fu_119_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln209_fu_119_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (current_morton_list_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (current_morton_list_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (current_morton_list_full_n == 1'b0));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (current_morton_list_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (pruned_voxel_count_0_reload_loc_c_full_n == 1'b0) | (pruned_voxel_count_0_reload_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign current_morton_list_din = trunc_ln210_reg_154;

assign icmp_fu_97_p2 = ((tmp_fu_87_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln209_fu_119_p2 = ((v_fu_58 == select_ln209_reg_146) ? 1'b1 : 1'b0);

assign pruned_voxel_count_0_reload_loc_c_din = pruned_voxel_count_0_reload_loc_dout;

assign select_ln209_fu_103_p3 = ((icmp_fu_97_p2[0:0] == 1'b1) ? trunc_ln209_fu_83_p1 : 10'd512);

assign tmp_fu_87_p4 = {{pruned_voxel_count_0_reload_loc_dout[31:9]}};

assign trunc_ln209_fu_83_p1 = pruned_voxel_count_0_reload_loc_dout[9:0];

assign trunc_ln210_fu_130_p1 = v_fu_58[8:0];

assign v_3_fu_124_p2 = (v_fu_58 + 10'd1);

endmodule //ocnn6_net_8_layer_pipeline_Loop_VITIS_LOOP_209_5_proc

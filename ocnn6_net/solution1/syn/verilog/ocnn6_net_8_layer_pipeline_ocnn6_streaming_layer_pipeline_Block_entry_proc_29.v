// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ocnn6_net_8_layer_pipeline_ocnn6_streaming_layer_pipeline_Block_entry_proc_29 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer_weights,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_out_num_data_valid,
        p_out_fifo_cap,
        p_out1_din,
        p_out1_full_n,
        p_out1_write,
        p_out1_num_data_valid,
        p_out1_fifo_cap,
        p_out2_din,
        p_out2_full_n,
        p_out2_write,
        p_out2_num_data_valid,
        p_out2_fifo_cap,
        p_out3_din,
        p_out3_full_n,
        p_out3_write,
        p_out3_num_data_valid,
        p_out3_fifo_cap,
        p_out4_din,
        p_out4_full_n,
        p_out4_write,
        p_out4_num_data_valid,
        p_out4_fifo_cap,
        p_out5_din,
        p_out5_full_n,
        p_out5_write,
        p_out5_num_data_valid,
        p_out5_fifo_cap,
        p_out6_din,
        p_out6_full_n,
        p_out6_write,
        p_out6_num_data_valid,
        p_out6_fifo_cap,
        p_out7_din,
        p_out7_full_n,
        p_out7_write,
        p_out7_num_data_valid,
        p_out7_fifo_cap,
        p_out8_din,
        p_out8_full_n,
        p_out8_write,
        p_out8_num_data_valid,
        p_out8_fifo_cap,
        p_out9_din,
        p_out9_full_n,
        p_out9_write,
        p_out9_num_data_valid,
        p_out9_fifo_cap,
        p_out10_din,
        p_out10_full_n,
        p_out10_write,
        p_out10_num_data_valid,
        p_out10_fifo_cap,
        p_out11_din,
        p_out11_full_n,
        p_out11_write,
        p_out11_num_data_valid,
        p_out11_fifo_cap,
        p_out12_din,
        p_out12_full_n,
        p_out12_write,
        p_out12_num_data_valid,
        p_out12_fifo_cap,
        p_out13_din,
        p_out13_full_n,
        p_out13_write,
        p_out13_num_data_valid,
        p_out13_fifo_cap,
        p_out14_din,
        p_out14_full_n,
        p_out14_write,
        p_out14_num_data_valid,
        p_out14_fifo_cap,
        p_out15_din,
        p_out15_full_n,
        p_out15_write,
        p_out15_num_data_valid,
        p_out15_fifo_cap,
        p_out16_din,
        p_out16_full_n,
        p_out16_write,
        p_out16_num_data_valid,
        p_out16_fifo_cap,
        p_out17_din,
        p_out17_full_n,
        p_out17_write,
        p_out17_num_data_valid,
        p_out17_fifo_cap,
        p_out18_din,
        p_out18_full_n,
        p_out18_write,
        p_out18_num_data_valid,
        p_out18_fifo_cap,
        p_out19_din,
        p_out19_full_n,
        p_out19_write,
        p_out19_num_data_valid,
        p_out19_fifo_cap,
        p_out20_din,
        p_out20_full_n,
        p_out20_write,
        p_out20_num_data_valid,
        p_out20_fifo_cap,
        p_out21_din,
        p_out21_full_n,
        p_out21_write,
        p_out21_num_data_valid,
        p_out21_fifo_cap,
        p_out22_din,
        p_out22_full_n,
        p_out22_write,
        p_out22_num_data_valid,
        p_out22_fifo_cap,
        p_out23_din,
        p_out23_full_n,
        p_out23_write,
        p_out23_num_data_valid,
        p_out23_fifo_cap,
        p_out24_din,
        p_out24_full_n,
        p_out24_write,
        p_out24_num_data_valid,
        p_out24_fifo_cap,
        p_out25_din,
        p_out25_full_n,
        p_out25_write,
        p_out25_num_data_valid,
        p_out25_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] layer_weights;
output  [63:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [10:0] p_out_num_data_valid;
input  [10:0] p_out_fifo_cap;
output  [63:0] p_out1_din;
input   p_out1_full_n;
output   p_out1_write;
input  [10:0] p_out1_num_data_valid;
input  [10:0] p_out1_fifo_cap;
output  [63:0] p_out2_din;
input   p_out2_full_n;
output   p_out2_write;
input  [10:0] p_out2_num_data_valid;
input  [10:0] p_out2_fifo_cap;
output  [63:0] p_out3_din;
input   p_out3_full_n;
output   p_out3_write;
input  [10:0] p_out3_num_data_valid;
input  [10:0] p_out3_fifo_cap;
output  [63:0] p_out4_din;
input   p_out4_full_n;
output   p_out4_write;
input  [10:0] p_out4_num_data_valid;
input  [10:0] p_out4_fifo_cap;
output  [63:0] p_out5_din;
input   p_out5_full_n;
output   p_out5_write;
input  [10:0] p_out5_num_data_valid;
input  [10:0] p_out5_fifo_cap;
output  [63:0] p_out6_din;
input   p_out6_full_n;
output   p_out6_write;
input  [10:0] p_out6_num_data_valid;
input  [10:0] p_out6_fifo_cap;
output  [63:0] p_out7_din;
input   p_out7_full_n;
output   p_out7_write;
input  [10:0] p_out7_num_data_valid;
input  [10:0] p_out7_fifo_cap;
output  [63:0] p_out8_din;
input   p_out8_full_n;
output   p_out8_write;
input  [10:0] p_out8_num_data_valid;
input  [10:0] p_out8_fifo_cap;
output  [63:0] p_out9_din;
input   p_out9_full_n;
output   p_out9_write;
input  [10:0] p_out9_num_data_valid;
input  [10:0] p_out9_fifo_cap;
output  [63:0] p_out10_din;
input   p_out10_full_n;
output   p_out10_write;
input  [10:0] p_out10_num_data_valid;
input  [10:0] p_out10_fifo_cap;
output  [63:0] p_out11_din;
input   p_out11_full_n;
output   p_out11_write;
input  [10:0] p_out11_num_data_valid;
input  [10:0] p_out11_fifo_cap;
output  [63:0] p_out12_din;
input   p_out12_full_n;
output   p_out12_write;
input  [10:0] p_out12_num_data_valid;
input  [10:0] p_out12_fifo_cap;
output  [63:0] p_out13_din;
input   p_out13_full_n;
output   p_out13_write;
input  [10:0] p_out13_num_data_valid;
input  [10:0] p_out13_fifo_cap;
output  [63:0] p_out14_din;
input   p_out14_full_n;
output   p_out14_write;
input  [10:0] p_out14_num_data_valid;
input  [10:0] p_out14_fifo_cap;
output  [63:0] p_out15_din;
input   p_out15_full_n;
output   p_out15_write;
input  [10:0] p_out15_num_data_valid;
input  [10:0] p_out15_fifo_cap;
output  [63:0] p_out16_din;
input   p_out16_full_n;
output   p_out16_write;
input  [10:0] p_out16_num_data_valid;
input  [10:0] p_out16_fifo_cap;
output  [63:0] p_out17_din;
input   p_out17_full_n;
output   p_out17_write;
input  [10:0] p_out17_num_data_valid;
input  [10:0] p_out17_fifo_cap;
output  [63:0] p_out18_din;
input   p_out18_full_n;
output   p_out18_write;
input  [10:0] p_out18_num_data_valid;
input  [10:0] p_out18_fifo_cap;
output  [63:0] p_out19_din;
input   p_out19_full_n;
output   p_out19_write;
input  [10:0] p_out19_num_data_valid;
input  [10:0] p_out19_fifo_cap;
output  [63:0] p_out20_din;
input   p_out20_full_n;
output   p_out20_write;
input  [10:0] p_out20_num_data_valid;
input  [10:0] p_out20_fifo_cap;
output  [63:0] p_out21_din;
input   p_out21_full_n;
output   p_out21_write;
input  [10:0] p_out21_num_data_valid;
input  [10:0] p_out21_fifo_cap;
output  [63:0] p_out22_din;
input   p_out22_full_n;
output   p_out22_write;
input  [10:0] p_out22_num_data_valid;
input  [10:0] p_out22_fifo_cap;
output  [63:0] p_out23_din;
input   p_out23_full_n;
output   p_out23_write;
input  [10:0] p_out23_num_data_valid;
input  [10:0] p_out23_fifo_cap;
output  [63:0] p_out24_din;
input   p_out24_full_n;
output   p_out24_write;
input  [10:0] p_out24_num_data_valid;
input  [10:0] p_out24_fifo_cap;
output  [63:0] p_out25_din;
input   p_out25_full_n;
output   p_out25_write;
input  [10:0] p_out25_num_data_valid;
input  [10:0] p_out25_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_out_write;
reg p_out1_write;
reg p_out2_write;
reg p_out3_write;
reg p_out4_write;
reg p_out5_write;
reg p_out6_write;
reg p_out7_write;
reg p_out8_write;
reg p_out9_write;
reg p_out10_write;
reg p_out11_write;
reg p_out12_write;
reg p_out13_write;
reg p_out14_write;
reg p_out15_write;
reg p_out16_write;
reg p_out17_write;
reg p_out18_write;
reg p_out19_write;
reg p_out20_write;
reg p_out21_write;
reg p_out22_write;
reg p_out23_write;
reg p_out24_write;
reg p_out25_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_out_blk_n;
reg    p_out1_blk_n;
reg    p_out2_blk_n;
reg    p_out3_blk_n;
reg    p_out4_blk_n;
reg    p_out5_blk_n;
reg    p_out6_blk_n;
reg    p_out7_blk_n;
reg    p_out8_blk_n;
reg    p_out9_blk_n;
reg    p_out10_blk_n;
reg    p_out11_blk_n;
reg    p_out12_blk_n;
reg    p_out13_blk_n;
reg    p_out14_blk_n;
reg    p_out15_blk_n;
reg    p_out16_blk_n;
reg    p_out17_blk_n;
reg    p_out18_blk_n;
reg    p_out19_blk_n;
reg    p_out20_blk_n;
reg    p_out21_blk_n;
reg    p_out22_blk_n;
reg    p_out23_blk_n;
reg    p_out24_blk_n;
reg    p_out25_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out10_blk_n = p_out10_full_n;
    end else begin
        p_out10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out10_write = 1'b1;
    end else begin
        p_out10_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out11_blk_n = p_out11_full_n;
    end else begin
        p_out11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out11_write = 1'b1;
    end else begin
        p_out11_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out12_blk_n = p_out12_full_n;
    end else begin
        p_out12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out12_write = 1'b1;
    end else begin
        p_out12_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out13_blk_n = p_out13_full_n;
    end else begin
        p_out13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out13_write = 1'b1;
    end else begin
        p_out13_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out14_blk_n = p_out14_full_n;
    end else begin
        p_out14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out14_write = 1'b1;
    end else begin
        p_out14_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out15_blk_n = p_out15_full_n;
    end else begin
        p_out15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out15_write = 1'b1;
    end else begin
        p_out15_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out16_blk_n = p_out16_full_n;
    end else begin
        p_out16_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out16_write = 1'b1;
    end else begin
        p_out16_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out17_blk_n = p_out17_full_n;
    end else begin
        p_out17_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out17_write = 1'b1;
    end else begin
        p_out17_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out18_blk_n = p_out18_full_n;
    end else begin
        p_out18_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out18_write = 1'b1;
    end else begin
        p_out18_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out19_blk_n = p_out19_full_n;
    end else begin
        p_out19_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out19_write = 1'b1;
    end else begin
        p_out19_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out1_blk_n = p_out1_full_n;
    end else begin
        p_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out1_write = 1'b1;
    end else begin
        p_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out20_blk_n = p_out20_full_n;
    end else begin
        p_out20_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out20_write = 1'b1;
    end else begin
        p_out20_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out21_blk_n = p_out21_full_n;
    end else begin
        p_out21_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out21_write = 1'b1;
    end else begin
        p_out21_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out22_blk_n = p_out22_full_n;
    end else begin
        p_out22_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out22_write = 1'b1;
    end else begin
        p_out22_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out23_blk_n = p_out23_full_n;
    end else begin
        p_out23_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out23_write = 1'b1;
    end else begin
        p_out23_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out24_blk_n = p_out24_full_n;
    end else begin
        p_out24_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out24_write = 1'b1;
    end else begin
        p_out24_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out25_blk_n = p_out25_full_n;
    end else begin
        p_out25_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out25_write = 1'b1;
    end else begin
        p_out25_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out2_blk_n = p_out2_full_n;
    end else begin
        p_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out2_write = 1'b1;
    end else begin
        p_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out3_blk_n = p_out3_full_n;
    end else begin
        p_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out3_write = 1'b1;
    end else begin
        p_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out4_blk_n = p_out4_full_n;
    end else begin
        p_out4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out4_write = 1'b1;
    end else begin
        p_out4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out5_blk_n = p_out5_full_n;
    end else begin
        p_out5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out5_write = 1'b1;
    end else begin
        p_out5_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out6_blk_n = p_out6_full_n;
    end else begin
        p_out6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out6_write = 1'b1;
    end else begin
        p_out6_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out7_blk_n = p_out7_full_n;
    end else begin
        p_out7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out7_write = 1'b1;
    end else begin
        p_out7_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out8_blk_n = p_out8_full_n;
    end else begin
        p_out8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out8_write = 1'b1;
    end else begin
        p_out8_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out9_blk_n = p_out9_full_n;
    end else begin
        p_out9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out9_write = 1'b1;
    end else begin
        p_out9_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((p_out12_full_n == 1'b0) | (p_out11_full_n == 1'b0) | (p_out10_full_n == 1'b0) | (p_out9_full_n == 1'b0) | (p_out8_full_n == 1'b0) | (ap_start == 1'b0) | (p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (p_out5_full_n == 1'b0) | (p_out4_full_n == 1'b0) | (p_out3_full_n == 1'b0) | (p_out2_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (p_out25_full_n == 1'b0) | (p_out24_full_n == 1'b0) | (p_out23_full_n == 1'b0) | (p_out22_full_n == 1'b0) | (p_out21_full_n == 1'b0) | (p_out20_full_n == 1'b0) | (p_out19_full_n == 1'b0) | (p_out18_full_n == 1'b0) | (p_out17_full_n == 1'b0) | (p_out16_full_n == 1'b0) | (p_out15_full_n == 1'b0) | (p_out14_full_n == 1'b0) | (ap_done_reg == 1'b1) | (p_out13_full_n == 1'b0));
end

assign p_out10_din = (layer_weights + 64'd45056);

assign p_out11_din = (layer_weights + 64'd49152);

assign p_out12_din = (layer_weights + 64'd53248);

assign p_out13_din = (layer_weights + 64'd57344);

assign p_out14_din = (layer_weights + 64'd61440);

assign p_out15_din = (layer_weights + 64'd65536);

assign p_out16_din = (layer_weights + 64'd69632);

assign p_out17_din = (layer_weights + 64'd73728);

assign p_out18_din = (layer_weights + 64'd77824);

assign p_out19_din = (layer_weights + 64'd81920);

assign p_out1_din = (layer_weights + 64'd8192);

assign p_out20_din = (layer_weights + 64'd86016);

assign p_out21_din = (layer_weights + 64'd90112);

assign p_out22_din = (layer_weights + 64'd94208);

assign p_out23_din = (layer_weights + 64'd98304);

assign p_out24_din = (layer_weights + 64'd102400);

assign p_out25_din = (layer_weights + 64'd106496);

assign p_out2_din = (layer_weights + 64'd12288);

assign p_out3_din = (layer_weights + 64'd16384);

assign p_out4_din = (layer_weights + 64'd20480);

assign p_out5_din = (layer_weights + 64'd24576);

assign p_out6_din = (layer_weights + 64'd28672);

assign p_out7_din = (layer_weights + 64'd32768);

assign p_out8_din = (layer_weights + 64'd36864);

assign p_out9_din = (layer_weights + 64'd40960);

assign p_out_din = (layer_weights + 64'd4096);

endmodule //ocnn6_net_8_layer_pipeline_ocnn6_streaming_layer_pipeline_Block_entry_proc_29

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ocnn6_net_8_layer_pipeline_Loop_VITIS_LOOP_131_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        pruned_feature_dram_read_dout,
        pruned_feature_dram_read_empty_n,
        pruned_feature_dram_read_read,
        pruned_feature_dram_read_num_data_valid,
        pruned_feature_dram_read_fifo_cap,
        feature_data_stream_dout,
        feature_data_stream_empty_n,
        feature_data_stream_read,
        feature_data_stream_num_data_valid,
        feature_data_stream_fifo_cap,
        write_addr_stream_dout,
        write_addr_stream_empty_n,
        write_addr_stream_read,
        write_addr_stream_num_data_valid,
        write_addr_stream_fifo_cap,
        m_axi_gmem_read_0_AWVALID,
        m_axi_gmem_read_0_AWREADY,
        m_axi_gmem_read_0_AWADDR,
        m_axi_gmem_read_0_AWID,
        m_axi_gmem_read_0_AWLEN,
        m_axi_gmem_read_0_AWSIZE,
        m_axi_gmem_read_0_AWBURST,
        m_axi_gmem_read_0_AWLOCK,
        m_axi_gmem_read_0_AWCACHE,
        m_axi_gmem_read_0_AWPROT,
        m_axi_gmem_read_0_AWQOS,
        m_axi_gmem_read_0_AWREGION,
        m_axi_gmem_read_0_AWUSER,
        m_axi_gmem_read_0_WVALID,
        m_axi_gmem_read_0_WREADY,
        m_axi_gmem_read_0_WDATA,
        m_axi_gmem_read_0_WSTRB,
        m_axi_gmem_read_0_WLAST,
        m_axi_gmem_read_0_WID,
        m_axi_gmem_read_0_WUSER,
        m_axi_gmem_read_0_ARVALID,
        m_axi_gmem_read_0_ARREADY,
        m_axi_gmem_read_0_ARADDR,
        m_axi_gmem_read_0_ARID,
        m_axi_gmem_read_0_ARLEN,
        m_axi_gmem_read_0_ARSIZE,
        m_axi_gmem_read_0_ARBURST,
        m_axi_gmem_read_0_ARLOCK,
        m_axi_gmem_read_0_ARCACHE,
        m_axi_gmem_read_0_ARPROT,
        m_axi_gmem_read_0_ARQOS,
        m_axi_gmem_read_0_ARREGION,
        m_axi_gmem_read_0_ARUSER,
        m_axi_gmem_read_0_RVALID,
        m_axi_gmem_read_0_RREADY,
        m_axi_gmem_read_0_RDATA,
        m_axi_gmem_read_0_RLAST,
        m_axi_gmem_read_0_RID,
        m_axi_gmem_read_0_RFIFONUM,
        m_axi_gmem_read_0_RUSER,
        m_axi_gmem_read_0_RRESP,
        m_axi_gmem_read_0_BVALID,
        m_axi_gmem_read_0_BREADY,
        m_axi_gmem_read_0_BRESP,
        m_axi_gmem_read_0_BID,
        m_axi_gmem_read_0_BUSER,
        pruned_voxel_count_0_out_din,
        pruned_voxel_count_0_out_full_n,
        pruned_voxel_count_0_out_write,
        pruned_voxel_count_0_out_num_data_valid,
        pruned_voxel_count_0_out_fifo_cap
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state12 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] pruned_feature_dram_read_dout;
input   pruned_feature_dram_read_empty_n;
output   pruned_feature_dram_read_read;
input  [10:0] pruned_feature_dram_read_num_data_valid;
input  [10:0] pruned_feature_dram_read_fifo_cap;
input  [1084:0] feature_data_stream_dout;
input   feature_data_stream_empty_n;
output   feature_data_stream_read;
input  [10:0] feature_data_stream_num_data_valid;
input  [10:0] feature_data_stream_fifo_cap;
input  [59:0] write_addr_stream_dout;
input   write_addr_stream_empty_n;
output   write_addr_stream_read;
input  [10:0] write_addr_stream_num_data_valid;
input  [10:0] write_addr_stream_fifo_cap;
output   m_axi_gmem_read_0_AWVALID;
input   m_axi_gmem_read_0_AWREADY;
output  [63:0] m_axi_gmem_read_0_AWADDR;
output  [0:0] m_axi_gmem_read_0_AWID;
output  [31:0] m_axi_gmem_read_0_AWLEN;
output  [2:0] m_axi_gmem_read_0_AWSIZE;
output  [1:0] m_axi_gmem_read_0_AWBURST;
output  [1:0] m_axi_gmem_read_0_AWLOCK;
output  [3:0] m_axi_gmem_read_0_AWCACHE;
output  [2:0] m_axi_gmem_read_0_AWPROT;
output  [3:0] m_axi_gmem_read_0_AWQOS;
output  [3:0] m_axi_gmem_read_0_AWREGION;
output  [0:0] m_axi_gmem_read_0_AWUSER;
output   m_axi_gmem_read_0_WVALID;
input   m_axi_gmem_read_0_WREADY;
output  [31:0] m_axi_gmem_read_0_WDATA;
output  [3:0] m_axi_gmem_read_0_WSTRB;
output   m_axi_gmem_read_0_WLAST;
output  [0:0] m_axi_gmem_read_0_WID;
output  [0:0] m_axi_gmem_read_0_WUSER;
output   m_axi_gmem_read_0_ARVALID;
input   m_axi_gmem_read_0_ARREADY;
output  [63:0] m_axi_gmem_read_0_ARADDR;
output  [0:0] m_axi_gmem_read_0_ARID;
output  [31:0] m_axi_gmem_read_0_ARLEN;
output  [2:0] m_axi_gmem_read_0_ARSIZE;
output  [1:0] m_axi_gmem_read_0_ARBURST;
output  [1:0] m_axi_gmem_read_0_ARLOCK;
output  [3:0] m_axi_gmem_read_0_ARCACHE;
output  [2:0] m_axi_gmem_read_0_ARPROT;
output  [3:0] m_axi_gmem_read_0_ARQOS;
output  [3:0] m_axi_gmem_read_0_ARREGION;
output  [0:0] m_axi_gmem_read_0_ARUSER;
input   m_axi_gmem_read_0_RVALID;
output   m_axi_gmem_read_0_RREADY;
input  [31:0] m_axi_gmem_read_0_RDATA;
input   m_axi_gmem_read_0_RLAST;
input  [0:0] m_axi_gmem_read_0_RID;
input  [12:0] m_axi_gmem_read_0_RFIFONUM;
input  [0:0] m_axi_gmem_read_0_RUSER;
input  [1:0] m_axi_gmem_read_0_RRESP;
input   m_axi_gmem_read_0_BVALID;
output   m_axi_gmem_read_0_BREADY;
input  [1:0] m_axi_gmem_read_0_BRESP;
input  [0:0] m_axi_gmem_read_0_BID;
input  [0:0] m_axi_gmem_read_0_BUSER;
output  [31:0] pruned_voxel_count_0_out_din;
input   pruned_voxel_count_0_out_full_n;
output   pruned_voxel_count_0_out_write;
input  [10:0] pruned_voxel_count_0_out_num_data_valid;
input  [10:0] pruned_voxel_count_0_out_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg pruned_feature_dram_read_read;
reg feature_data_stream_read;
reg write_addr_stream_read;
reg m_axi_gmem_read_0_AWVALID;
reg m_axi_gmem_read_0_WVALID;
reg[31:0] m_axi_gmem_read_0_WDATA;
reg m_axi_gmem_read_0_BREADY;
reg pruned_voxel_count_0_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    pruned_feature_dram_read_blk_n;
reg    feature_data_stream_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_grp1;
reg   [0:0] tmp_reg_282;
reg   [0:0] tmp_s_reg_286;
reg    ap_block_pp0_stage1_subdone_grp1_done_reg;
reg    ap_block_pp0_stage1_subdone_grp1;
reg    ap_block_pp0_stage1_subdone;
reg    write_addr_stream_blk_n;
wire    ap_block_pp0_stage1_grp2;
reg    ap_block_pp0_stage1_subdone_grp2_done_reg;
reg    ap_block_pp0_stage1_subdone_grp2;
reg    gmem_read_blk_n_AW;
wire    ap_block_pp0_stage1_grp3;
reg    ap_block_pp0_stage1_subdone_grp3_done_reg;
reg    ap_block_pp0_stage1_subdone_grp3;
reg    gmem_read_blk_n_W;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_grp4;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_grp5;
reg    ap_block_pp0_stage0_subdone_grp5_done_reg;
reg    ap_block_pp0_stage0_subdone_grp5;
reg    ap_block_pp0_stage0_subdone;
reg    gmem_read_blk_n_B;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0_grp7;
reg    ap_block_pp0_stage0_subdone_grp7_done_reg;
reg    ap_block_pp0_stage0_subdone_grp7;
reg    pruned_voxel_count_0_out_blk_n;
wire    ap_CS_fsm_state12;
reg   [63:0] pruned_feature_dram_read_read_reg_277;
reg    ap_block_state1;
wire   [0:0] tmp_nbreadreq_fu_100_p3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_s_nbreadreq_fu_108_p3;
reg   [63:0] gmem_read_addr_reg_290;
reg   [31:0] voxel_features_reg_298;
reg    ap_predicate_op39_read_state3;
reg    ap_block_state3_pp0_stage1_iter0_grp1;
reg    ap_block_pp0_stage1_11001_grp1;
reg   [31:0] voxel_features_1_reg_303;
reg   [31:0] trunc_ln133_3_reg_308;
reg    ap_predicate_tran2to12_state2;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_predicate_op45_write_state4;
reg    ap_block_state4_io_grp4;
reg    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter2;
wire  signed [63:0] sext_ln143_fu_220_p1;
wire    ap_block_pp0_stage0;
reg    ap_predicate_op44_writereq_state3;
reg    ap_block_state3_io_grp3;
reg    ap_block_pp0_stage1_11001_grp3;
reg    ap_block_pp0_stage0_11001_grp7;
reg    ap_block_pp0_stage2_11001_grp4;
wire    ap_block_pp0_stage2_01001_grp4;
reg    ap_block_pp0_stage0_11001_grp5;
wire    ap_block_pp0_stage0_01001_grp5;
reg    ap_block_pp0_stage1_01001_grp1;
reg   [31:0] pruned_voxel_count_fu_90;
wire   [31:0] pruned_voxel_count_1_fu_175_p2;
reg    ap_predicate_op43_read_state3;
reg    ap_block_state3_pp0_stage1_iter0_grp2;
reg    ap_block_pp0_stage1_11001_grp2;
wire   [31:0] shl_ln131_fu_181_p2;
wire   [31:0] sub_ln131_fu_187_p2;
wire   [33:0] shl_ln_fu_193_p3;
wire   [63:0] zext_ln131_fu_201_p1;
wire   [63:0] add_ln131_fu_205_p2;
wire   [61:0] trunc_ln_fu_210_p4;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp1_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp2_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp3_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp5_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp7_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 pruned_voxel_count_fu_90 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp5_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp5_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp5)) begin
                ap_block_pp0_stage0_subdone_grp5_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp7_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp7_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp7)) begin
                ap_block_pp0_stage0_subdone_grp7_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp1)) begin
                ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp2_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp2_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp2)) begin
                ap_block_pp0_stage1_subdone_grp2_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp3_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp3_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp3)) begin
                ap_block_pp0_stage1_subdone_grp3_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state12) & (pruned_voxel_count_0_out_full_n == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        pruned_voxel_count_fu_90 <= 32'd0;
    end else if (((tmp_s_nbreadreq_fu_108_p3 == 1'd1) & (tmp_nbreadreq_fu_100_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        pruned_voxel_count_fu_90 <= pruned_voxel_count_1_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_read_addr_reg_290 <= sext_ln143_fu_220_p1;
        tmp_reg_282 <= tmp_nbreadreq_fu_100_p3;
        tmp_s_reg_286 <= tmp_s_nbreadreq_fu_108_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        pruned_feature_dram_read_read_reg_277 <= pruned_feature_dram_read_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg))) begin
        trunc_ln133_3_reg_308 <= {{feature_data_stream_dout[96:65]}};
        voxel_features_1_reg_303 <= {{feature_data_stream_dout[64:33]}};
        voxel_features_reg_298 <= {{feature_data_stream_dout[32:1]}};
    end
end

always @ (*) begin
    if ((pruned_voxel_count_0_out_full_n == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_predicate_tran2to12_state2 == 1'b1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (pruned_voxel_count_0_out_full_n == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_s_reg_286 == 1'd1) & (tmp_reg_282 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage1_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        feature_data_stream_blk_n = feature_data_stream_empty_n;
    end else begin
        feature_data_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op39_read_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        feature_data_stream_read = 1'b1;
    end else begin
        feature_data_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_s_reg_286 == 1'd1) & (tmp_reg_282 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg) & (1'b0 == ap_block_pp0_stage1_grp3) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        gmem_read_blk_n_AW = m_axi_gmem_read_0_AWREADY;
    end else begin
        gmem_read_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp7_done_reg) & (1'b0 == ap_block_pp0_stage0_grp7))) begin
        gmem_read_blk_n_B = m_axi_gmem_read_0_BVALID;
    end else begin
        gmem_read_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp5_done_reg) & (1'b0 == ap_block_pp0_stage0_grp5)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_s_reg_286 == 1'd1) & (tmp_reg_282 == 1'd1) & (1'b0 == ap_block_pp0_stage2_grp4) & (ap_enable_reg_pp0_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage1_grp1)))) begin
        gmem_read_blk_n_W = m_axi_gmem_read_0_WREADY;
    end else begin
        gmem_read_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (pruned_voxel_count_0_out_full_n == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op44_writereq_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp3) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        m_axi_gmem_read_0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_read_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp7) & (1'b0 == ap_block_pp0_stage0_subdone_grp7_done_reg))) begin
        m_axi_gmem_read_0_BREADY = 1'b1;
    end else begin
        m_axi_gmem_read_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg))) begin
        m_axi_gmem_read_0_WDATA = trunc_ln133_3_reg_308;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001_grp5) & (1'b0 == ap_block_pp0_stage0_subdone_grp5_done_reg))) begin
        m_axi_gmem_read_0_WDATA = voxel_features_1_reg_303;
    end else if (((ap_predicate_op45_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001_grp4) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        m_axi_gmem_read_0_WDATA = voxel_features_reg_298;
    end else begin
        m_axi_gmem_read_0_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op45_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001_grp4) & (ap_enable_reg_pp0_iter0_reg == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp5) & (1'b0 == ap_block_pp0_stage0_subdone_grp5_done_reg)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)))) begin
        m_axi_gmem_read_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem_read_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        pruned_feature_dram_read_blk_n = pruned_feature_dram_read_empty_n;
    end else begin
        pruned_feature_dram_read_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        pruned_feature_dram_read_read = 1'b1;
    end else begin
        pruned_feature_dram_read_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        pruned_voxel_count_0_out_blk_n = pruned_voxel_count_0_out_full_n;
    end else begin
        pruned_voxel_count_0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (pruned_voxel_count_0_out_full_n == 1'b1))) begin
        pruned_voxel_count_0_out_write = 1'b1;
    end else begin
        pruned_voxel_count_0_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_s_reg_286 == 1'd1) & (tmp_reg_282 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage1_grp2) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        write_addr_stream_blk_n = write_addr_stream_empty_n;
    end else begin
        write_addr_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op43_read_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp2) & (1'b0 == ap_block_pp0_stage1_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter0_reg == 1'b1))) begin
        write_addr_stream_read = 1'b1;
    end else begin
        write_addr_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_predicate_tran2to12_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_predicate_tran2to12_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (pruned_voxel_count_0_out_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln131_fu_205_p2 = (pruned_feature_dram_read_read_reg_277 + zext_ln131_fu_201_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001_grp5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_read_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp5_done_reg)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp7_done_reg) & (m_axi_gmem_read_0_BVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp5 = ((m_axi_gmem_read_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp5_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp7 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp7_done_reg) & (m_axi_gmem_read_0_BVALID == 1'b0));
end

assign ap_block_pp0_stage0_grp5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_read_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp5_done_reg)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp7_done_reg) & (m_axi_gmem_read_0_BVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp5 = ((m_axi_gmem_read_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp5_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp7 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp7_done_reg) & (m_axi_gmem_read_0_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_01001_grp1 = ((1'b1 == ap_block_state3_pp0_stage1_iter0_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_grp1 = (((1'b1 == ap_block_state3_pp0_stage1_iter0_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter0_reg == 1'b1)) | ((m_axi_gmem_read_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_grp2 = ((1'b1 == ap_block_state3_pp0_stage1_iter0_grp2) & (1'b0 == ap_block_pp0_stage1_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_grp3 = ((1'b1 == ap_block_state3_io_grp3) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage1_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem_read_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (((1'b1 == ap_block_state3_pp0_stage1_iter0_grp2) & (1'b0 == ap_block_pp0_stage1_subdone_grp2_done_reg)) | ((1'b1 == ap_block_state3_io_grp3) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg)) | ((1'b1 == ap_block_state3_pp0_stage1_iter0_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp1 = (((1'b1 == ap_block_state3_pp0_stage1_iter0_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter0_reg == 1'b1)) | ((m_axi_gmem_read_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp2 = ((1'b1 == ap_block_state3_pp0_stage1_iter0_grp2) & (1'b0 == ap_block_pp0_stage1_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp3 = ((1'b1 == ap_block_state3_io_grp3) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage2_01001_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001_grp4 = ((1'b1 == ap_block_state4_io_grp4) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage2_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b1 == ap_block_state4_io_grp4) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((pruned_feature_dram_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state3_io_grp3 = ((m_axi_gmem_read_0_AWREADY == 1'b0) & (ap_predicate_op44_writereq_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0_grp1 = ((feature_data_stream_empty_n == 1'b0) & (ap_predicate_op39_read_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0_grp2 = ((write_addr_stream_empty_n == 1'b0) & (ap_predicate_op43_read_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state4_io_grp4 = ((m_axi_gmem_read_0_WREADY == 1'b0) & (ap_predicate_op45_write_state4 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op39_read_state3 = ((tmp_s_reg_286 == 1'd1) & (tmp_reg_282 == 1'd1));
end

always @ (*) begin
    ap_predicate_op43_read_state3 = ((tmp_s_reg_286 == 1'd1) & (tmp_reg_282 == 1'd1));
end

always @ (*) begin
    ap_predicate_op44_writereq_state3 = ((tmp_s_reg_286 == 1'd1) & (tmp_reg_282 == 1'd1));
end

always @ (*) begin
    ap_predicate_op45_write_state4 = ((tmp_s_reg_286 == 1'd1) & (tmp_reg_282 == 1'd1));
end

always @ (*) begin
    ap_predicate_tran2to12_state2 = ((tmp_s_nbreadreq_fu_108_p3 == 1'd0) | (tmp_nbreadreq_fu_100_p3 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign m_axi_gmem_read_0_ARADDR = 64'd0;

assign m_axi_gmem_read_0_ARBURST = 2'd0;

assign m_axi_gmem_read_0_ARCACHE = 4'd0;

assign m_axi_gmem_read_0_ARID = 1'd0;

assign m_axi_gmem_read_0_ARLEN = 32'd0;

assign m_axi_gmem_read_0_ARLOCK = 2'd0;

assign m_axi_gmem_read_0_ARPROT = 3'd0;

assign m_axi_gmem_read_0_ARQOS = 4'd0;

assign m_axi_gmem_read_0_ARREGION = 4'd0;

assign m_axi_gmem_read_0_ARSIZE = 3'd0;

assign m_axi_gmem_read_0_ARUSER = 1'd0;

assign m_axi_gmem_read_0_ARVALID = 1'b0;

assign m_axi_gmem_read_0_AWADDR = gmem_read_addr_reg_290;

assign m_axi_gmem_read_0_AWBURST = 2'd0;

assign m_axi_gmem_read_0_AWCACHE = 4'd0;

assign m_axi_gmem_read_0_AWID = 1'd0;

assign m_axi_gmem_read_0_AWLEN = 64'd3;

assign m_axi_gmem_read_0_AWLOCK = 2'd0;

assign m_axi_gmem_read_0_AWPROT = 3'd0;

assign m_axi_gmem_read_0_AWQOS = 4'd0;

assign m_axi_gmem_read_0_AWREGION = 4'd0;

assign m_axi_gmem_read_0_AWSIZE = 3'd0;

assign m_axi_gmem_read_0_AWUSER = 1'd0;

assign m_axi_gmem_read_0_RREADY = 1'b0;

assign m_axi_gmem_read_0_WID = 1'd0;

assign m_axi_gmem_read_0_WLAST = 1'b0;

assign m_axi_gmem_read_0_WSTRB = 4'd15;

assign m_axi_gmem_read_0_WUSER = 1'd0;

assign pruned_voxel_count_0_out_din = pruned_voxel_count_fu_90;

assign pruned_voxel_count_1_fu_175_p2 = (pruned_voxel_count_fu_90 + 32'd1);

assign sext_ln143_fu_220_p1 = $signed(trunc_ln_fu_210_p4);

assign shl_ln131_fu_181_p2 = pruned_voxel_count_fu_90 << 32'd2;

assign shl_ln_fu_193_p3 = {{sub_ln131_fu_187_p2}, {2'd0}};

assign start_out = real_start;

assign sub_ln131_fu_187_p2 = (shl_ln131_fu_181_p2 - pruned_voxel_count_fu_90);

assign tmp_nbreadreq_fu_100_p3 = feature_data_stream_empty_n;

assign tmp_s_nbreadreq_fu_108_p3 = write_addr_stream_empty_n;

assign trunc_ln_fu_210_p4 = {{add_ln131_fu_205_p2[63:2]}};

assign zext_ln131_fu_201_p1 = shl_ln_fu_193_p3;

endmodule //ocnn6_net_8_layer_pipeline_Loop_VITIS_LOOP_131_1_proc

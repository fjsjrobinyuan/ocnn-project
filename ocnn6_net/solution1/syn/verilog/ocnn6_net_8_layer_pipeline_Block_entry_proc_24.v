// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ocnn6_net_8_layer_pipeline_Block_entry_proc_24 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        pruned_voxel_count_0_loc_dout,
        pruned_voxel_count_0_loc_empty_n,
        pruned_voxel_count_0_loc_read,
        pruned_voxel_count_0_loc_num_data_valid,
        pruned_voxel_count_0_loc_fifo_cap,
        wide_trip_count_out_din,
        wide_trip_count_out_full_n,
        wide_trip_count_out_write,
        wide_trip_count_out_num_data_valid,
        wide_trip_count_out_fifo_cap,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_out_num_data_valid,
        p_out_fifo_cap,
        pruned_voxel_count_0_reload_loc_c1_din,
        pruned_voxel_count_0_reload_loc_c1_full_n,
        pruned_voxel_count_0_reload_loc_c1_write,
        pruned_voxel_count_0_reload_loc_c1_num_data_valid,
        pruned_voxel_count_0_reload_loc_c1_fifo_cap
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] pruned_voxel_count_0_loc_dout;
input   pruned_voxel_count_0_loc_empty_n;
output   pruned_voxel_count_0_loc_read;
input  [10:0] pruned_voxel_count_0_loc_num_data_valid;
input  [10:0] pruned_voxel_count_0_loc_fifo_cap;
output  [31:0] wide_trip_count_out_din;
input   wide_trip_count_out_full_n;
output   wide_trip_count_out_write;
input  [10:0] wide_trip_count_out_num_data_valid;
input  [10:0] wide_trip_count_out_fifo_cap;
output  [33:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
input  [10:0] p_out_num_data_valid;
input  [10:0] p_out_fifo_cap;
output  [31:0] pruned_voxel_count_0_reload_loc_c1_din;
input   pruned_voxel_count_0_reload_loc_c1_full_n;
output   pruned_voxel_count_0_reload_loc_c1_write;
input  [10:0] pruned_voxel_count_0_reload_loc_c1_num_data_valid;
input  [10:0] pruned_voxel_count_0_reload_loc_c1_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg pruned_voxel_count_0_loc_read;
reg wide_trip_count_out_write;
reg p_out_write;
reg pruned_voxel_count_0_reload_loc_c1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    pruned_voxel_count_0_loc_blk_n;
reg    wide_trip_count_out_blk_n;
wire    ap_CS_fsm_state2;
reg    p_out_blk_n;
reg    pruned_voxel_count_0_reload_loc_c1_blk_n;
reg   [31:0] pruned_voxel_count_0_loc_read_reg_76;
reg    ap_block_state1;
reg    ap_block_state2;
wire   [33:0] p_shl_fu_62_p3;
wire   [33:0] pruned_voxel_count_0_loc_load_cast_fu_59_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        pruned_voxel_count_0_loc_read_reg_76 <= pruned_voxel_count_0_loc_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pruned_voxel_count_0_loc_blk_n = pruned_voxel_count_0_loc_empty_n;
    end else begin
        pruned_voxel_count_0_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        pruned_voxel_count_0_loc_read = 1'b1;
    end else begin
        pruned_voxel_count_0_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pruned_voxel_count_0_reload_loc_c1_blk_n = pruned_voxel_count_0_reload_loc_c1_full_n;
    end else begin
        pruned_voxel_count_0_reload_loc_c1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        pruned_voxel_count_0_reload_loc_c1_write = 1'b1;
    end else begin
        pruned_voxel_count_0_reload_loc_c1_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        wide_trip_count_out_blk_n = wide_trip_count_out_full_n;
    end else begin
        wide_trip_count_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        wide_trip_count_out_write = 1'b1;
    end else begin
        wide_trip_count_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (pruned_voxel_count_0_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((pruned_voxel_count_0_reload_loc_c1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (wide_trip_count_out_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign p_out_din = (p_shl_fu_62_p3 - pruned_voxel_count_0_loc_load_cast_fu_59_p1);

assign p_shl_fu_62_p3 = {{pruned_voxel_count_0_loc_read_reg_76}, {2'd0}};

assign pruned_voxel_count_0_loc_load_cast_fu_59_p1 = pruned_voxel_count_0_loc_read_reg_76;

assign pruned_voxel_count_0_reload_loc_c1_din = pruned_voxel_count_0_loc_read_reg_76;

assign start_out = real_start;

assign wide_trip_count_out_din = pruned_voxel_count_0_loc_read_reg_76;

endmodule //ocnn6_net_8_layer_pipeline_Block_entry_proc_24
